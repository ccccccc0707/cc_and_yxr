digraph "classes_superset" {
rankdir=BT
charset="utf-8"
"superset.superset.db_engine_specs.doris.ARRAY" [color="black", fontcolor="black", label=<{ARRAY|python_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.oceanbase.ARRAY" [color="black", fontcolor="black", label=<{ARRAY|python_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.starrocks.ARRAY" [color="black", fontcolor="black", label=<{ARRAY|python_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sqllab.sql_json_executer.ASynchronousSqlJsonExecutor" [color="black", fontcolor="black", label=<{ASynchronousSqlJsonExecutor|<br ALIGN="LEFT"/>|execute(execution_context: SqlJsonExecutionContext, rendered_query: str, log_params: dict[str, Any] \| None): SqlJsonExecutionStatus<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.encrypt.AbstractEncryptedFieldAdapter" [color="black", fontcolor="black", label=<{AbstractEncryptedFieldAdapter|<br ALIGN="LEFT"/>|<I>create</I>(app_config: Optional[dict[str, Any]]): TypeDecorator<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.log.AbstractEventLogger" [color="black", fontcolor="black", label=<{AbstractEventLogger|action : str<br ALIGN="LEFT"/>curated_form_data_params : set<br ALIGN="LEFT"/>curated_payload_params : set<br ALIGN="LEFT"/>log_to_statsd : bool<br ALIGN="LEFT"/>object_ref : str \| None<br ALIGN="LEFT"/>payload_override : dict<br ALIGN="LEFT"/>start : datetime<br ALIGN="LEFT"/>|curate_form_data(payload: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>curate_payload(payload: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/><I>log</I>(user_id: int \| None, action: str, dashboard_id: int \| None, duration_ms: int \| None, slice_id: int \| None, referrer: str \| None, curated_payload: dict[str, Any] \| None, curated_form_data: dict[str, Any] \| None): None<br ALIGN="LEFT"/>log_context(action: str, object_ref: str \| None, log_to_statsd: bool): Iterator[Callable[..., None]]<br ALIGN="LEFT"/>log_this(f: Callable[..., Any]): Callable[..., Any]<br ALIGN="LEFT"/>log_this_with_context(): Callable[..., Any]<br ALIGN="LEFT"/>log_this_with_extra_payload(f: Callable[..., Any]): Callable[..., Any]<br ALIGN="LEFT"/>log_with_context(action: str, duration: timedelta \| None, object_ref: str \| None, log_to_statsd: bool, database: Any \| None): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.chart.fave.AddFavoriteChartCommand" [color="black", fontcolor="black", label=<{AddFavoriteChartCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.fave.AddFavoriteDashboardCommand" [color="black", fontcolor="black", label=<{AddFavoriteDashboardCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.superset_typing.AdhocColumn" [color="black", fontcolor="black", label=<{AdhocColumn|columnType : Optional[Literal['BASE_AXIS', 'SERIES']]<br ALIGN="LEFT"/>hasCustomLabel : Optional[bool]<br ALIGN="LEFT"/>label : str<br ALIGN="LEFT"/>sqlExpression : str<br ALIGN="LEFT"/>timeGrain : Optional[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.core.AdhocFilterClause" [color="black", fontcolor="black", label=<{AdhocFilterClause|clause : str<br ALIGN="LEFT"/>comparator : FilterValues \| None<br ALIGN="LEFT"/>expressionType : str<br ALIGN="LEFT"/>filterOptionName : str \| None<br ALIGN="LEFT"/>isExtra : bool \| None<br ALIGN="LEFT"/>operator : str<br ALIGN="LEFT"/>sqlExpression : str \| None<br ALIGN="LEFT"/>subject : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.superset_typing.AdhocMetric" [color="black", fontcolor="black", label=<{AdhocMetric|aggregate : str<br ALIGN="LEFT"/>column : Optional[AdhocMetricColumn]<br ALIGN="LEFT"/>expressionType : Literal['SIMPLE', 'SQL']<br ALIGN="LEFT"/>hasCustomLabel : Optional[bool]<br ALIGN="LEFT"/>label : Optional[str]<br ALIGN="LEFT"/>sqlExpression : Optional[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.superset_typing.AdhocMetricColumn" [color="black", fontcolor="black", label=<{AdhocMetricColumn|column_name : Optional[str]<br ALIGN="LEFT"/>description : Optional[str]<br ALIGN="LEFT"/>expression : Optional[str]<br ALIGN="LEFT"/>filterable : bool<br ALIGN="LEFT"/>groupby : bool<br ALIGN="LEFT"/>id : int<br ALIGN="LEFT"/>is_dttm : bool<br ALIGN="LEFT"/>python_date_format : Optional[str]<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>type_generic : str<br ALIGN="LEFT"/>verbose_name : Optional[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.core.AdhocMetricExpressionType" [color="black", fontcolor="black", label=<{AdhocMetricExpressionType|SIMPLE : str<br ALIGN="LEFT"/>SQL : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.advanced_data_type.types.AdvancedDataType" [color="black", fontcolor="black", label=<{AdvancedDataType|description : str<br ALIGN="LEFT"/>translate_filter : Callable[[Column, FilterOperator, Any], BinaryExpression]<br ALIGN="LEFT"/>translate_type : Callable[[AdvancedDataTypeRequest], AdvancedDataTypeResponse]<br ALIGN="LEFT"/>valid_data_types : list[str]<br ALIGN="LEFT"/>verbose_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.advanced_data_type.types.AdvancedDataTypeRequest" [color="black", fontcolor="black", label=<{AdvancedDataTypeRequest|advanced_data_type : str<br ALIGN="LEFT"/>values : list[Union[FilterValues, None]]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.advanced_data_type.types.AdvancedDataTypeResponse" [color="black", fontcolor="black", label=<{AdvancedDataTypeResponse|display_value : str<br ALIGN="LEFT"/>error_message : Optional[str]<br ALIGN="LEFT"/>valid_filter_operators : list[FilterStringOperators]<br ALIGN="LEFT"/>values : list[Any]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.AdvancedDataTypeResponseError" [color="black", fontcolor="red", label=<{AdvancedDataTypeResponseError|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.advanced_data_type.api.AdvancedDataTypeRestApi" [color="black", fontcolor="black", label=<{AdvancedDataTypeRestApi|allow_browser_login : bool<br ALIGN="LEFT"/>apispec_parameter_schemas : dict<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>openapi_spec_component_schemas : tuple<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>|get(): Response<br ALIGN="LEFT"/>get_types(): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.advanced_data_type.schemas.AdvancedDataTypeSchema" [color="black", fontcolor="black", label=<{AdvancedDataTypeSchema|display_value : String<br ALIGN="LEFT"/>error_message : String<br ALIGN="LEFT"/>valid_filter_operators : List<br ALIGN="LEFT"/>values : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.doris.AggState" [color="black", fontcolor="black", label=<{AggState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2020-10-05_18-10_af30ca79208f_collapse_alerting_models_into_a_single_.Alert" [color="black", fontcolor="black", label=<{Alert|database_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>sql<br ALIGN="LEFT"/>validator_config<br ALIGN="LEFT"/>validator_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.alert.AlertCommand" [color="black", fontcolor="black", label=<{AlertCommand|<br ALIGN="LEFT"/>|run(): bool<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.AlertQueryError" [color="black", fontcolor="black", label=<{AlertQueryError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.AlertQueryInvalidTypeError" [color="black", fontcolor="black", label=<{AlertQueryInvalidTypeError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.AlertQueryMultipleColumnsError" [color="black", fontcolor="black", label=<{AlertQueryMultipleColumnsError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.AlertQueryMultipleRowsError" [color="black", fontcolor="black", label=<{AlertQueryMultipleRowsError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.AlertQueryTimeout" [color="black", fontcolor="black", label=<{AlertQueryTimeout|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.AlertValidatorConfigError" [color="black", fontcolor="black", label=<{AlertValidatorConfigError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.alerts.AlertView" [color="black", fontcolor="black", label=<{AlertView|class_permission_name : str<br ALIGN="LEFT"/>route_base : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.Annotation" [color="black", fontcolor="black", label=<{Annotation|id<br ALIGN="LEFT"/>json_metadata<br ALIGN="LEFT"/>long_descr<br ALIGN="LEFT"/>short_descr<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.Annotation" [color="black", fontcolor="black", label=<{Annotation|id<br ALIGN="LEFT"/>json_metadata<br ALIGN="LEFT"/>long_descr<br ALIGN="LEFT"/>short_descr<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.Annotation" [color="black", fontcolor="black", label=<{Annotation|id<br ALIGN="LEFT"/>json_metadata<br ALIGN="LEFT"/>long_descr<br ALIGN="LEFT"/>short_descr<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.annotations.Annotation" [color="black", fontcolor="black", label=<{Annotation|data<br ALIGN="LEFT"/>end_dttm<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>json_metadata<br ALIGN="LEFT"/>layer<br ALIGN="LEFT"/>layer_id<br ALIGN="LEFT"/>long_descr<br ALIGN="LEFT"/>short_descr<br ALIGN="LEFT"/>start_dttm<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.annotation_layers.annotations.filters.AnnotationAllTextFilter" [color="black", fontcolor="black", label=<{AnnotationAllTextFilter|arg_name : str<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.annotation_layer.annotation.exceptions.AnnotationCreateFailedError" [color="black", fontcolor="black", label=<{AnnotationCreateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.daos.annotation_layer.AnnotationDAO" [color="black", fontcolor="black", label=<{AnnotationDAO|<br ALIGN="LEFT"/>|validate_update_uniqueness(layer_id: int, short_descr: str, annotation_id: Optional[int]): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.charts.schemas.AnnotationDataSchema" [color="black", fontcolor="black", label=<{AnnotationDataSchema|columns : List<br ALIGN="LEFT"/>records : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.connectors.sqla.models.AnnotationDatasource" [color="black", fontcolor="black", label=<{AnnotationDatasource|cache_timeout : int<br ALIGN="LEFT"/>changed_on : NoneType<br ALIGN="LEFT"/>column_names : list<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|<I>get_query_str</I>(query_obj: QueryObjectDict): str<br ALIGN="LEFT"/>query(query_obj: QueryObjectDict): QueryResult<br ALIGN="LEFT"/><I>values_for_column</I>(column_name: str, limit: int): list[Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.annotation_layer.annotation.exceptions.AnnotationDatesValidationError" [color="black", fontcolor="red", label=<{AnnotationDatesValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.annotation_layer.annotation.exceptions.AnnotationDeleteFailedError" [color="black", fontcolor="black", label=<{AnnotationDeleteFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.annotation_layer.annotation.exceptions.AnnotationInvalidError" [color="black", fontcolor="black", label=<{AnnotationInvalidError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.annotations.AnnotationLayer" [color="black", fontcolor="black", label=<{AnnotationLayer|descr<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.annotation_layers.filters.AnnotationLayerAllTextFilter" [color="black", fontcolor="black", label=<{AnnotationLayerAllTextFilter|arg_name : str<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.annotation_layer.exceptions.AnnotationLayerCreateFailedError" [color="black", fontcolor="black", label=<{AnnotationLayerCreateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.daos.annotation_layer.AnnotationLayerDAO" [color="black", fontcolor="black", label=<{AnnotationLayerDAO|<br ALIGN="LEFT"/>|has_annotations(model_id: Union[int, list[int]]): bool<br ALIGN="LEFT"/>validate_update_uniqueness(name: str, layer_id: Optional[int]): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.annotation_layer.exceptions.AnnotationLayerDeleteFailedError" [color="black", fontcolor="black", label=<{AnnotationLayerDeleteFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.annotation_layer.exceptions.AnnotationLayerDeleteIntegrityError" [color="black", fontcolor="black", label=<{AnnotationLayerDeleteIntegrityError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.annotation_layer.exceptions.AnnotationLayerInvalidError" [color="black", fontcolor="black", label=<{AnnotationLayerInvalidError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.annotation_layer.exceptions.AnnotationLayerNameUniquenessValidationError" [color="black", fontcolor="black", label=<{AnnotationLayerNameUniquenessValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.annotation_layer.exceptions.AnnotationLayerNotFoundError" [color="black", fontcolor="black", label=<{AnnotationLayerNotFoundError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.annotation_layers.schemas.AnnotationLayerPostSchema" [color="black", fontcolor="black", label=<{AnnotationLayerPostSchema|descr : String<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.annotation_layers.schemas.AnnotationLayerPutSchema" [color="black", fontcolor="black", label=<{AnnotationLayerPutSchema|descr : String<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.annotation_layers.api.AnnotationLayerRestApi" [color="black", fontcolor="black", label=<{AnnotationLayerRestApi|add_columns : list<br ALIGN="LEFT"/>add_model_schema<br ALIGN="LEFT"/>allow_browser_login : bool<br ALIGN="LEFT"/>allowed_rel_fields : set<br ALIGN="LEFT"/>apispec_parameter_schemas : dict<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>edit_columns : list<br ALIGN="LEFT"/>edit_model_schema<br ALIGN="LEFT"/>include_route_methods<br ALIGN="LEFT"/>list_columns : list<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>openapi_spec_methods<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>order_columns : list<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>search_filters : dict<br ALIGN="LEFT"/>show_columns : list<br ALIGN="LEFT"/>|bulk_delete(): Response<br ALIGN="LEFT"/>delete(pk: int): Response<br ALIGN="LEFT"/>post(): Response<br ALIGN="LEFT"/>put(pk: int): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.charts.schemas.AnnotationLayerSchema" [color="black", fontcolor="black", label=<{AnnotationLayerSchema|annotationType : String<br ALIGN="LEFT"/>color : String<br ALIGN="LEFT"/>descriptionColumns : List<br ALIGN="LEFT"/>hideLine : Boolean<br ALIGN="LEFT"/>intervalEndColumn : String<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>opacity : String<br ALIGN="LEFT"/>overrides : Dict<br ALIGN="LEFT"/>show : Boolean<br ALIGN="LEFT"/>showLabel : Boolean<br ALIGN="LEFT"/>showMarkers : Boolean<br ALIGN="LEFT"/>sourceType : String<br ALIGN="LEFT"/>style : String<br ALIGN="LEFT"/>timeColumn : String<br ALIGN="LEFT"/>titleColumn : String<br ALIGN="LEFT"/>value : Raw<br ALIGN="LEFT"/>width : Float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.annotation_layer.exceptions.AnnotationLayerUpdateFailedError" [color="black", fontcolor="black", label=<{AnnotationLayerUpdateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.annotations.AnnotationLayerView" [color="black", fontcolor="black", label=<{AnnotationLayerView|class_permission_name : str<br ALIGN="LEFT"/>route_base : str<br ALIGN="LEFT"/>|get(pk: int): FlaskResponse<br ALIGN="LEFT"/>list(): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.annotation_layer.annotation.exceptions.AnnotationNotFoundError" [color="black", fontcolor="black", label=<{AnnotationNotFoundError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.annotation_layers.annotations.schemas.AnnotationPostSchema" [color="black", fontcolor="black", label=<{AnnotationPostSchema|end_dttm : DateTime<br ALIGN="LEFT"/>json_metadata : String<br ALIGN="LEFT"/>long_descr : String<br ALIGN="LEFT"/>short_descr : String<br ALIGN="LEFT"/>start_dttm : DateTime<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.annotation_layers.annotations.schemas.AnnotationPutSchema" [color="black", fontcolor="black", label=<{AnnotationPutSchema|end_dttm : DateTime<br ALIGN="LEFT"/>json_metadata : String<br ALIGN="LEFT"/>long_descr : String<br ALIGN="LEFT"/>short_descr : String<br ALIGN="LEFT"/>start_dttm : DateTime<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.annotation_layers.annotations.api.AnnotationRestApi" [color="black", fontcolor="black", label=<{AnnotationRestApi|add_columns : list<br ALIGN="LEFT"/>add_model_schema<br ALIGN="LEFT"/>allow_browser_login : bool<br ALIGN="LEFT"/>apispec_parameter_schemas : dict<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>edit_columns : list<br ALIGN="LEFT"/>edit_model_schema<br ALIGN="LEFT"/>include_route_methods<br ALIGN="LEFT"/>list_columns : list<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>openapi_spec_methods<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>order_columns : list<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>search_filters : dict<br ALIGN="LEFT"/>show_columns : list<br ALIGN="LEFT"/>|bulk_delete(): Response<br ALIGN="LEFT"/>delete(pk: int, annotation_id: int): Response<br ALIGN="LEFT"/>get(pk: int, annotation_id: int): Response<br ALIGN="LEFT"/>get_list(pk: int): Response<br ALIGN="LEFT"/>post(pk: int): Response<br ALIGN="LEFT"/>put(pk: int, annotation_id: int): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.core.AnnotationType" [color="black", fontcolor="black", label=<{AnnotationType|EVENT : str<br ALIGN="LEFT"/>FORMULA : str<br ALIGN="LEFT"/>INTERVAL : str<br ALIGN="LEFT"/>TIME_SERIES : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.annotation_layer.annotation.exceptions.AnnotationUniquenessValidationError" [color="black", fontcolor="red", label=<{AnnotationUniquenessValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.annotation_layer.annotation.exceptions.AnnotationUpdateFailedError" [color="black", fontcolor="black", label=<{AnnotationUpdateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.api.Api" [color="black", fontcolor="black", label=<{Api|query_context_factory : NoneType<br ALIGN="LEFT"/>|get_query_context_factory(): QueryContextFactory<br ALIGN="LEFT"/>query(): FlaskResponse<br ALIGN="LEFT"/>query_form_data(): FlaskResponse<br ALIGN="LEFT"/>time_range(): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.base_api_tests.ApiOwnersTestCaseMixin" [color="black", fontcolor="black", label=<{ApiOwnersTestCaseMixin|resource_name : str<br ALIGN="LEFT"/>|test_get_base_filter_related_owners()<br ALIGN="LEFT"/>test_get_base_filter_related_owners_on_sm(mock_get_exclude_users_from_list)<br ALIGN="LEFT"/>test_get_filter_related_owners()<br ALIGN="LEFT"/>test_get_ids_related_owners()<br ALIGN="LEFT"/>test_get_ids_related_owners_paginated()<br ALIGN="LEFT"/>test_get_related_fail()<br ALIGN="LEFT"/>test_get_related_owners()<br ALIGN="LEFT"/>test_get_related_owners_paginated()<br ALIGN="LEFT"/>test_get_related_owners_with_extra_filters()<br ALIGN="LEFT"/>test_get_repeated_ids_related_owners()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.initialization.SupersetAppInitializer.configure_celery.AppContextTask" [color="black", fontcolor="black", label=<{AppContextTask|abstract : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.sql_types.presto_sql_types.Array" [color="black", fontcolor="black", label=<{Array|python_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.ascend.AscendEngineSpec" [color="black", fontcolor="black", label=<{AscendEngineSpec|engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.async_events.api.AsyncEventsRestApi" [color="black", fontcolor="black", label=<{AsyncEventsRestApi|allow_browser_login : bool<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>|events(): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.report.execute.AsyncExecuteReportScheduleCommand" [color="black", fontcolor="black", label=<{AsyncExecuteReportScheduleCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.report.log_prune.AsyncPruneReportScheduleLogCommand" [color="black", fontcolor="black", label=<{AsyncPruneReportScheduleLogCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.async_events.async_query_manager.AsyncQueryJobException" [color="black", fontcolor="red", label=<{AsyncQueryJobException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.async_events.async_query_manager.AsyncQueryManager" [color="black", fontcolor="black", label=<{AsyncQueryManager|MAX_EVENT_COUNT : int<br ALIGN="LEFT"/>STATUS_DONE : str<br ALIGN="LEFT"/>STATUS_ERROR : str<br ALIGN="LEFT"/>STATUS_PENDING : str<br ALIGN="LEFT"/>STATUS_RUNNING : str<br ALIGN="LEFT"/>|init_app(app: Flask): None<br ALIGN="LEFT"/>init_job(channel_id: str, user_id: Optional[int]): dict[str, Any]<br ALIGN="LEFT"/>parse_channel_id_from_request(req: Request): str<br ALIGN="LEFT"/>read_events(channel: str, last_id: Optional[str]): list[Optional[dict[str, Any]]]<br ALIGN="LEFT"/>register_request_handlers(app: Flask): None<br ALIGN="LEFT"/>submit_chart_data_job(channel_id: str, form_data: dict[str, Any], user_id: Optional[int]): dict[str, Any]<br ALIGN="LEFT"/>submit_explore_json_job(channel_id: str, form_data: dict[str, Any], response_type: str, force: Optional[bool], user_id: Optional[int]): dict[str, Any]<br ALIGN="LEFT"/>update_job(job_metadata: dict[str, Any], status: str): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.async_events.async_query_manager_factory.AsyncQueryManagerFactory" [color="black", fontcolor="black", label=<{AsyncQueryManagerFactory|<br ALIGN="LEFT"/>|init_app(app: Flask): None<br ALIGN="LEFT"/>instance(): AsyncQueryManager<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.async_events.async_query_manager.AsyncQueryTokenException" [color="black", fontcolor="red", label=<{AsyncQueryTokenException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.athena.AthenaEngineSpec" [color="black", fontcolor="black", label=<{AthenaEngineSpec|allows_escaped_colons : bool<br ALIGN="LEFT"/>custom_errors : dict[Pattern[str], tuple[str, SupersetErrorType, dict[str, Any]]]<br ALIGN="LEFT"/>disable_ssh_tunneling : bool<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>|convert_dttm(target_type: str, dttm: datetime, db_extra: Optional[dict[str, Any]]): Optional[str]<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2016-06-27_08-43_27ae655e4247_make_creator_owners.AuditMixin" [color="black", fontcolor="black", label=<{AuditMixin|created_by<br ALIGN="LEFT"/>created_by_fk<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-26_11-10_c82ee8a39623_add_implicit_tags.AuditMixinNullable" [color="black", fontcolor="black", label=<{AuditMixinNullable|changed_by_fk<br ALIGN="LEFT"/>changed_on<br ALIGN="LEFT"/>created_by_fk<br ALIGN="LEFT"/>created_on<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.helpers.AuditMixinNullable" [color="black", fontcolor="black", label=<{AuditMixinNullable|changed_by_<br ALIGN="LEFT"/>changed_by_fk<br ALIGN="LEFT"/>changed_by_name<br ALIGN="LEFT"/>changed_on<br ALIGN="LEFT"/>changed_on_humanized<br ALIGN="LEFT"/>created_by_fk<br ALIGN="LEFT"/>created_by_name<br ALIGN="LEFT"/>created_on<br ALIGN="LEFT"/>created_on_humanized<br ALIGN="LEFT"/>|changed_on_(): Markup<br ALIGN="LEFT"/>changed_on_delta_humanized(): str<br ALIGN="LEFT"/>changed_on_dttm(): float<br ALIGN="LEFT"/>changed_on_utc(): str<br ALIGN="LEFT"/>created_on_delta_humanized(): str<br ALIGN="LEFT"/>creator(): Union[Markup, str]<br ALIGN="LEFT"/>modified(): Markup<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.aurora.AuroraMySQLDataAPI" [color="black", fontcolor="black", label=<{AuroraMySQLDataAPI|default_driver : str<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.aurora.AuroraPostgresDataAPI" [color="black", fontcolor="black", label=<{AuroraPostgresDataAPI|default_driver : str<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.AuxiliaryColumnsMixin" [color="black", fontcolor="black", label=<{AuxiliaryColumnsMixin|changed_by_fk<br ALIGN="LEFT"/>changed_on<br ALIGN="LEFT"/>created_by_fk<br ALIGN="LEFT"/>created_on<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.available_domains.api.AvailableDomainsRestApi" [color="black", fontcolor="black", label=<{AvailableDomainsRestApi|allow_browser_login : bool<br ALIGN="LEFT"/>available_domains_schema<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>openapi_spec_component_schemas : tuple<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>|get(): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.available_domains.schemas.AvailableDomainsSchema" [color="black", fontcolor="black", label=<{AvailableDomainsSchema|domains : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.mssql.AzureSynapseSpec" [color="black", fontcolor="black", label=<{AzureSynapseSpec|default_driver : str<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.doris.BITMAP" [color="black", fontcolor="black", label=<{BITMAP|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.starrocks.BITMAP" [color="black", fontcolor="black", label=<{BITMAP|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.alerts.BaseAlertReportView" [color="black", fontcolor="black", label=<{BaseAlertReportView|class_permission_name : str<br ALIGN="LEFT"/>route_base : str<br ALIGN="LEFT"/>|list(): FlaskResponse<br ALIGN="LEFT"/>log(pk: int): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.BaseColumnMixin" [color="black", fontcolor="black", label=<{BaseColumnMixin|column_name<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>verbose_name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-20_15-31_7f2635b51f5d_update_base_columns.BaseColumnMixin" [color="black", fontcolor="black", label=<{BaseColumnMixin|id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.BaseColumnMixin" [color="black", fontcolor="black", label=<{BaseColumnMixin|column_name<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>verbose_name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.BaseColumnMixin" [color="black", fontcolor="black", label=<{BaseColumnMixin|column_name<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>verbose_name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.base.BaseCommand" [color="black", fontcolor="black", label=<{BaseCommand|<br ALIGN="LEFT"/>|<I>run</I>(): Any<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.daos.base.BaseDAO" [color="black", fontcolor="black", label=<{BaseDAO|base_filter : BaseFilter \| None<br ALIGN="LEFT"/>id_column_name : str<br ALIGN="LEFT"/>model_cls : type[Model] \| None<br ALIGN="LEFT"/>|create(item: T \| None, attributes: dict[str, Any] \| None): T<br ALIGN="LEFT"/>delete(items: list[T]): None<br ALIGN="LEFT"/>find_all(): list[T]<br ALIGN="LEFT"/>find_by_id(model_id: str \| int, skip_base_filter: bool): T \| None<br ALIGN="LEFT"/>find_by_ids(model_ids: list[str] \| list[int], skip_base_filter: bool): list[T]<br ALIGN="LEFT"/>find_one_or_none(): T \| None<br ALIGN="LEFT"/>update(item: T \| None, attributes: dict[str, Any] \| None): T<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.permalink.base.BaseDashboardPermalinkCommand" [color="black", fontcolor="black", label=<{BaseDashboardPermalinkCommand|codec<br ALIGN="LEFT"/>resource<br ALIGN="LEFT"/>salt<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.BaseDashboardSchema" [color="black", fontcolor="black", label=<{BaseDashboardSchema|<br ALIGN="LEFT"/>|post_load(data: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.database.uploaders.base.BaseDataReader" [color="black", fontcolor="black", label=<{BaseDataReader|<br ALIGN="LEFT"/>|<I>file_metadata</I>(file: FileStorage): FileMetadata<br ALIGN="LEFT"/><I>file_to_dataframe</I>(file: FileStorage): pd.DataFrame<br ALIGN="LEFT"/>read(file: FileStorage, database: Database, table_name: str, schema_name: Optional[str]): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.connectors.sqla.models.BaseDatasource" [color="black", fontcolor="black", label=<{BaseDatasource|baselink : str \| None<br ALIGN="LEFT"/>cache_timeout<br ALIGN="LEFT"/>catalog<br ALIGN="LEFT"/>catalog_perm<br ALIGN="LEFT"/>column_formats<br ALIGN="LEFT"/>column_names<br ALIGN="LEFT"/>columns : list[TableColumn]<br ALIGN="LEFT"/>columns_types<br ALIGN="LEFT"/>connection<br ALIGN="LEFT"/>currency_formats<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>datasource_name<br ALIGN="LEFT"/>default_endpoint<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>dttm_cols<br ALIGN="LEFT"/>explore_url<br ALIGN="LEFT"/>external_url<br ALIGN="LEFT"/>extra_import_fields : list<br ALIGN="LEFT"/>filter_select_enabled<br ALIGN="LEFT"/>filterable_column_names<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>is_featured<br ALIGN="LEFT"/>is_managed_externally<br ALIGN="LEFT"/>is_rls_supported : bool<br ALIGN="LEFT"/>is_virtual<br ALIGN="LEFT"/>kind<br ALIGN="LEFT"/>main_dttm_col<br ALIGN="LEFT"/>metrics : list[SqlMetric]<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>offset<br ALIGN="LEFT"/>order_by_choices<br ALIGN="LEFT"/>owner_class : User \| None<br ALIGN="LEFT"/>owners : list[User]<br ALIGN="LEFT"/>owners_data<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>perm<br ALIGN="LEFT"/>query_language : str \| None<br ALIGN="LEFT"/>schema<br ALIGN="LEFT"/>schema_perm<br ALIGN="LEFT"/>select_star<br ALIGN="LEFT"/>short_data<br ALIGN="LEFT"/>slices<br ALIGN="LEFT"/>sql : str \| None<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>uid<br ALIGN="LEFT"/>update_from_object_fields : list[str]<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>verbose_map<br ALIGN="LEFT"/>|add_missing_metrics(metrics: list[SqlMetric]): None<br ALIGN="LEFT"/>data_for_slices(slices: list[Slice]): dict[str, Any]<br ALIGN="LEFT"/>default_query(qry: Query): Query<br ALIGN="LEFT"/><I>external_metadata</I>(): list[ResultSetColumnType]<br ALIGN="LEFT"/>filter_values_handler(values: FilterValues \| None, operator: str, target_generic_type: utils.GenericDataType, target_native_type: str \| None, is_list_target: bool, db_engine_spec: builtins.type[BaseEngineSpec] \| None, db_extra: dict[str, Any] \| None): FilterValues \| None<br ALIGN="LEFT"/>get_column(column_name: str \| None): TableColumn \| None<br ALIGN="LEFT"/><I>get_datasource_by_name</I>(datasource_name: str, catalog: str \| None, schema: str, database_name: str): BaseDatasource \| None<br ALIGN="LEFT"/>get_extra_cache_keys(query_obj: QueryObjectDict): list[Hashable]<br ALIGN="LEFT"/>get_fk_many_from_list(object_list: list[Any], fkmany: list[Column], fkmany_class: builtins.type[TableColumn \| SqlMetric], key_attr: str): list[Column]<br ALIGN="LEFT"/><I>get_query_str</I>(query_obj: QueryObjectDict): str<br ALIGN="LEFT"/>get_sqla_row_level_filters(template_processor: Optional[BaseTemplateProcessor]): list[TextClause]<br ALIGN="LEFT"/><I>get_template_processor</I>(): BaseTemplateProcessor<br ALIGN="LEFT"/><I>query</I>(query_obj: QueryObjectDict): QueryResult<br ALIGN="LEFT"/>raise_for_access(): None<br ALIGN="LEFT"/><I>text</I>(clause: str): TextClause<br ALIGN="LEFT"/>update_from_object(obj: dict[str, Any]): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.BaseDatasourceMixin" [color="black", fontcolor="black", label=<{BaseDatasourceMixin|description<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.BaseDatasourceMixin" [color="black", fontcolor="black", label=<{BaseDatasourceMixin|description<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.BaseDatasourceMixin" [color="black", fontcolor="black", label=<{BaseDatasourceMixin|description<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.viz.BaseDeckGLViz" [color="black", fontcolor="black", label=<{BaseDeckGLViz|credits : str<br ALIGN="LEFT"/>is_timeseries : bool<br ALIGN="LEFT"/>metric<br ALIGN="LEFT"/>spatial_control_keys : list[str]<br ALIGN="LEFT"/>|add_null_filters(): None<br ALIGN="LEFT"/>get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>get_js_columns(data: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>get_metrics(): list[str]<br ALIGN="LEFT"/><I>get_properties</I>(data: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>get_spatial_columns(key: str): list[str]<br ALIGN="LEFT"/>parse_coordinates(latlong: Any): tuple[float, float] \| None<br ALIGN="LEFT"/>process_spatial_data_obj(key: str, df: pd.DataFrame): pd.DataFrame<br ALIGN="LEFT"/>process_spatial_query_obj(key: str, group_by: list[str]): None<br ALIGN="LEFT"/>query_obj(): QueryObjectDict<br ALIGN="LEFT"/>reverse_geohash_decode(geohash_code: str): tuple[str, str]<br ALIGN="LEFT"/>reverse_latlong(df: pd.DataFrame, key: str): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.distributed_lock.base.BaseDistributedLockCommand" [color="black", fontcolor="black", label=<{BaseDistributedLockCommand|codec<br ALIGN="LEFT"/>key : UUID<br ALIGN="LEFT"/>resource<br ALIGN="LEFT"/>|<I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.base.BaseEngineSpec" [color="black", fontcolor="black", label=<{BaseEngineSpec|allow_limit_clause : bool<br ALIGN="LEFT"/>allows_alias_in_orderby : bool<br ALIGN="LEFT"/>allows_alias_in_select : bool<br ALIGN="LEFT"/>allows_alias_to_source_column : bool<br ALIGN="LEFT"/>allows_cte_in_subquery : bool<br ALIGN="LEFT"/>allows_escaped_colons : bool<br ALIGN="LEFT"/>allows_hidden_cc_in_orderby : bool<br ALIGN="LEFT"/>allows_hidden_orderby_agg : bool<br ALIGN="LEFT"/>allows_joins : bool<br ALIGN="LEFT"/>allows_sql_comments : bool<br ALIGN="LEFT"/>allows_subqueries : bool<br ALIGN="LEFT"/>arraysize : int<br ALIGN="LEFT"/>column_type_mappings : tuple[ColumnTypeMapping, ...]<br ALIGN="LEFT"/>column_type_mutators : dict[TypeEngine, Callable[[Any], Any]]<br ALIGN="LEFT"/>cte_alias : str<br ALIGN="LEFT"/>custom_errors : dict[Pattern[str], tuple[str, SupersetErrorType, dict[str, Any]]]<br ALIGN="LEFT"/>default_driver : str \| None<br ALIGN="LEFT"/>disable_ssh_tunneling : bool<br ALIGN="LEFT"/>disallow_uri_query_params : dict[str, set[str]]<br ALIGN="LEFT"/>drivers : dict[str, str]<br ALIGN="LEFT"/>encrypted_extra_sensitive_fields : set[str]<br ALIGN="LEFT"/>enforce_uri_query_params : dict[str, dict[str, Any]]<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_aliases : set[str]<br ALIGN="LEFT"/>engine_name : str \| None<br ALIGN="LEFT"/>force_column_alias_quotes : bool<br ALIGN="LEFT"/>has_query_id_before_execute : bool<br ALIGN="LEFT"/>limit_method : str<br ALIGN="LEFT"/>max_column_name_length : int \| None<br ALIGN="LEFT"/>oauth2_authorization_request_uri : str \| None<br ALIGN="LEFT"/>oauth2_exception<br ALIGN="LEFT"/>oauth2_scope : str<br ALIGN="LEFT"/>oauth2_token_request_type : str<br ALIGN="LEFT"/>oauth2_token_request_uri : str \| None<br ALIGN="LEFT"/>run_multiple_statements_as_one : bool<br ALIGN="LEFT"/>select_keywords : set[str]<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>supports_catalog : bool<br ALIGN="LEFT"/>supports_dynamic_catalog : bool<br ALIGN="LEFT"/>supports_dynamic_schema : bool<br ALIGN="LEFT"/>supports_file_upload : bool<br ALIGN="LEFT"/>supports_multivalues_insert : bool<br ALIGN="LEFT"/>supports_oauth2 : bool<br ALIGN="LEFT"/>time_groupby_inline : bool<br ALIGN="LEFT"/>top_keywords : set[str]<br ALIGN="LEFT"/>try_remove_schema_from_table_name : bool<br ALIGN="LEFT"/>|adjust_engine_params(uri: URL, connect_args: dict[str, Any], catalog: str \| None, schema: str \| None): tuple[URL, dict[str, Any]]<br ALIGN="LEFT"/><I>alter_new_orm_column</I>(orm_col: TableColumn): None<br ALIGN="LEFT"/>apply_limit_to_sql(sql: str, limit: int, database: Database, force: bool): str<br ALIGN="LEFT"/>apply_top_to_sql(sql: str, limit: int): str<br ALIGN="LEFT"/>cancel_query(cursor: Any, query: Query, cancel_query_id: str): bool<br ALIGN="LEFT"/>column_datatype_to_string(sqla_column_type: TypeEngine, dialect: Dialect): str<br ALIGN="LEFT"/>convert_dttm(target_type: str, dttm: datetime, db_extra: dict[str, Any] \| None): str \| None<br ALIGN="LEFT"/>denormalize_name(dialect: Dialect, name: str): str<br ALIGN="LEFT"/>df_to_sql(database: Database, table: Table, df: pd.DataFrame, to_sql_kwargs: dict[str, Any]): None<br ALIGN="LEFT"/>epoch_ms_to_dttm(): str<br ALIGN="LEFT"/><I>epoch_to_dttm</I>(): str<br ALIGN="LEFT"/>estimate_query_cost(database: Database, catalog: str \| None, schema: str, sql: str, source: utils.QuerySource \| None): list[dict[str, Any]]<br ALIGN="LEFT"/>estimate_statement_cost(database: Database, statement: str, cursor: Any): dict[str, Any]<br ALIGN="LEFT"/>execute(cursor: Any, query: str, database: Database): None<br ALIGN="LEFT"/>execute_with_cursor(cursor: Any, sql: str, query: Query): None<br ALIGN="LEFT"/>expand_data(columns: list[ResultSetColumnType], data: list[dict[Any, Any]]): tuple[list[ResultSetColumnType], list[dict[Any, Any]], list[ResultSetColumnType]]<br ALIGN="LEFT"/>extract_error_message(ex: Exception): str<br ALIGN="LEFT"/>extract_errors(ex: Exception, context: dict[str, Any] \| None): list[SupersetError]<br ALIGN="LEFT"/>fetch_data(cursor: Any, limit: int \| None): list[tuple[Any, ...]]<br ALIGN="LEFT"/>get_allow_cost_estimate(extra: dict[str, Any]): bool<br ALIGN="LEFT"/>get_allows_alias_in_select(database: Database): bool<br ALIGN="LEFT"/>get_cancel_query_id(cursor: Any, query: Query): str \| None<br ALIGN="LEFT"/>get_catalog_names(database: Database, inspector: Inspector): set[str]<br ALIGN="LEFT"/>get_column_spec(native_type: str \| None, db_extra: dict[str, Any] \| None, source: utils.ColumnTypeSource): ColumnSpec \| None<br ALIGN="LEFT"/>get_column_types(column_type: str \| None): tuple[TypeEngine, GenericDataType] \| None<br ALIGN="LEFT"/>get_columns(inspector: Inspector, table: Table, options: dict[str, Any] \| None): list[ResultSetColumnType]<br ALIGN="LEFT"/>get_cte_query(sql: str): str \| None<br ALIGN="LEFT"/>get_datatype(type_code: Any): str \| None<br ALIGN="LEFT"/>get_dbapi_exception_mapping(): dict[type[Exception], type[Exception]]<br ALIGN="LEFT"/>get_dbapi_mapped_exception(exception: Exception): Exception<br ALIGN="LEFT"/>get_default_catalog(database: Database): str \| None<br ALIGN="LEFT"/>get_default_schema(database: Database, catalog: str \| None): str \| None<br ALIGN="LEFT"/>get_default_schema_for_query(database: Database, query: Query): str \| None<br ALIGN="LEFT"/>get_engine(database: Database, catalog: str \| None, schema: str \| None, source: utils.QuerySource \| None): ContextManager[Engine]<br ALIGN="LEFT"/>get_extra_params(database: Database): dict[str, Any]<br ALIGN="LEFT"/>get_extra_table_metadata(database: Database, table: Table): dict[str, Any]<br ALIGN="LEFT"/>get_function_names(database: Database): list[str]<br ALIGN="LEFT"/>get_impersonation_key(user: User \| None): Any<br ALIGN="LEFT"/>get_indexes(database: Database, inspector: Inspector, table: Table): list[dict[str, Any]]<br ALIGN="LEFT"/>get_limit_from_sql(sql: str): int \| None<br ALIGN="LEFT"/>get_metrics(database: Database, inspector: Inspector, table: Table): list[MetricType]<br ALIGN="LEFT"/>get_oauth2_authorization_uri(config: OAuth2ClientConfig, state: OAuth2State): str<br ALIGN="LEFT"/>get_oauth2_config(): OAuth2ClientConfig \| None<br ALIGN="LEFT"/>get_oauth2_fresh_token(config: OAuth2ClientConfig, refresh_token: str): OAuth2TokenResponse<br ALIGN="LEFT"/>get_oauth2_token(config: OAuth2ClientConfig, code: str): OAuth2TokenResponse<br ALIGN="LEFT"/>get_prequeries(database: Database, catalog: str \| None, schema: str \| None): list[str]<br ALIGN="LEFT"/>get_public_information(): dict[str, Any]<br ALIGN="LEFT"/>get_schema_from_engine_params(sqlalchemy_uri: URL, connect_args: dict[str, Any]): str \| None<br ALIGN="LEFT"/>get_schema_names(inspector: Inspector): set[str]<br ALIGN="LEFT"/>get_sqla_column_type(native_type: str \| None, db_extra: dict[str, Any] \| None, source: utils.ColumnTypeSource): TypeEngine \| None<br ALIGN="LEFT"/>get_table_comment(inspector: Inspector, table: Table): str \| None<br ALIGN="LEFT"/>get_table_metadata(database: Database, table: Table): TableMetadataResponse<br ALIGN="LEFT"/>get_table_names(database: Database, inspector: Inspector, schema: str \| None): set[str]<br ALIGN="LEFT"/>get_text_clause(clause: str): TextClause<br ALIGN="LEFT"/>get_time_grain_expressions(): dict[str \| None, str]<br ALIGN="LEFT"/>get_time_grains(): tuple[TimeGrain, ...]<br ALIGN="LEFT"/>get_timestamp_expr(col: ColumnClause, pdf: str \| None, time_grain: str \| None): TimestampExpression<br ALIGN="LEFT"/>get_url_for_impersonation(url: URL, impersonate_user: bool, username: str \| None, access_token: str \| None): URL<br ALIGN="LEFT"/>get_view_names(database: Database, inspector: Inspector, schema: str \| None): set[str]<br ALIGN="LEFT"/><I>handle_cursor</I>(cursor: Any, query: Query): None<br ALIGN="LEFT"/>has_implicit_cancel(): bool<br ALIGN="LEFT"/>is_oauth2_enabled(): bool<br ALIGN="LEFT"/>is_select_query(parsed_query: ParsedQuery): bool<br ALIGN="LEFT"/>make_label_compatible(label: str): str \| quoted_name<br ALIGN="LEFT"/>mask_encrypted_extra(encrypted_extra: str \| None): str \| None<br ALIGN="LEFT"/>mutate_db_for_connection_test(database: Database): None<br ALIGN="LEFT"/>needs_oauth2(ex: Exception): bool<br ALIGN="LEFT"/>normalize_indexes(indexes: list[dict[str, Any]]): list[dict[str, Any]]<br ALIGN="LEFT"/>parse_error_exception(exception: Exception): Exception<br ALIGN="LEFT"/>parse_sql(sql: str): list[str]<br ALIGN="LEFT"/><I>patch</I>(): None<br ALIGN="LEFT"/>prepare_cancel_query(query: Query): None<br ALIGN="LEFT"/>process_statement(statement: BaseSQLStatement[Any], database: Database): str<br ALIGN="LEFT"/>pyodbc_rows_to_tuples(data: list[Any]): list[tuple[Any, ...]]<br ALIGN="LEFT"/>query_cost_formatter(raw_cost: list[dict[str, Any]]): list[dict[str, str]]<br ALIGN="LEFT"/>quote_table(table: Table, dialect: Dialect): str<br ALIGN="LEFT"/>select_star(database: Database, table: Table, engine: Engine, limit: int, show_cols: bool, indent: bool, latest_partition: bool, cols: list[ResultSetColumnType] \| None): str<br ALIGN="LEFT"/>set_or_update_query_limit(sql: str, limit: int): str<br ALIGN="LEFT"/>start_oauth2_dance(database: Database): None<br ALIGN="LEFT"/>supports_backend(backend: str, driver: str \| None): bool<br ALIGN="LEFT"/>supports_url(url: URL): bool<br ALIGN="LEFT"/>top_not_in_sql(sql: str): bool<br ALIGN="LEFT"/>unmask_encrypted_extra(old: str \| None, new: str \| None): str \| None<br ALIGN="LEFT"/><I>update_impersonation_config</I>(database: Database, connect_args: dict[str, Any], uri: str, username: str \| None, access_token: str \| None): None<br ALIGN="LEFT"/>update_params_from_encrypted_extra(database: Database, params: dict[str, Any]): None<br ALIGN="LEFT"/>validate_database_uri(sqlalchemy_uri: URL): None<br ALIGN="LEFT"/>where_latest_partition(database: Database, table: Table, query: Select, columns: list[ResultSetColumnType] \| None): Select \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.explore.permalink.base.BaseExplorePermalinkCommand" [color="black", fontcolor="black", label=<{BaseExplorePermalinkCommand|codec<br ALIGN="LEFT"/>resource<br ALIGN="LEFT"/>salt<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.base_api.BaseFavoriteFilter" [color="black", fontcolor="black", label=<{BaseFavoriteFilter|arg_name : str<br ALIGN="LEFT"/>class_name : str<br ALIGN="LEFT"/>model : type[Dashboard \| Slice \| SqllabQuery]<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.views.filters.BaseFilterRelatedRoles" [color="black", fontcolor="black", label=<{BaseFilterRelatedRoles|arg_name : str<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: Optional[Any]): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.views.filters.BaseFilterRelatedUsers" [color="black", fontcolor="black", label=<{BaseFilterRelatedUsers|arg_name : str<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: Optional[Any]): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.BaseMetricMixin" [color="black", fontcolor="black", label=<{BaseMetricMixin|d3format<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>metric_name<br ALIGN="LEFT"/>metric_type<br ALIGN="LEFT"/>verbose_name<br ALIGN="LEFT"/>warning_text<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-20_15-57_e9df189e5c7e_update_base_metrics.BaseMetricMixin" [color="black", fontcolor="black", label=<{BaseMetricMixin|id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.BaseMetricMixin" [color="black", fontcolor="black", label=<{BaseMetricMixin|d3format<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>metric_name<br ALIGN="LEFT"/>metric_type<br ALIGN="LEFT"/>verbose_name<br ALIGN="LEFT"/>warning_text<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.BaseMetricMixin" [color="black", fontcolor="black", label=<{BaseMetricMixin|d3format<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>metric_name<br ALIGN="LEFT"/>metric_type<br ALIGN="LEFT"/>verbose_name<br ALIGN="LEFT"/>warning_text<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.notifications.base.BaseNotification" [color="black", fontcolor="black", label=<{BaseNotification|plugins : list[type['BaseNotification']]<br ALIGN="LEFT"/>type : Optional[ReportRecipientType]<br ALIGN="LEFT"/>|<I>send</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.report.base.BaseReportScheduleCommand" [color="black", fontcolor="black", label=<{BaseReportScheduleCommand|<br ALIGN="LEFT"/>|<I>run</I>(): Any<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>validate_chart_dashboard(exceptions: list[ValidationError], update: bool): None<br ALIGN="LEFT"/>validate_report_frequency(cron_schedule: str, report_type: str): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.report.execute.BaseReportState" [color="black", fontcolor="black", label=<{BaseReportState|current_states : list[ReportState]<br ALIGN="LEFT"/>initial : bool<br ALIGN="LEFT"/>|create_log(error_message: Optional[str]): None<br ALIGN="LEFT"/>get_dashboard_urls(user_friendly: bool): list[str]<br ALIGN="LEFT"/>is_in_error_grace_period(): bool<br ALIGN="LEFT"/>is_in_grace_period(): bool<br ALIGN="LEFT"/>is_on_working_timeout(): bool<br ALIGN="LEFT"/><I>next</I>(): None<br ALIGN="LEFT"/>send(): None<br ALIGN="LEFT"/>send_error(name: str, message: str): None<br ALIGN="LEFT"/>update_report_schedule(state: ReportState): None<br ALIGN="LEFT"/>update_report_schedule_and_log(state: ReportState, error_message: Optional[str]): None<br ALIGN="LEFT"/>update_report_schedule_slack_v2(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sql.parse.BaseSQLStatement" [color="black", fontcolor="black", label=<{BaseSQLStatement|engine : str<br ALIGN="LEFT"/>tables<br ALIGN="LEFT"/>|<I>format</I>(comments: bool): str<br ALIGN="LEFT"/><I>get_settings</I>(): dict[str, str \| bool]<br ALIGN="LEFT"/><I>is_mutating</I>(): bool<br ALIGN="LEFT"/><I>optimize</I>(): BaseSQLStatement[InternalRepresentation]<br ALIGN="LEFT"/><I>split_script</I>(script: str, engine: str): list[TBaseSQLStatement]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sql_validators.base.BaseSQLValidator" [color="black", fontcolor="black", label=<{BaseSQLValidator|name : str<br ALIGN="LEFT"/>|<I>validate</I>(sql: str, catalog: str \| None, schema: str \| None, database: Database): list[SQLValidationAnnotation]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.screenshots.BaseScreenshot" [color="black", fontcolor="black", label=<{BaseScreenshot|digest : str \| None<br ALIGN="LEFT"/>driver_type<br ALIGN="LEFT"/>element : str<br ALIGN="LEFT"/>screenshot : bytes \| None<br ALIGN="LEFT"/>thumb_size<br ALIGN="LEFT"/>thumbnail_type : str<br ALIGN="LEFT"/>url : str<br ALIGN="LEFT"/>window_size<br ALIGN="LEFT"/>|cache_key(window_size: bool \| WindowSize \| None, thumb_size: bool \| WindowSize \| None): str<br ALIGN="LEFT"/>compute_and_cache(user: User, window_size: WindowSize \| None, thumb_size: WindowSize \| None, cache: Cache, force: bool, cache_key: str \| None): bytes \| None<br ALIGN="LEFT"/>driver(window_size: WindowSize \| None): WebDriver<br ALIGN="LEFT"/>get(user: User, cache: Cache, thumb_size: WindowSize \| None): BytesIO \| None<br ALIGN="LEFT"/>get_from_cache(cache: Cache, window_size: WindowSize \| None, thumb_size: WindowSize \| None): BytesIO \| None<br ALIGN="LEFT"/>get_from_cache_key(cache: Cache, cache_key: str): BytesIO \| None<br ALIGN="LEFT"/>get_screenshot(user: User, window_size: WindowSize \| None): bytes \| None<br ALIGN="LEFT"/>resize_image(img_bytes: bytes, output: str, thumb_size: WindowSize \| None, crop: bool): bytes<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.sql_lab.permalink.base.BaseSqlLabPermalinkCommand" [color="black", fontcolor="black", label=<{BaseSqlLabPermalinkCommand|codec<br ALIGN="LEFT"/>resource<br ALIGN="LEFT"/>salt<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.stats_logger.BaseStatsLogger" [color="black", fontcolor="black", label=<{BaseStatsLogger|prefix : str<br ALIGN="LEFT"/>|<I>decr</I>(key: str): None<br ALIGN="LEFT"/><I>gauge</I>(key: str, value: float): None<br ALIGN="LEFT"/><I>incr</I>(key: str): None<br ALIGN="LEFT"/>key(key: str): str<br ALIGN="LEFT"/><I>timing</I>(key: str, value: float): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.extensions.stats_logger.BaseStatsLoggerManager" [color="black", fontcolor="black", label=<{BaseStatsLoggerManager|instance<br ALIGN="LEFT"/>|init_app(app: Flask): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.views.base_api.BaseSupersetApi" [color="black", fontcolor="black", label=<{BaseSupersetApi|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.base_api.BaseSupersetApiMixin" [color="black", fontcolor="black", label=<{BaseSupersetApiMixin|csrf_exempt : bool<br ALIGN="LEFT"/>responses : dict<br ALIGN="LEFT"/>|incr_stats(action: str, func_name: str): None<br ALIGN="LEFT"/>send_stats_metrics(response: Response, key: str, time_delta: float \| None): None<br ALIGN="LEFT"/>timing_stats(action: str, func_name: str, value: float): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.views.base_api.BaseSupersetModelRestApi" [color="black", fontcolor="black", label=<{BaseSupersetModelRestApi|add_columns : list[str]<br ALIGN="LEFT"/>allowed_distinct_fields : set[str]<br ALIGN="LEFT"/>allowed_rel_fields : set[str]<br ALIGN="LEFT"/>apispec_parameter_schemas : dict<br ALIGN="LEFT"/>base_related_field_filters : dict[str, BaseFilter]<br ALIGN="LEFT"/>edit_columns : list[str]<br ALIGN="LEFT"/>extra_fields_rel_fields : dict[str, list[str]]<br ALIGN="LEFT"/>list_columns : list[str]<br ALIGN="LEFT"/>method_permission_name : dict<br ALIGN="LEFT"/>openapi_spec_component_schemas : tuple[type[Schema], ...]<br ALIGN="LEFT"/>order_rel_fields : dict[str, tuple[str, str]]<br ALIGN="LEFT"/>related_field_filters : dict[str, RelatedFieldFilter \| str]<br ALIGN="LEFT"/>show_columns : list[str]<br ALIGN="LEFT"/>text_field_rel_fields : dict[str, str]<br ALIGN="LEFT"/>|delete_headless(pk: int): Response<br ALIGN="LEFT"/>distinct(column_name: str): FlaskResponse<br ALIGN="LEFT"/>get_headless(pk: int): Response<br ALIGN="LEFT"/>get_list_headless(): Response<br ALIGN="LEFT"/>info_headless(): Response<br ALIGN="LEFT"/>post_headless(): Response<br ALIGN="LEFT"/>put_headless(pk: int): Response<br ALIGN="LEFT"/>related(column_name: str): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.views.base.BaseSupersetView" [color="black", fontcolor="black", label=<{BaseSupersetView|<br ALIGN="LEFT"/>|json_response(obj: Any, status: int): FlaskResponse<br ALIGN="LEFT"/>render_app_template(extra_bootstrap_data: dict[str, Any] \| None): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.tags.filters.BaseTagIdFilter" [color="black", fontcolor="black", label=<{BaseTagIdFilter|arg_name : str<br ALIGN="LEFT"/>class_name : str<br ALIGN="LEFT"/>model : type[Dashboard \| Slice \| SqllabQuery \| SqlaTable]<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.tags.filters.BaseTagNameFilter" [color="black", fontcolor="black", label=<{BaseTagNameFilter|arg_name : str<br ALIGN="LEFT"/>class_name : str<br ALIGN="LEFT"/>model : type[Dashboard \| Slice \| SqllabQuery \| SqlaTable]<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.jinja_context.BaseTemplateProcessor" [color="black", fontcolor="black", label=<{BaseTemplateProcessor|engine : Optional[str]<br ALIGN="LEFT"/>env : Environment<br ALIGN="LEFT"/>|process_template(sql: str): str<br ALIGN="LEFT"/>set_context(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.charts.data.api_tests.BaseTestChartDataApi" [color="black", fontcolor="black", label=<{BaseTestChartDataApi|query_context_payload : dict<br ALIGN="LEFT"/>query_context_payload_template : NoneType<br ALIGN="LEFT"/>|get_expected_row_count(client_id: str): int<br ALIGN="LEFT"/>quote_name(name: str)<br ALIGN="LEFT"/>setUp(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.dashboards.security.base_case.BaseTestDashboardSecurity" [color="black", fontcolor="black", label=<{BaseTestDashboardSecurity|<br ALIGN="LEFT"/>|assert_dashboard_api_response(response: Response, dashboard_to_access: Dashboard): None<br ALIGN="LEFT"/>assert_dashboards_api_response(response: Response, expected_counts: int, expected_dashboards: Optional[list[Dashboard]], not_expected_dashboards: Optional[list[Dashboard]]): None<br ALIGN="LEFT"/>tearDown(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.databases.schemas.BaseUploadFilePostSchema" [color="black", fontcolor="black", label=<{BaseUploadFilePostSchema|<br ALIGN="LEFT"/>|validate_file_extension(file: FileStorage): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.databases.schemas.BaseUploadPostSchema" [color="black", fontcolor="black", label=<{BaseUploadPostSchema|already_exists : String<br ALIGN="LEFT"/>columns_read<br ALIGN="LEFT"/>dataframe_index : Boolean<br ALIGN="LEFT"/>index_label : String<br ALIGN="LEFT"/>schema : String<br ALIGN="LEFT"/>table_name : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.viz.BaseViz" [color="black", fontcolor="black", label=<{BaseViz|all_metrics : list<br ALIGN="LEFT"/>applied_filter_columns : list[Column]<br ALIGN="LEFT"/>applied_filters : list[dict[str, str]]<br ALIGN="LEFT"/>cache_timeout<br ALIGN="LEFT"/>cache_type : str<br ALIGN="LEFT"/>credits : str<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>datasource<br ALIGN="LEFT"/>enforce_numerical_metrics : bool<br ALIGN="LEFT"/>error_msg : str<br ALIGN="LEFT"/>errors : list[dict[str, Any]]<br ALIGN="LEFT"/>force : bool<br ALIGN="LEFT"/>force_cached<br ALIGN="LEFT"/>form_data : dict[str, Any]<br ALIGN="LEFT"/>from_dttm : NoneType, datetime \| None<br ALIGN="LEFT"/>groupby : list[Column]<br ALIGN="LEFT"/>is_timeseries : bool<br ALIGN="LEFT"/>json_data<br ALIGN="LEFT"/>metric_dict : OrderedDict<br ALIGN="LEFT"/>metric_labels : list<br ALIGN="LEFT"/>query : str<br ALIGN="LEFT"/>rejected_filter_columns : list[Column]<br ALIGN="LEFT"/>rejected_filters : list[dict[str, str]]<br ALIGN="LEFT"/>request : LocalProxy<br ALIGN="LEFT"/>results : QueryResult \| None<br ALIGN="LEFT"/>status : str \| None<br ALIGN="LEFT"/>time_shift : timedelta<br ALIGN="LEFT"/>to_dttm : NoneType, datetime \| None<br ALIGN="LEFT"/>token<br ALIGN="LEFT"/>verbose_name : str<br ALIGN="LEFT"/>viz_type : str \| None<br ALIGN="LEFT"/>|apply_rolling(df: pd.DataFrame): pd.DataFrame<br ALIGN="LEFT"/>cache_key(query_obj: QueryObjectDict): str<br ALIGN="LEFT"/>dedup_columns(): list[Column]<br ALIGN="LEFT"/>df_metrics_to_num(df: pd.DataFrame): None<br ALIGN="LEFT"/>get_csv(): str \| None<br ALIGN="LEFT"/>get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>get_df(query_obj: QueryObjectDict \| None): pd.DataFrame<br ALIGN="LEFT"/>get_df_payload(query_obj: QueryObjectDict \| None): dict[str, Any]<br ALIGN="LEFT"/>get_json(): str<br ALIGN="LEFT"/>get_payload(query_obj: QueryObjectDict \| None): VizPayload<br ALIGN="LEFT"/>get_samples(): dict[str, Any]<br ALIGN="LEFT"/>handle_js_int_overflow(data: dict[str, list[dict[str, Any]]]): dict[str, list[dict[str, Any]]]<br ALIGN="LEFT"/>has_error(payload: VizPayload): bool<br ALIGN="LEFT"/>json_dumps(query_obj: Any, sort_keys: bool): str<br ALIGN="LEFT"/>payload_json_and_has_error(payload: VizPayload): tuple[str, bool]<br ALIGN="LEFT"/>process_metrics(): None<br ALIGN="LEFT"/>process_query_filters(): None<br ALIGN="LEFT"/>query_obj(): QueryObjectDict<br ALIGN="LEFT"/>raise_for_access(): None<br ALIGN="LEFT"/><I>run_extra_queries</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.unit_tests.fixtures.bash_mock.BashMock" [color="black", fontcolor="black", label=<{BashMock|<br ALIGN="LEFT"/>|tag_latest_release(tag)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.base.BasicParametersMixin" [color="black", fontcolor="black", label=<{BasicParametersMixin|default_driver : str<br ALIGN="LEFT"/>encryption_parameters : dict[str, str]<br ALIGN="LEFT"/>parameters_schema<br ALIGN="LEFT"/>|build_sqlalchemy_uri(parameters: BasicParametersType, encrypted_extra: dict[str, str] \| None): str<br ALIGN="LEFT"/>get_parameters_from_uri(uri: str, encrypted_extra: dict[str, Any] \| None): BasicParametersType<br ALIGN="LEFT"/>parameters_json_schema(): Any<br ALIGN="LEFT"/>validate_parameters(properties: BasicPropertiesType): list[SupersetError]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.base.BasicParametersSchema" [color="black", fontcolor="black", label=<{BasicParametersSchema|database : String<br ALIGN="LEFT"/>encryption : Boolean<br ALIGN="LEFT"/>host : String<br ALIGN="LEFT"/>password : String<br ALIGN="LEFT"/>port : Integer<br ALIGN="LEFT"/>query : Dict<br ALIGN="LEFT"/>ssh : Boolean<br ALIGN="LEFT"/>username : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.base.BasicParametersType" [color="black", fontcolor="black", label=<{BasicParametersType|database : str<br ALIGN="LEFT"/>encryption : bool<br ALIGN="LEFT"/>host : str<br ALIGN="LEFT"/>password : str \| None<br ALIGN="LEFT"/>port : int<br ALIGN="LEFT"/>query : dict[str, Any]<br ALIGN="LEFT"/>username : str \| None<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.couchbase.BasicParametersType" [color="black", fontcolor="black", label=<{BasicParametersType|database : str<br ALIGN="LEFT"/>encryption : bool<br ALIGN="LEFT"/>host : str<br ALIGN="LEFT"/>password : Optional[str]<br ALIGN="LEFT"/>port : Optional[int]<br ALIGN="LEFT"/>query : dict[str, Any]<br ALIGN="LEFT"/>username : Optional[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.base.BasicPropertiesType" [color="black", fontcolor="black", label=<{BasicPropertiesType|parameters<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.couchbase.BasicPropertiesType" [color="black", fontcolor="black", label=<{BasicPropertiesType|parameters<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.bigquery.BigQueryEngineSpec" [color="black", fontcolor="black", label=<{BigQueryEngineSpec|allows_hidden_cc_in_orderby : bool<br ALIGN="LEFT"/>arraysize : int<br ALIGN="LEFT"/>custom_errors : dict[Pattern[str], tuple[str, SupersetErrorType, dict[str, Any]]]<br ALIGN="LEFT"/>default_driver : str<br ALIGN="LEFT"/>disable_ssh_tunneling : bool<br ALIGN="LEFT"/>encrypted_extra_sensitive_fields : set<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>max_column_name_length : int<br ALIGN="LEFT"/>parameters_schema<br ALIGN="LEFT"/>run_multiple_statements_as_one : bool<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>supports_catalog : bool<br ALIGN="LEFT"/>supports_dynamic_catalog : bool<br ALIGN="LEFT"/>|adjust_engine_params(uri: URL, connect_args: dict[str, Any], catalog: str \| None, schema: str \| None): tuple[URL, dict[str, Any]]<br ALIGN="LEFT"/>build_sqlalchemy_uri(parameters: BigQueryParametersType, encrypted_extra: dict[str, Any] \| None): str<br ALIGN="LEFT"/>convert_dttm(target_type: str, dttm: datetime, db_extra: dict[str, Any] \| None): str \| None<br ALIGN="LEFT"/>custom_estimate_statement_cost(statement: str, client: bigquery.Client): dict[str, Any]<br ALIGN="LEFT"/>df_to_sql(database: Database, table: Table, df: pd.DataFrame, to_sql_kwargs: dict[str, Any]): None<br ALIGN="LEFT"/>epoch_ms_to_dttm(): str<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>estimate_query_cost(database: Database, catalog: str \| None, schema: str, sql: str, source: utils.QuerySource \| None): list[dict[str, Any]]<br ALIGN="LEFT"/>fetch_data(cursor: Any, limit: int \| None): list[tuple[Any, ...]]<br ALIGN="LEFT"/>get_allow_cost_estimate(extra: dict[str, Any]): bool<br ALIGN="LEFT"/>get_catalog_names(database: Database, inspector: Inspector): set[str]<br ALIGN="LEFT"/>get_dbapi_exception_mapping(): dict[type[Exception], type[Exception]]<br ALIGN="LEFT"/>get_default_catalog(database: Database): str \| None<br ALIGN="LEFT"/>get_extra_table_metadata(database: Database, table: Table): dict[str, Any]<br ALIGN="LEFT"/>get_indexes(database: Database, inspector: Inspector, table: Table): list[dict[str, Any]]<br ALIGN="LEFT"/>get_parameters_from_uri(uri: str, encrypted_extra: dict[str, Any] \| None): Any<br ALIGN="LEFT"/>normalize_indexes(indexes: list[dict[str, Any]]): list[dict[str, Any]]<br ALIGN="LEFT"/>parameters_json_schema(): Any<br ALIGN="LEFT"/>parse_error_exception(exception: Exception): Exception<br ALIGN="LEFT"/>query_cost_formatter(raw_cost: list[dict[str, Any]]): list[dict[str, str]]<br ALIGN="LEFT"/>select_star(database: Database, table: Table, engine: Engine, limit: int, show_cols: bool, indent: bool, latest_partition: bool, cols: list[ResultSetColumnType] \| None): str<br ALIGN="LEFT"/>validate_parameters(properties: BasicPropertiesType): list[SupersetError]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.bigquery.BigQueryParametersSchema" [color="black", fontcolor="black", label=<{BigQueryParametersSchema|credentials_info<br ALIGN="LEFT"/>query : Dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.bigquery.BigQueryParametersType" [color="black", fontcolor="black", label=<{BigQueryParametersType|credentials_info : dict[str, Any]<br ALIGN="LEFT"/>query : dict[str, Any]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.example_data.data_generator.birth_names.birth_names_generator.BirthNamesGenerator" [color="black", fontcolor="black", label=<{BirthNamesGenerator|<br ALIGN="LEFT"/>|generate(): Iterable[dict[Any, Any]]<br ALIGN="LEFT"/>generate_row(dt: datetime): dict[Any, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.example_data.data_generator.birth_names.birth_names_generator_factory.BirthNamesGeneratorFactory" [color="black", fontcolor="black", label=<{BirthNamesGeneratorFactory|<br ALIGN="LEFT"/>|make(): BirthNamesGenerator<br ALIGN="LEFT"/>set_instance(factory: BirthNamesGeneratorFactory): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.example_data.data_generator.birth_names.birth_names_generator_factory.BirthNamesGeneratorFactoryImpl" [color="black", fontcolor="black", label=<{BirthNamesGeneratorFactoryImpl|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.example_data.data_loading.data_definitions.birth_names.BirthNamesMetaDataFactory" [color="black", fontcolor="black", label=<{BirthNamesMetaDataFactory|<br ALIGN="LEFT"/>|make(): TableMetaData<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.viz.BubbleViz" [color="black", fontcolor="black", label=<{BubbleViz|entity<br ALIGN="LEFT"/>is_timeseries : bool<br ALIGN="LEFT"/>series<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>x_metric<br ALIGN="LEFT"/>y_metric<br ALIGN="LEFT"/>z_metric<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>query_obj(): QueryObjectDict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.viz.BulletViz" [color="black", fontcolor="black", label=<{BulletViz|is_timeseries : bool<br ALIGN="LEFT"/>metric<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>query_obj(): QueryObjectDict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.databases.schemas.CSVMetadataUploadFilePostSchema" [color="black", fontcolor="black", label=<{CSVMetadataUploadFilePostSchema|delimiter : String<br ALIGN="LEFT"/>file : Raw<br ALIGN="LEFT"/>header_row : Integer<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.uploaders.csv_reader.CSVReader" [color="black", fontcolor="black", label=<{CSVReader|<br ALIGN="LEFT"/>|file_metadata(file: FileStorage): FileMetadata<br ALIGN="LEFT"/>file_to_dataframe(file: FileStorage): pd.DataFrame<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.database.uploaders.csv_reader.CSVReaderOptions" [color="black", fontcolor="black", label=<{CSVReaderOptions|column_data_types : dict[str, str]<br ALIGN="LEFT"/>column_dates : list[str]<br ALIGN="LEFT"/>columns_read : list[str]<br ALIGN="LEFT"/>day_first : bool<br ALIGN="LEFT"/>decimal_character : str<br ALIGN="LEFT"/>delimiter : str<br ALIGN="LEFT"/>header_row : int<br ALIGN="LEFT"/>index_column : str<br ALIGN="LEFT"/>null_values : list[str]<br ALIGN="LEFT"/>rows_to_read : int<br ALIGN="LEFT"/>skip_blank_lines : bool<br ALIGN="LEFT"/>skip_initial_space : bool<br ALIGN="LEFT"/>skip_rows : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.CSVUploadPostSchema" [color="black", fontcolor="black", label=<{CSVUploadPostSchema|column_data_types : String<br ALIGN="LEFT"/>column_dates<br ALIGN="LEFT"/>day_first : Boolean<br ALIGN="LEFT"/>decimal_character : String<br ALIGN="LEFT"/>delimiter : String<br ALIGN="LEFT"/>file : Raw<br ALIGN="LEFT"/>header_row : Integer<br ALIGN="LEFT"/>index_column : String<br ALIGN="LEFT"/>null_values<br ALIGN="LEFT"/>rows_to_read : Integer<br ALIGN="LEFT"/>skip_blank_lines : Boolean<br ALIGN="LEFT"/>skip_initial_space : Boolean<br ALIGN="LEFT"/>skip_rows : Integer<br ALIGN="LEFT"/>|convert_column_data_types(data: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>validate_file_size(file: FileStorage): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.async_events.async_query_manager.CacheBackendNotInitialized" [color="black", fontcolor="red", label=<{CacheBackendNotInitialized|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.cachekeys.schemas.CacheInvalidationRequestSchema" [color="black", fontcolor="black", label=<{CacheInvalidationRequestSchema|datasource_uids : List<br ALIGN="LEFT"/>datasources : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.cache.CacheKey" [color="black", fontcolor="black", label=<{CacheKey|cache_key<br ALIGN="LEFT"/>cache_timeout<br ALIGN="LEFT"/>created_on<br ALIGN="LEFT"/>datasource_uid<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.CacheLoadError" [color="black", fontcolor="red", label=<{CacheLoadError|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.cache_manager.CacheManager" [color="black", fontcolor="black", label=<{CacheManager|cache<br ALIGN="LEFT"/>data_cache<br ALIGN="LEFT"/>explore_form_data_cache<br ALIGN="LEFT"/>filter_state_cache<br ALIGN="LEFT"/>thumbnail_cache<br ALIGN="LEFT"/>|init_app(app: Flask): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.constants.CacheRegion" [color="black", fontcolor="black", label=<{CacheRegion|DATA : str<br ALIGN="LEFT"/>DEFAULT : str<br ALIGN="LEFT"/>THUMBNAIL : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.cachekeys.api.CacheRestApi" [color="black", fontcolor="black", label=<{CacheRestApi|allow_browser_login : bool<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>include_route_methods : set<br ALIGN="LEFT"/>openapi_spec_component_schemas : tuple<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>|invalidate(): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.CacheScreenshotSchema" [color="black", fontcolor="black", label=<{CacheScreenshotSchema|activeTabs : List<br ALIGN="LEFT"/>anchor : String<br ALIGN="LEFT"/>dataMask : Dict<br ALIGN="LEFT"/>urlParams : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tasks.cache.CacheWarmupPayload" [color="black", fontcolor="black", label=<{CacheWarmupPayload|chart_id : int<br ALIGN="LEFT"/>dashboard_id : int \| None<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tasks.cache.CacheWarmupTask" [color="black", fontcolor="black", label=<{CacheWarmupTask|payload<br ALIGN="LEFT"/>username : str \| None<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.common.query_context_processor.CachedTimeOffset" [color="black", fontcolor="black", label=<{CachedTimeOffset|cache_keys : list[str \| None]<br ALIGN="LEFT"/>df : DataFrame<br ALIGN="LEFT"/>queries : list[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.viz.CalHeatmapViz" [color="black", fontcolor="black", label=<{CalHeatmapViz|credits : str<br ALIGN="LEFT"/>is_timeseries : bool<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>query_obj(): QueryObjectDict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.sql_lab.execute.CanAccessQueryValidator" [color="black", fontcolor="black", label=<{CanAccessQueryValidator|<br ALIGN="LEFT"/>|<I>validate</I>(query: Query): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sqllab.validators.CanAccessQueryValidatorImpl" [color="black", fontcolor="black", label=<{CanAccessQueryValidatorImpl|<br ALIGN="LEFT"/>|validate(query: Query): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.databases.schemas.CatalogsResponseSchema" [color="black", fontcolor="black", label=<{CatalogsResponseSchema|result : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.config.CeleryConfig" [color="black", fontcolor="black", label=<{CeleryConfig|beat_schedule : dict<br ALIGN="LEFT"/>broker_url : str<br ALIGN="LEFT"/>imports : tuple<br ALIGN="LEFT"/>result_backend : str<br ALIGN="LEFT"/>task_acks_late : bool<br ALIGN="LEFT"/>task_annotations : dict<br ALIGN="LEFT"/>worker_prefetch_multiplier : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.integration_tests.superset_test_config.CeleryConfig" [color="black", fontcolor="black", label=<{CeleryConfig|broker_url : str<br ALIGN="LEFT"/>concurrency : int<br ALIGN="LEFT"/>imports : tuple<br ALIGN="LEFT"/>result_backend : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.integration_tests.superset_test_config_thumbnails.CeleryConfig" [color="black", fontcolor="black", label=<{CeleryConfig|broker_url : str<br ALIGN="LEFT"/>concurrency : int<br ALIGN="LEFT"/>imports : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.CertificateException" [color="black", fontcolor="red", label=<{CertificateException|message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.helpers.CertificationMixin" [color="black", fontcolor="black", label=<{CertificationMixin|certification_details<br ALIGN="LEFT"/>certified_by<br ALIGN="LEFT"/>extra<br ALIGN="LEFT"/>is_certified<br ALIGN="LEFT"/>warning_markdown<br ALIGN="LEFT"/>|get_extra_dict(): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.chart.exceptions.ChartAccessDeniedError" [color="black", fontcolor="black", label=<{ChartAccessDeniedError|message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.filters.ChartAllTextFilter" [color="black", fontcolor="black", label=<{ChartAllTextFilter|arg_name : str<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartCacheScreenshotResponseSchema" [color="black", fontcolor="black", label=<{ChartCacheScreenshotResponseSchema|cache_key : String<br ALIGN="LEFT"/>chart_url : String<br ALIGN="LEFT"/>image_url : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartCacheWarmUpRequestSchema" [color="black", fontcolor="black", label=<{ChartCacheWarmUpRequestSchema|chart_id : Integer<br ALIGN="LEFT"/>dashboard_id : Integer<br ALIGN="LEFT"/>extra_filters : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartCacheWarmUpResponseSchema" [color="black", fontcolor="black", label=<{ChartCacheWarmUpResponseSchema|result : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartCacheWarmUpResponseSingleSchema" [color="black", fontcolor="black", label=<{ChartCacheWarmUpResponseSingleSchema|chart_id : Integer<br ALIGN="LEFT"/>viz_error : String<br ALIGN="LEFT"/>viz_status : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.filters.ChartCertifiedFilter" [color="black", fontcolor="black", label=<{ChartCertifiedFilter|arg_name : str<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.chart.exceptions.ChartCreateFailedError" [color="black", fontcolor="black", label=<{ChartCreateFailedError|message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.filters.ChartCreatedByMeFilter" [color="black", fontcolor="black", label=<{ChartCreatedByMeFilter|arg_name : str<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.daos.chart.ChartDAO" [color="black", fontcolor="black", label=<{ChartDAO|base_filter<br ALIGN="LEFT"/>|add_favorite(chart: Slice): None<br ALIGN="LEFT"/>favorited_ids(charts: list[Slice]): list[FavStar]<br ALIGN="LEFT"/>remove_favorite(chart: Slice): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataAdhocMetricSchema" [color="black", fontcolor="black", label=<{ChartDataAdhocMetricSchema|aggregate : String<br ALIGN="LEFT"/>column : Nested<br ALIGN="LEFT"/>expressionType : String<br ALIGN="LEFT"/>hasCustomLabel : Boolean<br ALIGN="LEFT"/>isExtra : Boolean<br ALIGN="LEFT"/>label : String<br ALIGN="LEFT"/>optionName : String<br ALIGN="LEFT"/>sqlExpression : String<br ALIGN="LEFT"/>timeGrain : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataAggregateConfigField" [color="black", fontcolor="black", label=<{ChartDataAggregateConfigField|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataAggregateOptionsSchema" [color="black", fontcolor="black", label=<{ChartDataAggregateOptionsSchema|aggregates<br ALIGN="LEFT"/>groupby : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataAsyncResponseSchema" [color="black", fontcolor="black", label=<{ChartDataAsyncResponseSchema|channel_id : String<br ALIGN="LEFT"/>job_id : String<br ALIGN="LEFT"/>result_url : String<br ALIGN="LEFT"/>status : String<br ALIGN="LEFT"/>user_id : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataBoxplotOptionsSchema" [color="black", fontcolor="black", label=<{ChartDataBoxplotOptionsSchema|groupby : List<br ALIGN="LEFT"/>metrics : List<br ALIGN="LEFT"/>percentiles : Tuple<br ALIGN="LEFT"/>whisker_type : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.chart.exceptions.ChartDataCacheLoadError" [color="black", fontcolor="black", label=<{ChartDataCacheLoadError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataColumnSchema" [color="black", fontcolor="black", label=<{ChartDataColumnSchema|column_name : String<br ALIGN="LEFT"/>type : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.chart.data.get_data_command.ChartDataCommand" [color="black", fontcolor="black", label=<{ChartDataCommand|<br ALIGN="LEFT"/>|run(): dict[str, Any]<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataContributionOptionsSchema" [color="black", fontcolor="black", label=<{ChartDataContributionOptionsSchema|orientation : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataDatasourceSchema" [color="black", fontcolor="black", label=<{ChartDataDatasourceSchema|description : str<br ALIGN="LEFT"/>id : Integer<br ALIGN="LEFT"/>type : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataExtrasSchema" [color="black", fontcolor="black", label=<{ChartDataExtrasSchema|having : String<br ALIGN="LEFT"/>instant_time_comparison_range : String<br ALIGN="LEFT"/>relative_end : String<br ALIGN="LEFT"/>relative_start : String<br ALIGN="LEFT"/>time_grain_sqla : String<br ALIGN="LEFT"/>where : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataFilterSchema" [color="black", fontcolor="black", label=<{ChartDataFilterSchema|col : Raw<br ALIGN="LEFT"/>grain : String<br ALIGN="LEFT"/>isExtra : Boolean<br ALIGN="LEFT"/>op : String<br ALIGN="LEFT"/>val : Raw<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataGeodeticParseOptionsSchema" [color="black", fontcolor="black", label=<{ChartDataGeodeticParseOptionsSchema|altitude : String<br ALIGN="LEFT"/>geodetic : String<br ALIGN="LEFT"/>latitude : String<br ALIGN="LEFT"/>longitude : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataGeohashDecodeOptionsSchema" [color="black", fontcolor="black", label=<{ChartDataGeohashDecodeOptionsSchema|geohash : String<br ALIGN="LEFT"/>latitude : String<br ALIGN="LEFT"/>longitude : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataGeohashEncodeOptionsSchema" [color="black", fontcolor="black", label=<{ChartDataGeohashEncodeOptionsSchema|geohash : String<br ALIGN="LEFT"/>latitude : String<br ALIGN="LEFT"/>longitude : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataPivotOptionsSchema" [color="black", fontcolor="black", label=<{ChartDataPivotOptionsSchema|aggregates<br ALIGN="LEFT"/>column_fill_value : String<br ALIGN="LEFT"/>columns : List<br ALIGN="LEFT"/>drop_missing_columns : Boolean<br ALIGN="LEFT"/>index : tuple<br ALIGN="LEFT"/>marginal_distribution_name : String<br ALIGN="LEFT"/>marginal_distributions : Boolean<br ALIGN="LEFT"/>metric_fill_value : Number<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataPostProcessingOperationOptionsSchema" [color="black", fontcolor="black", label=<{ChartDataPostProcessingOperationOptionsSchema|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataPostProcessingOperationSchema" [color="black", fontcolor="black", label=<{ChartDataPostProcessingOperationSchema|operation : String<br ALIGN="LEFT"/>options : Dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataProphetOptionsSchema" [color="black", fontcolor="black", label=<{ChartDataProphetOptionsSchema|confidence_interval : Float<br ALIGN="LEFT"/>monthly_seasonality : Raw<br ALIGN="LEFT"/>periods : Integer<br ALIGN="LEFT"/>time_grain : String<br ALIGN="LEFT"/>weekly_seasonality : Raw<br ALIGN="LEFT"/>yearly_seasonality : Raw<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataQueryContextSchema" [color="black", fontcolor="black", label=<{ChartDataQueryContextSchema|custom_cache_timeout : Integer<br ALIGN="LEFT"/>datasource : Nested<br ALIGN="LEFT"/>force : Boolean<br ALIGN="LEFT"/>form_data : Raw<br ALIGN="LEFT"/>queries : List<br ALIGN="LEFT"/>query_context_factory : QueryContextFactory \| None<br ALIGN="LEFT"/>result_format : Enum<br ALIGN="LEFT"/>result_type : Enum<br ALIGN="LEFT"/>|get_query_context_factory(): QueryContextFactory<br ALIGN="LEFT"/>make_query_context(data: dict[str, Any]): QueryContext<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.chart.exceptions.ChartDataQueryFailedError" [color="black", fontcolor="black", label=<{ChartDataQueryFailedError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataQueryObjectSchema" [color="black", fontcolor="black", label=<{ChartDataQueryObjectSchema|annotation_layers : List<br ALIGN="LEFT"/>applied_time_extras : Dict<br ALIGN="LEFT"/>apply_fetch_values_predicate : Boolean<br ALIGN="LEFT"/>columns : List<br ALIGN="LEFT"/>datasource : Nested<br ALIGN="LEFT"/>extras : Nested<br ALIGN="LEFT"/>filters : List<br ALIGN="LEFT"/>granularity : String<br ALIGN="LEFT"/>granularity_sqla : String<br ALIGN="LEFT"/>groupby : List<br ALIGN="LEFT"/>having : String<br ALIGN="LEFT"/>is_rowcount : Boolean<br ALIGN="LEFT"/>is_timeseries : Boolean<br ALIGN="LEFT"/>metrics : List<br ALIGN="LEFT"/>order_desc : Boolean<br ALIGN="LEFT"/>orderby : List<br ALIGN="LEFT"/>post_processing : List<br ALIGN="LEFT"/>result_type : Enum<br ALIGN="LEFT"/>row_limit : Integer<br ALIGN="LEFT"/>row_offset : Integer<br ALIGN="LEFT"/>series_columns : List<br ALIGN="LEFT"/>series_limit : Integer<br ALIGN="LEFT"/>series_limit_metric : Raw<br ALIGN="LEFT"/>time_offsets : List<br ALIGN="LEFT"/>time_range : String<br ALIGN="LEFT"/>time_shift : String<br ALIGN="LEFT"/>timeseries_limit : Integer<br ALIGN="LEFT"/>timeseries_limit_metric : Raw<br ALIGN="LEFT"/>url_params : Dict<br ALIGN="LEFT"/>where : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataResponseResult" [color="black", fontcolor="black", label=<{ChartDataResponseResult|annotation_data : List<br ALIGN="LEFT"/>applied_filters : List<br ALIGN="LEFT"/>cache_key : String<br ALIGN="LEFT"/>cache_timeout : Integer<br ALIGN="LEFT"/>cached_dttm : String<br ALIGN="LEFT"/>colnames : List<br ALIGN="LEFT"/>coltypes : List<br ALIGN="LEFT"/>data : List<br ALIGN="LEFT"/>error : String<br ALIGN="LEFT"/>from_dttm : Integer<br ALIGN="LEFT"/>is_cached : Boolean<br ALIGN="LEFT"/>query : String<br ALIGN="LEFT"/>rejected_filters : List<br ALIGN="LEFT"/>rowcount : Integer<br ALIGN="LEFT"/>stacktrace : String<br ALIGN="LEFT"/>status : String<br ALIGN="LEFT"/>to_dttm : Integer<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataResponseSchema" [color="black", fontcolor="black", label=<{ChartDataResponseSchema|result : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.data.api.ChartDataRestApi" [color="black", fontcolor="black", label=<{ChartDataRestApi|include_route_methods : set<br ALIGN="LEFT"/>|data(): Response<br ALIGN="LEFT"/>data_from_cache(cache_key: str): Response<br ALIGN="LEFT"/>get_data(pk: int): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.common.chart_data.ChartDataResultFormat" [color="black", fontcolor="black", label=<{ChartDataResultFormat|CSV : str<br ALIGN="LEFT"/>JSON : str<br ALIGN="LEFT"/>XLSX : str<br ALIGN="LEFT"/>|table_like(): set['ChartDataResultFormat']<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.common.chart_data.ChartDataResultType" [color="black", fontcolor="black", label=<{ChartDataResultType|COLUMNS : str<br ALIGN="LEFT"/>DRILL_DETAIL : str<br ALIGN="LEFT"/>FULL : str<br ALIGN="LEFT"/>POST_PROCESSED : str<br ALIGN="LEFT"/>QUERY : str<br ALIGN="LEFT"/>RESULTS : str<br ALIGN="LEFT"/>SAMPLES : str<br ALIGN="LEFT"/>TIMEGRAINS : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataRollingOptionsSchema" [color="black", fontcolor="black", label=<{ChartDataRollingOptionsSchema|center : Boolean<br ALIGN="LEFT"/>columns : tuple<br ALIGN="LEFT"/>min_periods : Integer<br ALIGN="LEFT"/>rolling_type : String<br ALIGN="LEFT"/>rolling_type_options : Dict<br ALIGN="LEFT"/>win_type : String<br ALIGN="LEFT"/>window : Integer<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataSelectOptionsSchema" [color="black", fontcolor="black", label=<{ChartDataSelectOptionsSchema|columns : List<br ALIGN="LEFT"/>exclude : List<br ALIGN="LEFT"/>rename : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataSortOptionsSchema" [color="black", fontcolor="black", label=<{ChartDataSortOptionsSchema|aggregates<br ALIGN="LEFT"/>columns : Dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.chart.exceptions.ChartDeleteFailedError" [color="black", fontcolor="black", label=<{ChartDeleteFailedError|message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.chart.exceptions.ChartDeleteFailedReportsExistError" [color="black", fontcolor="black", label=<{ChartDeleteFailedReportsExistError|message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartEntityResponseSchema" [color="black", fontcolor="black", label=<{ChartEntityResponseSchema|cache_timeout : Integer<br ALIGN="LEFT"/>certification_details : String<br ALIGN="LEFT"/>certified_by : String<br ALIGN="LEFT"/>changed_on : DateTime<br ALIGN="LEFT"/>description : String<br ALIGN="LEFT"/>description_markeddown : String<br ALIGN="LEFT"/>form_data : Dict<br ALIGN="LEFT"/>id : Integer<br ALIGN="LEFT"/>slice_name : String<br ALIGN="LEFT"/>slice_url : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartFavStarResponseResult" [color="black", fontcolor="black", label=<{ChartFavStarResponseResult|id : Integer<br ALIGN="LEFT"/>value : Boolean<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.ChartFavStarResponseResult" [color="black", fontcolor="black", label=<{ChartFavStarResponseResult|id : Integer<br ALIGN="LEFT"/>value : Boolean<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.chart.exceptions.ChartFaveError" [color="black", fontcolor="black", label=<{ChartFaveError|message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.filters.ChartFavoriteFilter" [color="black", fontcolor="black", label=<{ChartFavoriteFilter|arg_name : str<br ALIGN="LEFT"/>class_name : str<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.filters.ChartFilter" [color="black", fontcolor="black", label=<{ChartFilter|<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.chart.exceptions.ChartForbiddenError" [color="black", fontcolor="black", label=<{ChartForbiddenError|message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartGetDatasourceObjectDataResponseSchema" [color="black", fontcolor="black", label=<{ChartGetDatasourceObjectDataResponseSchema|datasource_id : Integer<br ALIGN="LEFT"/>datasource_type : Integer<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartGetDatasourceObjectResponseSchema" [color="black", fontcolor="black", label=<{ChartGetDatasourceObjectResponseSchema|label : String<br ALIGN="LEFT"/>value : Nested<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartGetDatasourceResponseSchema" [color="black", fontcolor="black", label=<{ChartGetDatasourceResponseSchema|count : Integer<br ALIGN="LEFT"/>result : Nested<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.filters.ChartHasCreatedByFilter" [color="black", fontcolor="black", label=<{ChartHasCreatedByFilter|arg_name : str<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.chart.exceptions.ChartImportError" [color="black", fontcolor="black", label=<{ChartImportError|message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.chart.exceptions.ChartInvalidError" [color="black", fontcolor="black", label=<{ChartInvalidError|message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.chart.exceptions.ChartNotFoundError" [color="black", fontcolor="black", label=<{ChartNotFoundError|message : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ChartNotFoundValidationError" [color="black", fontcolor="black", label=<{ChartNotFoundValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ChartNotSavedValidationError" [color="black", fontcolor="black", label=<{ChartNotSavedValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.filters.ChartOwnedCreatedFavoredByMeFilter" [color="black", fontcolor="black", label=<{ChartOwnedCreatedFavoredByMeFilter|arg_name : str<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartPostSchema" [color="black", fontcolor="black", label=<{ChartPostSchema|cache_timeout : Integer<br ALIGN="LEFT"/>certification_details : String<br ALIGN="LEFT"/>certified_by : String<br ALIGN="LEFT"/>dashboards : List<br ALIGN="LEFT"/>datasource_id : Integer<br ALIGN="LEFT"/>datasource_name : String<br ALIGN="LEFT"/>datasource_type : String<br ALIGN="LEFT"/>description : String<br ALIGN="LEFT"/>external_url : String<br ALIGN="LEFT"/>is_managed_externally : Boolean<br ALIGN="LEFT"/>owners : List<br ALIGN="LEFT"/>params : String<br ALIGN="LEFT"/>query_context : String<br ALIGN="LEFT"/>query_context_generation : Boolean<br ALIGN="LEFT"/>slice_name : String<br ALIGN="LEFT"/>viz_type : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartPutSchema" [color="black", fontcolor="black", label=<{ChartPutSchema|cache_timeout : Integer<br ALIGN="LEFT"/>certification_details : String<br ALIGN="LEFT"/>certified_by : String<br ALIGN="LEFT"/>dashboards : List<br ALIGN="LEFT"/>datasource_id : Integer<br ALIGN="LEFT"/>datasource_type : String<br ALIGN="LEFT"/>description : String<br ALIGN="LEFT"/>external_url : String<br ALIGN="LEFT"/>is_managed_externally : Boolean<br ALIGN="LEFT"/>owners : List<br ALIGN="LEFT"/>params : String<br ALIGN="LEFT"/>query_context : String<br ALIGN="LEFT"/>query_context_generation : Boolean<br ALIGN="LEFT"/>slice_name : String<br ALIGN="LEFT"/>tags : List<br ALIGN="LEFT"/>viz_type : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.api.ChartRestApi" [color="black", fontcolor="black", label=<{ChartRestApi|add_columns : list<br ALIGN="LEFT"/>add_model_schema<br ALIGN="LEFT"/>allow_browser_login : bool<br ALIGN="LEFT"/>allowed_rel_fields : set<br ALIGN="LEFT"/>apispec_parameter_schemas : dict<br ALIGN="LEFT"/>base_filters : list<br ALIGN="LEFT"/>base_order : tuple<br ALIGN="LEFT"/>base_related_field_filters : dict<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>edit_columns : list<br ALIGN="LEFT"/>edit_model_schema<br ALIGN="LEFT"/>include_route_methods<br ALIGN="LEFT"/>list_columns : list<br ALIGN="LEFT"/>list_select_columns : list<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>openapi_spec_component_schemas<br ALIGN="LEFT"/>openapi_spec_methods<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>order_columns : list<br ALIGN="LEFT"/>order_rel_fields : dict<br ALIGN="LEFT"/>related_field_filters : dict<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>search_columns : list<br ALIGN="LEFT"/>search_filters : dict<br ALIGN="LEFT"/>show_columns : list<br ALIGN="LEFT"/>show_select_columns : list<br ALIGN="LEFT"/>|add_favorite(pk: int): Response<br ALIGN="LEFT"/>bulk_delete(): Response<br ALIGN="LEFT"/>cache_screenshot(pk: int): WerkzeugResponse<br ALIGN="LEFT"/>delete(pk: int): Response<br ALIGN="LEFT"/>ensure_thumbnails_enabled(): Optional[Response]<br ALIGN="LEFT"/>export(): Response<br ALIGN="LEFT"/>favorite_status(): Response<br ALIGN="LEFT"/>import_(): Response<br ALIGN="LEFT"/>post(): Response<br ALIGN="LEFT"/>put(pk: int): Response<br ALIGN="LEFT"/>remove_favorite(pk: int): Response<br ALIGN="LEFT"/>screenshot(pk: int, digest: str): WerkzeugResponse<br ALIGN="LEFT"/>thumbnail(pk: int, digest: str): WerkzeugResponse<br ALIGN="LEFT"/>warm_up_cache(): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.screenshots.ChartScreenshot" [color="black", fontcolor="black", label=<{ChartScreenshot|element : str<br ALIGN="LEFT"/>thumb_size : tuple<br ALIGN="LEFT"/>thumbnail_type : str<br ALIGN="LEFT"/>window_size : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.webdriver.ChartStandaloneMode" [color="black", fontcolor="black", label=<{ChartStandaloneMode|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.filters.ChartTagIdFilter" [color="black", fontcolor="black", label=<{ChartTagIdFilter|arg_name : str<br ALIGN="LEFT"/>class_name : str<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.filters.ChartTagNameFilter" [color="black", fontcolor="black", label=<{ChartTagNameFilter|arg_name : str<br ALIGN="LEFT"/>class_name : str<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.chart.exceptions.ChartUnfaveError" [color="black", fontcolor="black", label=<{ChartUnfaveError|message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.chart.exceptions.ChartUpdateFailedError" [color="black", fontcolor="black", label=<{ChartUpdateFailedError|message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tags.models.ChartUpdater" [color="black", fontcolor="black", label=<{ChartUpdater|object_type : str<br ALIGN="LEFT"/>|get_owners_ids(target: Slice): list[int]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.chart.warm_up_cache.ChartWarmUpCacheCommand" [color="black", fontcolor="black", label=<{ChartWarmUpCacheCommand|<br ALIGN="LEFT"/>|run(): dict[str, Any]<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.viz.ChordViz" [color="black", fontcolor="black", label=<{ChordViz|credits : str<br ALIGN="LEFT"/>is_timeseries : bool<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>query_obj(): QueryObjectDict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.initialization.SupersetAppInitializer.configure_middlewares.ChunkedEncodingFix" [color="black", fontcolor="black", label=<{ChunkedEncodingFix|app : Flask<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.clickhouse.ClickHouseBaseEngineSpec" [color="black", fontcolor="black", label=<{ClickHouseBaseEngineSpec|column_type_mappings : tuple<br ALIGN="LEFT"/>time_groupby_inline : bool<br ALIGN="LEFT"/>|convert_dttm(target_type: str, dttm: datetime, db_extra: dict[str, Any] \| None): str \| None<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.clickhouse.ClickHouseConnectEngineSpec" [color="black", fontcolor="black", label=<{ClickHouseConnectEngineSpec|default_driver : str<br ALIGN="LEFT"/>encryption_parameters : dict<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>parameters_schema<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>|build_sqlalchemy_uri(parameters: BasicParametersType, encrypted_extra: dict[str, str] \| None): str<br ALIGN="LEFT"/>get_datatype(type_code: str): str<br ALIGN="LEFT"/>get_dbapi_exception_mapping(): dict[type[Exception], type[Exception]]<br ALIGN="LEFT"/>get_dbapi_mapped_exception(exception: Exception): Exception<br ALIGN="LEFT"/>get_function_names(database: Database): list[str]<br ALIGN="LEFT"/>get_parameters_from_uri(uri: str, encrypted_extra: dict[str, Any] \| None): BasicParametersType<br ALIGN="LEFT"/>validate_parameters(properties: BasicPropertiesType): list[SupersetError]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.clickhouse.ClickHouseEngineSpec" [color="black", fontcolor="black", label=<{ClickHouseEngineSpec|engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>supports_file_upload : bool<br ALIGN="LEFT"/>|get_dbapi_exception_mapping(): dict[type[Exception], type[Exception]]<br ALIGN="LEFT"/>get_dbapi_mapped_exception(exception: Exception): Exception<br ALIGN="LEFT"/>get_function_names(database: Database): list[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.clickhouse.ClickHouseParametersSchema" [color="black", fontcolor="black", label=<{ClickHouseParametersSchema|database : String<br ALIGN="LEFT"/>encryption : Boolean<br ALIGN="LEFT"/>host : String<br ALIGN="LEFT"/>password : String<br ALIGN="LEFT"/>port : Integer<br ALIGN="LEFT"/>query : Dict<br ALIGN="LEFT"/>username : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.cockroachdb.CockroachDbEngineSpec" [color="black", fontcolor="black", label=<{CockroachDbEngineSpec|engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>|convert_dttm(target_type: str, dttm: datetime, db_extra: Optional[dict[str, Any]]): Optional[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.mock_data.ColumnInfo" [color="black", fontcolor="black", label=<{ColumnInfo|autoincrement : str<br ALIGN="LEFT"/>default : Optional[Any]<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>nullable : bool<br ALIGN="LEFT"/>primary_key : int<br ALIGN="LEFT"/>type : TraversibleType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.ColumnNotFoundException" [color="black", fontcolor="red", label=<{ColumnNotFoundException|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.core.ColumnSpec" [color="black", fontcolor="black", label=<{ColumnSpec|generic_type<br ALIGN="LEFT"/>is_dttm : bool<br ALIGN="LEFT"/>python_date_format : str \| None<br ALIGN="LEFT"/>sqla_type : TypeEngine \| str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.core.ColumnTypeSource" [color="black", fontcolor="black", label=<{ColumnTypeSource|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.ColumnarMetadataUploadFilePostSchema" [color="black", fontcolor="black", label=<{ColumnarMetadataUploadFilePostSchema|file : Raw<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.uploaders.columnar_reader.ColumnarReader" [color="black", fontcolor="black", label=<{ColumnarReader|<br ALIGN="LEFT"/>|file_metadata(file: FileStorage): FileMetadata<br ALIGN="LEFT"/>file_to_dataframe(file: FileStorage): pd.DataFrame<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.database.uploaders.columnar_reader.ColumnarReaderOptions" [color="black", fontcolor="black", label=<{ColumnarReaderOptions|columns_read : list[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.ColumnarUploadPostSchema" [color="black", fontcolor="black", label=<{ColumnarUploadPostSchema|file : Raw<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.forms.CommaSeparatedListField" [color="black", fontcolor="black", label=<{CommaSeparatedListField|data : list[str]<br ALIGN="LEFT"/>widget : BS3TextFieldWidget<br ALIGN="LEFT"/>|process_formdata(valuelist: list[str]): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.exceptions.CommandException" [color="black", fontcolor="red", label=<{CommandException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.exceptions.CommandInvalidError" [color="black", fontcolor="red", label=<{CommandInvalidError|status : int<br ALIGN="LEFT"/>|append(exception: ValidationError): None<br ALIGN="LEFT"/>extend(exceptions: list[ValidationError]): None<br ALIGN="LEFT"/>get_list_classnames(): list[str]<br ALIGN="LEFT"/>normalized_messages(): dict[Any, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.explore.parameters.CommandParameters" [color="black", fontcolor="black", label=<{CommandParameters|datasource_id : Optional[int]<br ALIGN="LEFT"/>datasource_type : Optional[str]<br ALIGN="LEFT"/>form_data_key : Optional[str]<br ALIGN="LEFT"/>permalink_key : Optional[str]<br ALIGN="LEFT"/>slice_id : Optional[int]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.explore.form_data.parameters.CommandParameters" [color="black", fontcolor="black", label=<{CommandParameters|chart_id : int<br ALIGN="LEFT"/>datasource_id : int<br ALIGN="LEFT"/>datasource_type<br ALIGN="LEFT"/>form_data : Optional[str]<br ALIGN="LEFT"/>key : Optional[str]<br ALIGN="LEFT"/>tab_id : Optional[int]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.temporary_cache.parameters.CommandParameters" [color="black", fontcolor="black", label=<{CommandParameters|codec : Optional[KeyValueCodec]<br ALIGN="LEFT"/>key : Optional[str]<br ALIGN="LEFT"/>resource_id : int<br ALIGN="LEFT"/>tab_id : Optional[int]<br ALIGN="LEFT"/>value : Optional[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.core.ConfigurationMethod" [color="black", fontcolor="black", label=<{ConfigurationMethod|DYNAMIC_FORM : str<br ALIGN="LEFT"/>SQLALCHEMY_FORM : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.copy.CopyDashboardCommand" [color="black", fontcolor="black", label=<{CopyDashboardCommand|<br ALIGN="LEFT"/>|run(): Dashboard<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.couchbase.CouchbaseEngineSpec" [color="black", fontcolor="black", label=<{CouchbaseEngineSpec|allows_joins : bool<br ALIGN="LEFT"/>allows_subqueries : bool<br ALIGN="LEFT"/>default_driver : str<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_aliases : set<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>parameters_schema<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>|build_sqlalchemy_uri(parameters: BaseBasicParametersType, encrypted_extra: Optional[dict[str, Any]]): str<br ALIGN="LEFT"/>convert_dttm(target_type: str, dttm: datetime, db_extra: Optional[dict[str, Any]]): Optional[str]<br ALIGN="LEFT"/>epoch_ms_to_dttm(): str<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>get_parameters_from_uri(uri: str, encrypted_extra: Optional[dict[str, Any]]): BaseBasicParametersType<br ALIGN="LEFT"/>get_schema_from_engine_params(sqlalchemy_uri: URL, connect_args: dict[str, Any]): Optional[str]<br ALIGN="LEFT"/>validate_parameters(properties: BaseBasicPropertiesType): list[SupersetError]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.couchbase.CouchbaseParametersSchema" [color="black", fontcolor="black", label=<{CouchbaseParametersSchema|database : String<br ALIGN="LEFT"/>encryption : Boolean<br ALIGN="LEFT"/>host : String<br ALIGN="LEFT"/>password : String<br ALIGN="LEFT"/>port : Integer<br ALIGN="LEFT"/>query : Dict<br ALIGN="LEFT"/>username : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.viz.CountryMapViz" [color="black", fontcolor="black", label=<{CountryMapViz|credits : str<br ALIGN="LEFT"/>is_timeseries : bool<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>query_obj(): QueryObjectDict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.crate.CrateEngineSpec" [color="black", fontcolor="black", label=<{CrateEngineSpec|engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>|alter_new_orm_column(orm_col: TableColumn): None<br ALIGN="LEFT"/>convert_dttm(target_type: str, dttm: datetime, db_extra: dict[str, Any] \| None): str \| None<br ALIGN="LEFT"/>epoch_ms_to_dttm(): str<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.annotation_layer.annotation.create.CreateAnnotationCommand" [color="black", fontcolor="black", label=<{CreateAnnotationCommand|<br ALIGN="LEFT"/>|run(): Model<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.annotation_layer.create.CreateAnnotationLayerCommand" [color="black", fontcolor="black", label=<{CreateAnnotationLayerCommand|<br ALIGN="LEFT"/>|run(): Model<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.chart.data.create_async_job_command.CreateAsyncChartDataJobCommand" [color="black", fontcolor="black", label=<{CreateAsyncChartDataJobCommand|<br ALIGN="LEFT"/>|run(form_data: dict[str, Any], user_id: Optional[int]): dict[str, Any]<br ALIGN="LEFT"/>validate(request: Request): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.chart.create.CreateChartCommand" [color="black", fontcolor="black", label=<{CreateChartCommand|<br ALIGN="LEFT"/>|run(): Model<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.tag.create.CreateCustomTagCommand" [color="black", fontcolor="black", label=<{CreateCustomTagCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.tag.create.CreateCustomTagWithRelationshipsCommand" [color="black", fontcolor="black", label=<{CreateCustomTagWithRelationshipsCommand|<br ALIGN="LEFT"/>|run(): tuple[set[tuple[str, int]], set[tuple[str, int]]]<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.create.CreateDashboardCommand" [color="black", fontcolor="black", label=<{CreateDashboardCommand|<br ALIGN="LEFT"/>|run(): Model<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.permalink.create.CreateDashboardPermalinkCommand" [color="black", fontcolor="black", label=<{CreateDashboardPermalinkCommand|dashboard_id : str<br ALIGN="LEFT"/>state<br ALIGN="LEFT"/>|run(): str<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.database.create.CreateDatabaseCommand" [color="black", fontcolor="black", label=<{CreateDatabaseCommand|<br ALIGN="LEFT"/>|run(): Model<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dataset.create.CreateDatasetCommand" [color="black", fontcolor="black", label=<{CreateDatasetCommand|<br ALIGN="LEFT"/>|run(): Model<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.distributed_lock.create.CreateDistributedLock" [color="black", fontcolor="black", label=<{CreateDistributedLock|lock_expiration : timedelta<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.explore.permalink.create.CreateExplorePermalinkCommand" [color="black", fontcolor="black", label=<{CreateExplorePermalinkCommand|chart_id : Optional[int]<br ALIGN="LEFT"/>datasource : str<br ALIGN="LEFT"/>state : dict[str, Any]<br ALIGN="LEFT"/>|run(): str<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.exceptions.CreateFailedError" [color="black", fontcolor="red", label=<{CreateFailedError|message : str<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.filter_state.create.CreateFilterStateCommand" [color="black", fontcolor="black", label=<{CreateFilterStateCommand|<br ALIGN="LEFT"/>|create(cmd_params: CommandParameters): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.explore.form_data.create.CreateFormDataCommand" [color="black", fontcolor="black", label=<{CreateFormDataCommand|<br ALIGN="LEFT"/>|run(): str<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.exceptions.CreateKeyValueDistributedLockFailedException" [color="black", fontcolor="red", label=<{CreateKeyValueDistributedLockFailedException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.base.CreateMixin" [color="black", fontcolor="black", label=<{CreateMixin|<br ALIGN="LEFT"/>|populate_owners(owner_ids: Optional[list[int]]): list[User]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.security.create.CreateRLSRuleCommand" [color="black", fontcolor="black", label=<{CreateRLSRuleCommand|<br ALIGN="LEFT"/>|run(): Any<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.report.create.CreateReportScheduleCommand" [color="black", fontcolor="black", label=<{CreateReportScheduleCommand|<br ALIGN="LEFT"/>|run(): ReportSchedule<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.database.ssh_tunnel.create.CreateSSHTunnelCommand" [color="black", fontcolor="black", label=<{CreateSSHTunnelCommand|<br ALIGN="LEFT"/>|run(): Model<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.sql_lab.permalink.create.CreateSqlLabPermalinkCommand" [color="black", fontcolor="black", label=<{CreateSqlLabPermalinkCommand|<br ALIGN="LEFT"/>|run(): str<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sqllab.sqllab_execution_context.CreateTableAsSelect" [color="black", fontcolor="black", label=<{CreateTableAsSelect|ctas_method<br ALIGN="LEFT"/>target_schema_name : str \| None<br ALIGN="LEFT"/>target_table_name : str<br ALIGN="LEFT"/>|create_from(query_params: dict[str, Any]): CreateTableAsSelect<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.temporary_cache.create.CreateTemporaryCacheCommand" [color="black", fontcolor="black", label=<{CreateTemporaryCacheCommand|<br ALIGN="LEFT"/>|<I>create</I>(cmd_params: CommandParameters): str<br ALIGN="LEFT"/>run(): str<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.models.core.CssTemplate" [color="black", fontcolor="black", label=<{CssTemplate|css<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>template_name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.css_templates.filters.CssTemplateAllTextFilter" [color="black", fontcolor="black", label=<{CssTemplateAllTextFilter|arg_name : str<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.daos.css.CssTemplateDAO" [color="black", fontcolor="black", label=<{CssTemplateDAO|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.css.exceptions.CssTemplateDeleteFailedError" [color="black", fontcolor="black", label=<{CssTemplateDeleteFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.css_templates.CssTemplateModelView" [color="black", fontcolor="black", label=<{CssTemplateModelView|class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>include_route_methods<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>|list(): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.css.exceptions.CssTemplateNotFoundError" [color="black", fontcolor="black", label=<{CssTemplateNotFoundError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.css_templates.api.CssTemplateRestApi" [color="black", fontcolor="black", label=<{CssTemplateRestApi|add_columns : list<br ALIGN="LEFT"/>allow_browser_login : bool<br ALIGN="LEFT"/>allowed_rel_fields : set<br ALIGN="LEFT"/>apispec_parameter_schemas : dict<br ALIGN="LEFT"/>base_related_field_filters : dict<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>edit_columns : list<br ALIGN="LEFT"/>include_route_methods<br ALIGN="LEFT"/>list_columns : list<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>openapi_spec_methods<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>order_columns : list<br ALIGN="LEFT"/>related_field_filters : dict<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>search_filters : dict<br ALIGN="LEFT"/>show_columns : list<br ALIGN="LEFT"/>|bulk_delete(): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.views.base.CsvResponse" [color="black", fontcolor="black", label=<{CsvResponse|charset<br ALIGN="LEFT"/>default_mimetype : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sql_parse.CtasMethod" [color="black", fontcolor="black", label=<{CtasMethod|TABLE : str<br ALIGN="LEFT"/>VIEW : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.users.api.CurrentUserRestApi" [color="black", fontcolor="black", label=<{CurrentUserRestApi|openapi_spec_component_schemas : tuple<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>|get_me(): Response<br ALIGN="LEFT"/>get_my_roles(): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.utils.encrypt_tests.CustomEncFieldAdapter" [color="black", fontcolor="black", label=<{CustomEncFieldAdapter|<br ALIGN="LEFT"/>|create(app_config: Optional[dict[str, Any]]): TypeDecorator<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.superset_test_custom_template_processors.CustomPrestoTemplateProcessor" [color="black", fontcolor="black", label=<{CustomPrestoTemplateProcessor|engine : str<br ALIGN="LEFT"/>|process_template(sql: str): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.unit_tests.models.core_test.test_get_metrics.CustomSqliteEngineSpec" [color="black", fontcolor="black", label=<{CustomSqliteEngineSpec|<br ALIGN="LEFT"/>|get_metrics(database: Database, inspector: Inspector, table: Table): list[MetricType]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.trino.CustomTrinoAuthErrorMeta" [color="black", fontcolor="black", label=<{CustomTrinoAuthErrorMeta|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.unit_tests.dao.user_test.test_get_by_id_custom_user_class.CustomUserModel" [color="black", fontcolor="black", label=<{CustomUserModel|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.config.D3Format" [color="black", fontcolor="black", label=<{D3Format|currency : list[str]<br ALIGN="LEFT"/>decimal : str<br ALIGN="LEFT"/>grouping : list[int]<br ALIGN="LEFT"/>thousands : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.config.D3TimeFormat" [color="black", fontcolor="black", label=<{D3TimeFormat|date : str<br ALIGN="LEFT"/>dateTime : str<br ALIGN="LEFT"/>days : list[str]<br ALIGN="LEFT"/>months : list[str]<br ALIGN="LEFT"/>periods : list[str]<br ALIGN="LEFT"/>shortDays : list[str]<br ALIGN="LEFT"/>shortMonths : list[str]<br ALIGN="LEFT"/>time : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.daos.exceptions.DAOException" [color="black", fontcolor="red", label=<{DAOException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.log.DBEventLogger" [color="black", fontcolor="black", label=<{DBEventLogger|<br ALIGN="LEFT"/>|log(user_id: int \| None, action: str, dashboard_id: int \| None, duration_ms: int \| None, slice_id: int \| None, referrer: str \| None): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.doris.DOUBLE" [color="black", fontcolor="black", label=<{DOUBLE|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.starrocks.DOUBLE" [color="black", fontcolor="black", label=<{DOUBLE|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2016-06-27_08-43_27ae655e4247_make_creator_owners.Dashboard" [color="black", fontcolor="black", label=<{Dashboard|id<br ALIGN="LEFT"/>owners<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-02-13_08-07_e866bd2d4976_smaller_grid.Dashboard" [color="black", fontcolor="black", label=<{Dashboard|dashboard_title<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>position_json<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.Dashboard" [color="black", fontcolor="black", label=<{Dashboard|css<br ALIGN="LEFT"/>dashboard_title<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>json_metadata<br ALIGN="LEFT"/>position_json<br ALIGN="LEFT"/>slug<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-22_11-59_bebcf3fed1fe_convert_dashboard_v1_positions.Dashboard" [color="black", fontcolor="black", label=<{Dashboard|dashboard_title<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>position_json<br ALIGN="LEFT"/>slices<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-08-01_11-47_7fcdcde0761c_.Dashboard" [color="black", fontcolor="black", label=<{Dashboard|dashboard_title<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>position_json<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-11-12_13-31_4ce8df208545_migrate_time_range_for_default_filters.Dashboard" [color="black", fontcolor="black", label=<{Dashboard|id<br ALIGN="LEFT"/>json_metadata<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.Dashboard" [color="black", fontcolor="black", label=<{Dashboard|css<br ALIGN="LEFT"/>dashboard_title<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>json_metadata<br ALIGN="LEFT"/>position_json<br ALIGN="LEFT"/>slug<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-04-09_16-27_80aa3f04bc82_add_parent_ids_in_dashboard_layout.Dashboard" [color="black", fontcolor="black", label=<{Dashboard|id<br ALIGN="LEFT"/>position_json<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.Dashboard" [color="black", fontcolor="black", label=<{Dashboard|css<br ALIGN="LEFT"/>dashboard_title<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>json_metadata<br ALIGN="LEFT"/>position_json<br ALIGN="LEFT"/>slug<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2020-02-07_14-13_3325d4caccc8_dashboard_scoped_filters.Dashboard" [color="black", fontcolor="black", label=<{Dashboard|id<br ALIGN="LEFT"/>json_metadata<br ALIGN="LEFT"/>slices<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2020-08-12_00-24_978245563a02_migrate_iframe_to_dash_markdown.Dashboard" [color="black", fontcolor="black", label=<{Dashboard|id<br ALIGN="LEFT"/>position_json<br ALIGN="LEFT"/>slices<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2021-03-24_09-47_989bbe479899_rename_filter_configuration_in_.Dashboard" [color="black", fontcolor="black", label=<{Dashboard|id<br ALIGN="LEFT"/>json_metadata<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2021-04-12_12-38_fc3a3a8ff221_migrate_filter_sets_to_new_format.Dashboard" [color="black", fontcolor="black", label=<{Dashboard|id<br ALIGN="LEFT"/>json_metadata<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2021-04-29_15-32_f1410ed7ec95_migrate_native_filters_to_new_schema.Dashboard" [color="black", fontcolor="black", label=<{Dashboard|id<br ALIGN="LEFT"/>json_metadata<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2021-08-31_11-37_021b81fe4fbb_add_type_to_native_filter_configuration.Dashboard" [color="black", fontcolor="black", label=<{Dashboard|id<br ALIGN="LEFT"/>json_metadata<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-11-28_17-51_4ce1d9b25135_remove_filter_bar_orientation.Dashboard" [color="black", fontcolor="black", label=<{Dashboard|id<br ALIGN="LEFT"/>json_metadata<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2023-02-28_14-46_c0a3ea245b61_remove_show_native_filters.Dashboard" [color="black", fontcolor="black", label=<{Dashboard|id<br ALIGN="LEFT"/>json_metadata<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2023-05-11_12-41_4ea966691069_cross_filter_global_scoping.Dashboard" [color="black", fontcolor="black", label=<{Dashboard|id<br ALIGN="LEFT"/>json_metadata<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2023-07-19_16-48_a23c6f8b1280_cleanup_erroneous_parent_filter_ids.Dashboard" [color="black", fontcolor="black", label=<{Dashboard|id<br ALIGN="LEFT"/>json_metadata<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2024-01-18_15-20_214f580d09c9_migrate_filter_boxes_to_native_filters.Dashboard" [color="black", fontcolor="black", label=<{Dashboard|id<br ALIGN="LEFT"/>json_metadata<br ALIGN="LEFT"/>position_json<br ALIGN="LEFT"/>slices<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.dashboard.Dashboard" [color="black", fontcolor="black", label=<{Dashboard|certification_details<br ALIGN="LEFT"/>certified_by<br ALIGN="LEFT"/>changed_by_name<br ALIGN="LEFT"/>charts<br ALIGN="LEFT"/>css<br ALIGN="LEFT"/>dashboard_title<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>datasources<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>digest<br ALIGN="LEFT"/>embedded<br ALIGN="LEFT"/>export_fields : list<br ALIGN="LEFT"/>external_url<br ALIGN="LEFT"/>extra_import_fields : list<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>is_managed_externally<br ALIGN="LEFT"/>json_metadata<br ALIGN="LEFT"/>owners<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>position<br ALIGN="LEFT"/>position_json<br ALIGN="LEFT"/>published<br ALIGN="LEFT"/>roles<br ALIGN="LEFT"/>slices : list[Slice]<br ALIGN="LEFT"/>slug<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>tabs<br ALIGN="LEFT"/>tags<br ALIGN="LEFT"/>thumbnail_url<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>|dashboard_link(): Markup<br ALIGN="LEFT"/>datasets_trimmed_for_slices(): list[dict[str, Any]]<br ALIGN="LEFT"/>export_dashboards(dashboard_ids: set[int]): str<br ALIGN="LEFT"/>get(id_or_slug: str \| int): Dashboard<br ALIGN="LEFT"/>get_url(id_: int, slug: str \| None): str<br ALIGN="LEFT"/>raise_for_access(): None<br ALIGN="LEFT"/>update_thumbnail(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.views.dashboard.views.Dashboard" [color="black", fontcolor="black", label=<{Dashboard|class_permission_name : str<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>|embedded(dashboard_id_or_slug: str, add_extra_log_payload: Callable[..., None]): FlaskResponse<br ALIGN="LEFT"/>new(): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.exceptions.DashboardAccessDeniedError" [color="black", fontcolor="black", label=<{DashboardAccessDeniedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.filters.DashboardAccessFilter" [color="black", fontcolor="black", label=<{DashboardAccessFilter|<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.DashboardCacheScreenshotResponseSchema" [color="black", fontcolor="black", label=<{DashboardCacheScreenshotResponseSchema|cache_key : String<br ALIGN="LEFT"/>dashboard_url : String<br ALIGN="LEFT"/>image_url : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.filters.DashboardCertifiedFilter" [color="black", fontcolor="black", label=<{DashboardCertifiedFilter|arg_name : str<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.exceptions.DashboardColorsConfigUpdateFailedError" [color="black", fontcolor="black", label=<{DashboardColorsConfigUpdateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.DashboardColorsConfigUpdateSchema" [color="black", fontcolor="black", label=<{DashboardColorsConfigUpdateSchema|color_namespace : String<br ALIGN="LEFT"/>color_scheme : String<br ALIGN="LEFT"/>color_scheme_domain : List<br ALIGN="LEFT"/>label_colors : Dict<br ALIGN="LEFT"/>map_label_colors : Dict<br ALIGN="LEFT"/>shared_label_colors<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.exceptions.DashboardCopyError" [color="black", fontcolor="black", label=<{DashboardCopyError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.DashboardCopySchema" [color="black", fontcolor="black", label=<{DashboardCopySchema|css : String<br ALIGN="LEFT"/>dashboard_title : String<br ALIGN="LEFT"/>duplicate_slices : Boolean<br ALIGN="LEFT"/>json_metadata : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.exceptions.DashboardCreateFailedError" [color="black", fontcolor="black", label=<{DashboardCreateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.filters.DashboardCreatedByMeFilter" [color="black", fontcolor="black", label=<{DashboardCreatedByMeFilter|arg_name : str<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.daos.dashboard.DashboardDAO" [color="black", fontcolor="black", label=<{DashboardDAO|base_filter<br ALIGN="LEFT"/>|add_favorite(dashboard: Dashboard): None<br ALIGN="LEFT"/>copy_dashboard(original_dash: Dashboard, data: dict[str, Any]): Dashboard<br ALIGN="LEFT"/>favorited_ids(dashboards: list[Dashboard]): list[FavStar]<br ALIGN="LEFT"/>get_by_id_or_slug(id_or_slug: int \| str): Dashboard<br ALIGN="LEFT"/>get_charts_for_dashboard(id_or_slug: str): list[Slice]<br ALIGN="LEFT"/>get_dashboard_and_datasets_changed_on(id_or_slug_or_dashboard: str \| Dashboard): datetime<br ALIGN="LEFT"/>get_dashboard_and_slices_changed_on(id_or_slug_or_dashboard: str \| Dashboard): datetime<br ALIGN="LEFT"/>get_dashboard_changed_on(id_or_slug_or_dashboard: str \| Dashboard): datetime<br ALIGN="LEFT"/>get_datasets_for_dashboard(id_or_slug: str): list[Any]<br ALIGN="LEFT"/>get_tabs_for_dashboard(id_or_slug: str): dict[str, Any]<br ALIGN="LEFT"/>remove_favorite(dashboard: Dashboard): None<br ALIGN="LEFT"/>set_dash_metadata(dashboard: Dashboard, data: dict[Any, Any], old_to_new_slice_ids: dict[int, int] \| None): None<br ALIGN="LEFT"/>update_colors_config(dashboard: Dashboard, attributes: dict[str, Any]): None<br ALIGN="LEFT"/>update_native_filters_config(dashboard: Dashboard \| None, attributes: dict[str, Any] \| None): list[dict[str, Any]]<br ALIGN="LEFT"/>validate_slug_uniqueness(slug: str): bool<br ALIGN="LEFT"/>validate_update_slug_uniqueness(dashboard_id: int, slug: str \| None): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.DashboardDatasetSchema" [color="black", fontcolor="black", label=<{DashboardDatasetSchema|always_filter_main_dttm : Boolean<br ALIGN="LEFT"/>cache_timeout : Integer<br ALIGN="LEFT"/>column_formats : Dict<br ALIGN="LEFT"/>column_names : List<br ALIGN="LEFT"/>column_types : List<br ALIGN="LEFT"/>columns : List<br ALIGN="LEFT"/>currency_formats : Dict<br ALIGN="LEFT"/>database : Nested<br ALIGN="LEFT"/>datasource_name : String<br ALIGN="LEFT"/>default_endpoint : String<br ALIGN="LEFT"/>edit_url : String<br ALIGN="LEFT"/>fetch_values_predicate : String<br ALIGN="LEFT"/>filter_select : Boolean<br ALIGN="LEFT"/>filter_select_enabled : Boolean<br ALIGN="LEFT"/>granularity_sqla : List<br ALIGN="LEFT"/>health_check_message : String<br ALIGN="LEFT"/>id : Integer<br ALIGN="LEFT"/>is_sqllab_view : Boolean<br ALIGN="LEFT"/>main_dttm_col : String<br ALIGN="LEFT"/>metrics : List<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>normalize_columns : Boolean<br ALIGN="LEFT"/>offset : Integer<br ALIGN="LEFT"/>order_by_choices : List<br ALIGN="LEFT"/>owners : List<br ALIGN="LEFT"/>params : String<br ALIGN="LEFT"/>perm : String<br ALIGN="LEFT"/>schema : String<br ALIGN="LEFT"/>select_star : String<br ALIGN="LEFT"/>sql : String<br ALIGN="LEFT"/>table_name : String<br ALIGN="LEFT"/>template_params : String<br ALIGN="LEFT"/>time_grain_sqla : List<br ALIGN="LEFT"/>type : String<br ALIGN="LEFT"/>uid : String<br ALIGN="LEFT"/>verbose_map : Dict<br ALIGN="LEFT"/>|post_dump(serialized: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.exceptions.DashboardDeleteEmbeddedFailedError" [color="black", fontcolor="black", label=<{DashboardDeleteEmbeddedFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.exceptions.DashboardDeleteFailedError" [color="black", fontcolor="black", label=<{DashboardDeleteFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.exceptions.DashboardDeleteFailedReportsExistError" [color="black", fontcolor="black", label=<{DashboardDeleteFailedReportsExistError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.json.DashboardEncoder" [color="black", fontcolor="black", label=<{DashboardEncoder|sort_keys : bool<br ALIGN="LEFT"/>|default(o: Any): Union[dict[Any, Any], str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.exceptions.DashboardFaveError" [color="black", fontcolor="black", label=<{DashboardFaveError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.filters.DashboardFavoriteFilter" [color="black", fontcolor="black", label=<{DashboardFavoriteFilter|arg_name : str<br ALIGN="LEFT"/>class_name : str<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.filter_state.api.DashboardFilterStateRestApi" [color="black", fontcolor="black", label=<{DashboardFilterStateRestApi|class_permission_name : str<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>|delete(pk: int, key: str): Response<br ALIGN="LEFT"/>get(pk: int, key: str): Response<br ALIGN="LEFT"/>get_create_command(): type[CreateFilterStateCommand]<br ALIGN="LEFT"/>get_delete_command(): type[DeleteFilterStateCommand]<br ALIGN="LEFT"/>get_get_command(): type[GetFilterStateCommand]<br ALIGN="LEFT"/>get_update_command(): type[UpdateFilterStateCommand]<br ALIGN="LEFT"/>post(pk: int): Response<br ALIGN="LEFT"/>put(pk: int, key: str): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.exceptions.DashboardForbiddenError" [color="black", fontcolor="black", label=<{DashboardForbiddenError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.DashboardGetResponseSchema" [color="black", fontcolor="black", label=<{DashboardGetResponseSchema|certification_details : String<br ALIGN="LEFT"/>certified_by : String<br ALIGN="LEFT"/>changed_by : Nested<br ALIGN="LEFT"/>changed_by_name : String<br ALIGN="LEFT"/>changed_on : DateTime<br ALIGN="LEFT"/>changed_on_humanized : String<br ALIGN="LEFT"/>charts : List<br ALIGN="LEFT"/>created_by : Nested<br ALIGN="LEFT"/>created_on_humanized : String<br ALIGN="LEFT"/>css : String<br ALIGN="LEFT"/>dashboard_title : String<br ALIGN="LEFT"/>id : Integer<br ALIGN="LEFT"/>is_managed_externally : Boolean<br ALIGN="LEFT"/>json_metadata : String<br ALIGN="LEFT"/>owners : List<br ALIGN="LEFT"/>position_json : String<br ALIGN="LEFT"/>published : Boolean<br ALIGN="LEFT"/>roles : List<br ALIGN="LEFT"/>slug : String<br ALIGN="LEFT"/>tags : Nested<br ALIGN="LEFT"/>thumbnail_url : String<br ALIGN="LEFT"/>url : String<br ALIGN="LEFT"/>|post_dump(serialized: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.dashboards.filters.DashboardHasCreatedByFilter" [color="black", fontcolor="black", label=<{DashboardHasCreatedByFilter|arg_name : str<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.exceptions.DashboardImportError" [color="black", fontcolor="black", label=<{DashboardImportError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.DashboardImportException" [color="black", fontcolor="red", label=<{DashboardImportException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.exceptions.DashboardInvalidError" [color="black", fontcolor="black", label=<{DashboardInvalidError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.DashboardJSONMetadataSchema" [color="black", fontcolor="black", label=<{DashboardJSONMetadataSchema|chart_configuration : Dict<br ALIGN="LEFT"/>color_namespace : String<br ALIGN="LEFT"/>color_scheme : String<br ALIGN="LEFT"/>color_scheme_domain : List<br ALIGN="LEFT"/>cross_filters_enabled : Boolean<br ALIGN="LEFT"/>default_filters : String<br ALIGN="LEFT"/>expanded_slices : Dict<br ALIGN="LEFT"/>filter_bar_orientation : String<br ALIGN="LEFT"/>filter_scopes : Dict<br ALIGN="LEFT"/>global_chart_configuration : Dict<br ALIGN="LEFT"/>import_time : Integer<br ALIGN="LEFT"/>label_colors : Dict<br ALIGN="LEFT"/>map_label_colors : Dict<br ALIGN="LEFT"/>native_filter_configuration : List<br ALIGN="LEFT"/>native_filter_migration : Dict<br ALIGN="LEFT"/>positions : Dict<br ALIGN="LEFT"/>refresh_frequency : Integer<br ALIGN="LEFT"/>remote_id : Integer<br ALIGN="LEFT"/>shared_label_colors<br ALIGN="LEFT"/>stagger_refresh : Boolean<br ALIGN="LEFT"/>stagger_time : Integer<br ALIGN="LEFT"/>timed_refresh_immune_slices : List<br ALIGN="LEFT"/>|remove_show_native_filters(data: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.views.dashboard.mixin.DashboardMixin" [color="black", fontcolor="black", label=<{DashboardMixin|add_columns : list<br ALIGN="LEFT"/>add_title : LazyString<br ALIGN="LEFT"/>base_filters : list<br ALIGN="LEFT"/>base_order : tuple<br ALIGN="LEFT"/>description_columns : dict<br ALIGN="LEFT"/>edit_columns : list<br ALIGN="LEFT"/>edit_title : LazyString<br ALIGN="LEFT"/>label_columns : dict<br ALIGN="LEFT"/>list_columns : list<br ALIGN="LEFT"/>list_title : LazyString<br ALIGN="LEFT"/>order_columns : list<br ALIGN="LEFT"/>search_columns : tuple<br ALIGN="LEFT"/>show_columns : list<br ALIGN="LEFT"/>show_title : LazyString<br ALIGN="LEFT"/>|pre_delete(item: 'DashboardMixin'): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.views.dashboard.views.DashboardModelView" [color="black", fontcolor="black", label=<{DashboardModelView|class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>include_route_methods : set<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>route_base : str<br ALIGN="LEFT"/>|list(): FlaskResponse<br ALIGN="LEFT"/>mulexport(items: Union['DashboardModelView', builtins.list['DashboardModelView']]): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.DashboardNativeFiltersConfigUpdateSchema" [color="black", fontcolor="black", label=<{DashboardNativeFiltersConfigUpdateSchema|deleted : List<br ALIGN="LEFT"/>modified : List<br ALIGN="LEFT"/>reordered : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.exceptions.DashboardNativeFiltersUpdateFailedError" [color="black", fontcolor="black", label=<{DashboardNativeFiltersUpdateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.exceptions.DashboardNotFoundError" [color="black", fontcolor="black", label=<{DashboardNotFoundError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.DashboardNotFoundValidationError" [color="black", fontcolor="black", label=<{DashboardNotFoundValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.DashboardNotSavedValidationError" [color="black", fontcolor="black", label=<{DashboardNotSavedValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.permalink.exceptions.DashboardPermalinkCreateFailedError" [color="black", fontcolor="black", label=<{DashboardPermalinkCreateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.permalink.exceptions.DashboardPermalinkGetFailedError" [color="black", fontcolor="black", label=<{DashboardPermalinkGetFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.permalink.exceptions.DashboardPermalinkInvalidStateError" [color="black", fontcolor="black", label=<{DashboardPermalinkInvalidStateError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.permalink.api.DashboardPermalinkRestApi" [color="black", fontcolor="black", label=<{DashboardPermalinkRestApi|add_model_schema<br ALIGN="LEFT"/>allow_browser_login : bool<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>openapi_spec_component_schemas : tuple<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>|get(key: str): Response<br ALIGN="LEFT"/>post(pk: str): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.dashboards.permalink.schemas.DashboardPermalinkSchema" [color="black", fontcolor="black", label=<{DashboardPermalinkSchema|dashboardId : String<br ALIGN="LEFT"/>state : Nested<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.permalink.types.DashboardPermalinkState" [color="black", fontcolor="black", label=<{DashboardPermalinkState|activeTabs : Optional[list[str]]<br ALIGN="LEFT"/>anchor : Optional[str]<br ALIGN="LEFT"/>dataMask : Optional[dict[str, Any]]<br ALIGN="LEFT"/>urlParams : Optional[list[tuple[str, str]]]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.permalink.schemas.DashboardPermalinkStateSchema" [color="black", fontcolor="black", label=<{DashboardPermalinkStateSchema|activeTabs : List<br ALIGN="LEFT"/>anchor : String<br ALIGN="LEFT"/>dataMask : Dict<br ALIGN="LEFT"/>urlParams : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.permalink.types.DashboardPermalinkValue" [color="black", fontcolor="black", label=<{DashboardPermalinkValue|dashboardId : str<br ALIGN="LEFT"/>state<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.DashboardPostSchema" [color="black", fontcolor="black", label=<{DashboardPostSchema|certification_details : String<br ALIGN="LEFT"/>certified_by : String<br ALIGN="LEFT"/>css : String<br ALIGN="LEFT"/>dashboard_title : String<br ALIGN="LEFT"/>external_url : String<br ALIGN="LEFT"/>is_managed_externally : Boolean<br ALIGN="LEFT"/>json_metadata : String<br ALIGN="LEFT"/>owners : List<br ALIGN="LEFT"/>position_json : String<br ALIGN="LEFT"/>published : Boolean<br ALIGN="LEFT"/>roles : List<br ALIGN="LEFT"/>slug : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.DashboardPutSchema" [color="black", fontcolor="black", label=<{DashboardPutSchema|certification_details : String<br ALIGN="LEFT"/>certified_by : String<br ALIGN="LEFT"/>css : String<br ALIGN="LEFT"/>dashboard_title : String<br ALIGN="LEFT"/>external_url : String<br ALIGN="LEFT"/>is_managed_externally : Boolean<br ALIGN="LEFT"/>json_metadata : String<br ALIGN="LEFT"/>owners : List<br ALIGN="LEFT"/>position_json : String<br ALIGN="LEFT"/>published : Boolean<br ALIGN="LEFT"/>roles : List<br ALIGN="LEFT"/>slug : String<br ALIGN="LEFT"/>tags : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.api.DashboardRestApi" [color="black", fontcolor="black", label=<{DashboardRestApi|add_columns : list<br ALIGN="LEFT"/>add_model_schema<br ALIGN="LEFT"/>allow_browser_login : bool<br ALIGN="LEFT"/>allowed_rel_fields : set<br ALIGN="LEFT"/>apispec_parameter_schemas : dict<br ALIGN="LEFT"/>base_filters : list<br ALIGN="LEFT"/>base_order : tuple<br ALIGN="LEFT"/>base_related_field_filters : dict<br ALIGN="LEFT"/>chart_entity_response_schema<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>dashboard_dataset_schema<br ALIGN="LEFT"/>dashboard_get_response_schema<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>edit_columns : list<br ALIGN="LEFT"/>edit_model_schema<br ALIGN="LEFT"/>embedded_config_schema<br ALIGN="LEFT"/>embedded_response_schema<br ALIGN="LEFT"/>include_route_methods<br ALIGN="LEFT"/>list_columns : list<br ALIGN="LEFT"/>list_select_columns : list<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>openapi_spec_component_schemas : tuple<br ALIGN="LEFT"/>openapi_spec_methods<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>order_columns : list<br ALIGN="LEFT"/>order_rel_fields : dict<br ALIGN="LEFT"/>related_field_filters : dict<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>search_columns : tuple<br ALIGN="LEFT"/>search_filters : dict<br ALIGN="LEFT"/>tab_schema<br ALIGN="LEFT"/>update_colors_model_schema<br ALIGN="LEFT"/>update_filters_model_schema<br ALIGN="LEFT"/>|add_favorite(pk: int): Response<br ALIGN="LEFT"/>bulk_delete(): Response<br ALIGN="LEFT"/>cache_dashboard_screenshot(pk: int): WerkzeugResponse<br ALIGN="LEFT"/>copy_dash(original_dash: Dashboard): Response<br ALIGN="LEFT"/>delete(pk: int): Response<br ALIGN="LEFT"/>delete_embedded(dashboard: Dashboard): Response<br ALIGN="LEFT"/>export(): Response<br ALIGN="LEFT"/>favorite_status(): Response<br ALIGN="LEFT"/>get(dash: Dashboard, add_extra_log_payload: Callable[..., None]): Response<br ALIGN="LEFT"/>get_charts(id_or_slug: str): Response<br ALIGN="LEFT"/>get_datasets(id_or_slug: str): Response<br ALIGN="LEFT"/>get_embedded(dashboard: Dashboard): Response<br ALIGN="LEFT"/>get_tabs(id_or_slug: str): Response<br ALIGN="LEFT"/>import_(): Response<br ALIGN="LEFT"/>post(): Response<br ALIGN="LEFT"/>put(pk: int): Response<br ALIGN="LEFT"/>put_colors(pk: int): Response<br ALIGN="LEFT"/>put_filters(pk: int): Response<br ALIGN="LEFT"/>remove_favorite(pk: int): Response<br ALIGN="LEFT"/>screenshot(pk: int, digest: str): WerkzeugResponse<br ALIGN="LEFT"/>set_embedded(dashboard: Dashboard): Response<br ALIGN="LEFT"/>thumbnail(pk: int, digest: str): WerkzeugResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.screenshots.DashboardScreenshot" [color="black", fontcolor="black", label=<{DashboardScreenshot|element : str<br ALIGN="LEFT"/>thumb_size : tuple<br ALIGN="LEFT"/>thumbnail_type : str<br ALIGN="LEFT"/>window_size : tuple<br ALIGN="LEFT"/>|cache_key(window_size: bool \| WindowSize \| None, thumb_size: bool \| WindowSize \| None, dashboard_state: DashboardPermalinkState \| None): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.DashboardScreenshotPostSchema" [color="black", fontcolor="black", label=<{DashboardScreenshotPostSchema|activeTabs : List<br ALIGN="LEFT"/>anchor : String<br ALIGN="LEFT"/>dataMask : Dict<br ALIGN="LEFT"/>urlParams : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-07-15_12-00_190188938582_adding_unique_constraint_on_dashboard_slices_tbl.DashboardSlices" [color="black", fontcolor="black", label=<{DashboardSlices|dashboard_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>slice_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.exceptions.DashboardSlugExistsValidationError" [color="black", fontcolor="red", label=<{DashboardSlugExistsValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.webdriver.DashboardStandaloneMode" [color="black", fontcolor="black", label=<{DashboardStandaloneMode|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.core.DashboardStatus" [color="black", fontcolor="black", label=<{DashboardStatus|DRAFT : str<br ALIGN="LEFT"/>PUBLISHED : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.filters.DashboardTagIdFilter" [color="black", fontcolor="black", label=<{DashboardTagIdFilter|arg_name : str<br ALIGN="LEFT"/>class_name : str<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.filters.DashboardTagNameFilter" [color="black", fontcolor="black", label=<{DashboardTagNameFilter|arg_name : str<br ALIGN="LEFT"/>class_name : str<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tasks.cache.DashboardTagsStrategy" [color="black", fontcolor="black", label=<{DashboardTagsStrategy|name : str<br ALIGN="LEFT"/>tags : list<br ALIGN="LEFT"/>|get_tasks(): list[CacheWarmupTask]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.dashboards.base_case.DashboardTestCase" [color="black", fontcolor="black", label=<{DashboardTestCase|<br ALIGN="LEFT"/>|assert_permission_kept_and_changed(updated_dashboard, excepted_view_id)<br ALIGN="LEFT"/>assert_permission_was_created(dashboard)<br ALIGN="LEFT"/>assert_permissions_were_deleted(deleted_dashboard)<br ALIGN="LEFT"/>bulk_delete_dashboard_via_api(dashboard_ids)<br ALIGN="LEFT"/>clean_created_objects()<br ALIGN="LEFT"/>delete_dashboard(dashboard_id: int): Response<br ALIGN="LEFT"/>delete_dashboard_via_api(dashboard_id)<br ALIGN="LEFT"/>delete_dashboard_via_view(dashboard_id: int): Response<br ALIGN="LEFT"/>get_dashboard_api_response(dashboard_to_access): Response<br ALIGN="LEFT"/>get_dashboard_via_api_by_id(dashboard_id: int): Response<br ALIGN="LEFT"/>get_dashboard_view_response(dashboard_to_access): Response<br ALIGN="LEFT"/>get_dashboards_api_response(): Response<br ALIGN="LEFT"/>get_dashboards_list_response(): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.dashboards.filters.DashboardTitleOrSlugFilter" [color="black", fontcolor="black", label=<{DashboardTitleOrSlugFilter|arg_name : str<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.exceptions.DashboardUnfaveError" [color="black", fontcolor="black", label=<{DashboardUnfaveError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.exceptions.DashboardUpdateFailedError" [color="black", fontcolor="black", label=<{DashboardUpdateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tags.models.DashboardUpdater" [color="black", fontcolor="black", label=<{DashboardUpdater|object_type : str<br ALIGN="LEFT"/>|get_owners_ids(target: Dashboard): list[int]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.chart.exceptions.DashboardsForbiddenError" [color="black", fontcolor="black", label=<{DashboardsForbiddenError|message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.chart.exceptions.DashboardsNotFoundValidationError" [color="black", fontcolor="red", label=<{DashboardsNotFoundValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.example_data.data_loading.base_data_loader.DataLoader" [color="black", fontcolor="black", label=<{DataLoader|<br ALIGN="LEFT"/>|<I>load_table</I>(table: Table): None<br ALIGN="LEFT"/><I>remove_table</I>(table_name: str): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2016-09-22_11-31_eca4694defa7_sqllab_setting_defaults.Database" [color="black", fontcolor="black", label=<{Database|allow_run_sync<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-06-13_10-20_4451805bbaa1_remove_double_percents.Database" [color="black", fontcolor="black", label=<{Database|id<br ALIGN="LEFT"/>sqlalchemy_uri<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.Database" [color="black", fontcolor="black", label=<{Database|database_name<br ALIGN="LEFT"/>extra<br ALIGN="LEFT"/>force_ctas_schema<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>sqlalchemy_uri<br ALIGN="LEFT"/>verbose_name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.Database" [color="black", fontcolor="black", label=<{Database|database_name<br ALIGN="LEFT"/>extra<br ALIGN="LEFT"/>force_ctas_schema<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>sqlalchemy_uri<br ALIGN="LEFT"/>verbose_name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-09-11_21-49_5afa9079866a_serialize_schema_permissions_py.Database" [color="black", fontcolor="black", label=<{Database|database_name<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>verbose_name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.Database" [color="black", fontcolor="black", label=<{Database|database_name<br ALIGN="LEFT"/>extra<br ALIGN="LEFT"/>force_ctas_schema<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>sqlalchemy_uri<br ALIGN="LEFT"/>verbose_name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2020-04-29_09-24_620241d1153f_update_time_grain_sqla.Database" [color="black", fontcolor="black", label=<{Database|id<br ALIGN="LEFT"/>sqlalchemy_uri<br ALIGN="LEFT"/>|grains()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2020-09-24_12-04_3fbbc6e8d654_fix_data_access_permissions_for_virtual_.Database" [color="black", fontcolor="black", label=<{Database|database_name<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>verbose_name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2021-08-02_16-39_e323605f370a_fix_schemas_allowed_for_csv_upload.Database" [color="black", fontcolor="black", label=<{Database|extra<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2021-11-11_04-18_0ca9e5f1dacd_rename_to_schemas_allowed_for_file_.Database" [color="black", fontcolor="black", label=<{Database|extra<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.Database" [color="black", fontcolor="black", label=<{Database|database_name<br ALIGN="LEFT"/>encrypted_extra<br ALIGN="LEFT"/>extra<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>impersonate_user<br ALIGN="LEFT"/>password<br ALIGN="LEFT"/>server_cert<br ALIGN="LEFT"/>sqlalchemy_uri<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2023-08-02_15-23_0769ef90fddd_fix_schema_perm_for_datasets.Database" [color="black", fontcolor="black", label=<{Database|database_name<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.core.Database" [color="black", fontcolor="black", label=<{Database|allow_ctas<br ALIGN="LEFT"/>allow_cvas<br ALIGN="LEFT"/>allow_dml<br ALIGN="LEFT"/>allow_file_upload<br ALIGN="LEFT"/>allow_multi_catalog<br ALIGN="LEFT"/>allow_run_async<br ALIGN="LEFT"/>allows_cost_estimate<br ALIGN="LEFT"/>allows_subquery<br ALIGN="LEFT"/>allows_virtual_table_explore<br ALIGN="LEFT"/>backend<br ALIGN="LEFT"/>cache_timeout<br ALIGN="LEFT"/>catalog_cache_enabled<br ALIGN="LEFT"/>catalog_cache_timeout<br ALIGN="LEFT"/>configuration_method<br ALIGN="LEFT"/>connect_args<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>database_name<br ALIGN="LEFT"/>db_engine_spec<br ALIGN="LEFT"/>default_schemas<br ALIGN="LEFT"/>disable_data_preview<br ALIGN="LEFT"/>disable_drill_to_detail<br ALIGN="LEFT"/>driver<br ALIGN="LEFT"/>encrypted_extra<br ALIGN="LEFT"/>engine_information<br ALIGN="LEFT"/>explore_database_id<br ALIGN="LEFT"/>export_children : list<br ALIGN="LEFT"/>export_fields : list<br ALIGN="LEFT"/>expose_in_sqllab<br ALIGN="LEFT"/>external_url<br ALIGN="LEFT"/>extra<br ALIGN="LEFT"/>extra_import_fields : list<br ALIGN="LEFT"/>force_ctas_schema<br ALIGN="LEFT"/>function_names<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>impersonate_user<br ALIGN="LEFT"/>is_managed_externally<br ALIGN="LEFT"/>masked_encrypted_extra<br ALIGN="LEFT"/>metadata_cache_timeout<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>parameters<br ALIGN="LEFT"/>parameters_schema<br ALIGN="LEFT"/>password<br ALIGN="LEFT"/>quote_identifier<br ALIGN="LEFT"/>schema_cache_enabled<br ALIGN="LEFT"/>schema_cache_timeout<br ALIGN="LEFT"/>schema_options<br ALIGN="LEFT"/>select_as_create_table_as<br ALIGN="LEFT"/>server_cert<br ALIGN="LEFT"/>sql_url<br ALIGN="LEFT"/>sqlalchemy_uri<br ALIGN="LEFT"/>sqlalchemy_uri_decrypted<br ALIGN="LEFT"/>table_cache_enabled<br ALIGN="LEFT"/>table_cache_timeout<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>unique_name<br ALIGN="LEFT"/>url_object<br ALIGN="LEFT"/>verbose_name<br ALIGN="LEFT"/>|add_database_to_signature(func: Callable[..., None], args: list[Any]): list[Any]<br ALIGN="LEFT"/>apply_limit_to_sql(sql: str, limit: int, force: bool): str<br ALIGN="LEFT"/>compile_sqla_query(qry: Select, catalog: str \| None, schema: str \| None, is_virtual: bool): str<br ALIGN="LEFT"/>fetch_rows(cursor: Any, last: bool): list[tuple[Any, ...]] \| None<br ALIGN="LEFT"/>get_all_catalog_names(): set[str]<br ALIGN="LEFT"/>get_all_schema_names(): set[str]<br ALIGN="LEFT"/>get_all_table_names_in_schema(catalog: str \| None, schema: str): set[tuple[str, str, str \| None]]<br ALIGN="LEFT"/>get_all_view_names_in_schema(catalog: str \| None, schema: str): set[tuple[str, str, str \| None]]<br ALIGN="LEFT"/>get_columns(table: Table): list[ResultSetColumnType]<br ALIGN="LEFT"/>get_db_engine_spec(url: URL): builtins.type[db_engine_specs.BaseEngineSpec]<br ALIGN="LEFT"/>get_default_catalog(): str \| None<br ALIGN="LEFT"/>get_default_schema(catalog: str \| None): str \| None<br ALIGN="LEFT"/>get_default_schema_for_query(query: Query): str \| None<br ALIGN="LEFT"/>get_df(sql: str, catalog: str \| None, schema: str \| None, mutator: Callable[[pd.DataFrame], None] \| None): pd.DataFrame<br ALIGN="LEFT"/>get_dialect(): Dialect<br ALIGN="LEFT"/>get_effective_user(object_url: URL): str \| None<br ALIGN="LEFT"/>get_encrypted_extra(): dict[str, Any]<br ALIGN="LEFT"/>get_extra(): dict[str, Any]<br ALIGN="LEFT"/>get_foreign_keys(table: Table): list[dict[str, Any]]<br ALIGN="LEFT"/>get_indexes(table: Table): list[dict[str, Any]]<br ALIGN="LEFT"/>get_inspector(catalog: str \| None, schema: str \| None, ssh_tunnel: SSHTunnel \| None): Inspector<br ALIGN="LEFT"/>get_metrics(table: Table): list[MetricType]<br ALIGN="LEFT"/>get_oauth2_config(): OAuth2ClientConfig \| None<br ALIGN="LEFT"/>get_password_masked_url(masked_url: URL): URL<br ALIGN="LEFT"/>get_password_masked_url_from_uri(uri: str): URL<br ALIGN="LEFT"/>get_perm(): str<br ALIGN="LEFT"/>get_pk_constraint(table: Table): dict[str, Any]<br ALIGN="LEFT"/>get_raw_connection(catalog: str \| None, schema: str \| None, nullpool: bool, source: utils.QuerySource \| None): Connection<br ALIGN="LEFT"/>get_reserved_words(): set[str]<br ALIGN="LEFT"/>get_schema_access_for_file_upload(): set[str]<br ALIGN="LEFT"/>get_sqla_engine(catalog: str \| None, schema: str \| None, nullpool: bool, source: utils.QuerySource \| None, override_ssh_tunnel: SSHTunnel \| None): Engine<br ALIGN="LEFT"/>get_table(table: Table): SqlaTable<br ALIGN="LEFT"/>get_table_comment(table: Table): str \| None<br ALIGN="LEFT"/>grains(): tuple[TimeGrain, ...]<br ALIGN="LEFT"/>has_table(table: Table): bool<br ALIGN="LEFT"/>has_view(table: Table): bool<br ALIGN="LEFT"/>is_oauth2_enabled(): bool<br ALIGN="LEFT"/>load_into_dataframe(description: DbapiDescription, data: list[tuple[Any, ...]]): pd.DataFrame<br ALIGN="LEFT"/>make_sqla_column_compatible(sqla_col: ColumnElement, label: str \| None): ColumnElement<br ALIGN="LEFT"/>mutate_sql_based_on_config(sql_: str, is_split: bool): str<br ALIGN="LEFT"/>perm(): str<br ALIGN="LEFT"/>post_process_df(df: pd.DataFrame): pd.DataFrame<br ALIGN="LEFT"/>purge_oauth2_tokens(): None<br ALIGN="LEFT"/>safe_sqlalchemy_uri(): str<br ALIGN="LEFT"/>select_star(table: Table, limit: int, show_cols: bool, indent: bool, latest_partition: bool, cols: list[ResultSetColumnType] \| None): str<br ALIGN="LEFT"/>set_sqlalchemy_uri(uri: str): None<br ALIGN="LEFT"/>start_oauth2_dance(): None<br ALIGN="LEFT"/>update_params_from_encrypted_extra(params: dict[str, Any]): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.security.manager.DatabaseCatalogSchema" [color="black", fontcolor="black", label=<{DatabaseCatalogSchema|catalog : Optional[str]<br ALIGN="LEFT"/>database : str<br ALIGN="LEFT"/>schema : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.DatabaseChangeValidationError" [color="black", fontcolor="red", label=<{DatabaseChangeValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatabaseConnectionFailedError" [color="black", fontcolor="black", label=<{DatabaseConnectionFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.DatabaseConnectionSchema" [color="black", fontcolor="black", label=<{DatabaseConnectionSchema|allow_ctas : Boolean<br ALIGN="LEFT"/>allow_cvas : Boolean<br ALIGN="LEFT"/>allow_dml : Boolean<br ALIGN="LEFT"/>allow_file_upload : Boolean<br ALIGN="LEFT"/>allow_run_async : Boolean<br ALIGN="LEFT"/>backend : String<br ALIGN="LEFT"/>cache_timeout : Integer<br ALIGN="LEFT"/>configuration_method : String<br ALIGN="LEFT"/>database_name : String<br ALIGN="LEFT"/>driver : String<br ALIGN="LEFT"/>engine_information : Nested<br ALIGN="LEFT"/>expose_in_sqllab : Boolean<br ALIGN="LEFT"/>extra : String<br ALIGN="LEFT"/>force_ctas_schema : String<br ALIGN="LEFT"/>id : Integer<br ALIGN="LEFT"/>impersonate_user : Boolean<br ALIGN="LEFT"/>is_managed_externally : Boolean<br ALIGN="LEFT"/>masked_encrypted_extra : String<br ALIGN="LEFT"/>parameters : Dict<br ALIGN="LEFT"/>parameters_schema : Dict<br ALIGN="LEFT"/>server_cert : String<br ALIGN="LEFT"/>sqlalchemy_uri : String<br ALIGN="LEFT"/>ssh_tunnel : Nested<br ALIGN="LEFT"/>uuid : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatabaseCreateFailedError" [color="black", fontcolor="black", label=<{DatabaseCreateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.daos.database.DatabaseDAO" [color="black", fontcolor="black", label=<{DatabaseDAO|base_filter<br ALIGN="LEFT"/>|build_db_for_connection_test(server_cert: str, extra: str, impersonate_user: bool, encrypted_extra: str): Database<br ALIGN="LEFT"/>get_database_by_name(database_name: str): Database \| None<br ALIGN="LEFT"/>get_datasets(database_id: int, catalog: str \| None, schema: str \| None): list[SqlaTable]<br ALIGN="LEFT"/>get_related_objects(database_id: int): dict[str, Any]<br ALIGN="LEFT"/>get_ssh_tunnel(database_id: int): SSHTunnel \| None<br ALIGN="LEFT"/>update(item: Database \| None, attributes: dict[str, Any] \| None): Database<br ALIGN="LEFT"/>validate_uniqueness(database_name: str): bool<br ALIGN="LEFT"/>validate_update_uniqueness(database_id: int, database_name: str): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatabaseDeleteDatasetsExistFailedError" [color="black", fontcolor="black", label=<{DatabaseDeleteDatasetsExistFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatabaseDeleteFailedError" [color="black", fontcolor="black", label=<{DatabaseDeleteFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatabaseDeleteFailedReportsExistError" [color="black", fontcolor="black", label=<{DatabaseDeleteFailedReportsExistError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatabaseExistsValidationError" [color="black", fontcolor="red", label=<{DatabaseExistsValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatabaseExtraJSONValidationError" [color="black", fontcolor="red", label=<{DatabaseExtraJSONValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatabaseExtraValidationError" [color="black", fontcolor="red", label=<{DatabaseExtraValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.filters.DatabaseFilter" [color="black", fontcolor="black", label=<{DatabaseFilter|<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.databases.schemas.DatabaseFunctionNamesResponse" [color="black", fontcolor="black", label=<{DatabaseFunctionNamesResponse|function_names : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatabaseImportError" [color="black", fontcolor="black", label=<{DatabaseImportError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatabaseInvalidError" [color="black", fontcolor="black", label=<{DatabaseInvalidError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.DatabaseNotFound" [color="black", fontcolor="red", label=<{DatabaseNotFound|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatabaseNotFoundError" [color="black", fontcolor="black", label=<{DatabaseNotFoundError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.DatabaseNotFoundException" [color="black", fontcolor="red", label=<{DatabaseNotFoundException|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.chart.exceptions.DatabaseNotFoundValidationError" [color="black", fontcolor="red", label=<{DatabaseNotFoundValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.DatabaseNotFoundValidationError" [color="black", fontcolor="red", label=<{DatabaseNotFoundValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.DatabaseNotFoundValidationError" [color="black", fontcolor="black", label=<{DatabaseNotFoundValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatabaseOfflineError" [color="black", fontcolor="black", label=<{DatabaseOfflineError|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.DatabaseParametersSchemaMixin" [color="black", fontcolor="black", label=<{DatabaseParametersSchemaMixin|configuration_method : Enum<br ALIGN="LEFT"/>driver : String<br ALIGN="LEFT"/>engine : String<br ALIGN="LEFT"/>parameters : Dict<br ALIGN="LEFT"/>|build_sqlalchemy_uri(data: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.databases.schemas.DatabasePostSchema" [color="black", fontcolor="black", label=<{DatabasePostSchema|allow_ctas : Boolean<br ALIGN="LEFT"/>allow_cvas : Boolean<br ALIGN="LEFT"/>allow_dml : Boolean<br ALIGN="LEFT"/>allow_file_upload : Boolean<br ALIGN="LEFT"/>allow_run_async : Boolean<br ALIGN="LEFT"/>cache_timeout : Integer<br ALIGN="LEFT"/>database_name : String<br ALIGN="LEFT"/>expose_in_sqllab : Boolean<br ALIGN="LEFT"/>external_url : String<br ALIGN="LEFT"/>extra : String<br ALIGN="LEFT"/>force_ctas_schema : String<br ALIGN="LEFT"/>impersonate_user : Boolean<br ALIGN="LEFT"/>is_managed_externally : Boolean<br ALIGN="LEFT"/>masked_encrypted_extra : String<br ALIGN="LEFT"/>rename_encrypted_extra : NoneType<br ALIGN="LEFT"/>server_cert : String<br ALIGN="LEFT"/>sqlalchemy_uri : String<br ALIGN="LEFT"/>ssh_tunnel : Nested<br ALIGN="LEFT"/>uuid : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.DatabasePutSchema" [color="black", fontcolor="black", label=<{DatabasePutSchema|allow_ctas : Boolean<br ALIGN="LEFT"/>allow_cvas : Boolean<br ALIGN="LEFT"/>allow_dml : Boolean<br ALIGN="LEFT"/>allow_file_upload : Boolean<br ALIGN="LEFT"/>allow_run_async : Boolean<br ALIGN="LEFT"/>cache_timeout : Integer<br ALIGN="LEFT"/>database_name : String<br ALIGN="LEFT"/>expose_in_sqllab : Boolean<br ALIGN="LEFT"/>external_url : String<br ALIGN="LEFT"/>extra : String<br ALIGN="LEFT"/>force_ctas_schema : String<br ALIGN="LEFT"/>impersonate_user : Boolean<br ALIGN="LEFT"/>is_managed_externally : Boolean<br ALIGN="LEFT"/>masked_encrypted_extra : String<br ALIGN="LEFT"/>rename_encrypted_extra : NoneType<br ALIGN="LEFT"/>server_cert : String<br ALIGN="LEFT"/>sqlalchemy_uri : String<br ALIGN="LEFT"/>ssh_tunnel : Nested<br ALIGN="LEFT"/>uuid : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.DatabaseRelatedChart" [color="black", fontcolor="black", label=<{DatabaseRelatedChart|id : Integer<br ALIGN="LEFT"/>slice_name : String<br ALIGN="LEFT"/>viz_type : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.DatabaseRelatedCharts" [color="black", fontcolor="black", label=<{DatabaseRelatedCharts|count : Integer<br ALIGN="LEFT"/>result : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.DatabaseRelatedDashboard" [color="black", fontcolor="black", label=<{DatabaseRelatedDashboard|id : Integer<br ALIGN="LEFT"/>json_metadata : Dict<br ALIGN="LEFT"/>slug : String<br ALIGN="LEFT"/>title : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.DatabaseRelatedDashboards" [color="black", fontcolor="black", label=<{DatabaseRelatedDashboards|count : Integer<br ALIGN="LEFT"/>result : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.DatabaseRelatedObjectsResponse" [color="black", fontcolor="black", label=<{DatabaseRelatedObjectsResponse|charts : Nested<br ALIGN="LEFT"/>dashboards : Nested<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatabaseRequiredFieldValidationError" [color="black", fontcolor="red", label=<{DatabaseRequiredFieldValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.api.DatabaseRestApi" [color="black", fontcolor="black", label=<{DatabaseRestApi|add_columns : list<br ALIGN="LEFT"/>add_model_schema<br ALIGN="LEFT"/>allow_browser_login : bool<br ALIGN="LEFT"/>allowed_rel_fields : set<br ALIGN="LEFT"/>apispec_parameter_schemas : dict<br ALIGN="LEFT"/>base_filters : list<br ALIGN="LEFT"/>base_related_field_filters : dict<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>edit_columns : list<br ALIGN="LEFT"/>edit_model_schema<br ALIGN="LEFT"/>include_route_methods<br ALIGN="LEFT"/>list_columns : list<br ALIGN="LEFT"/>list_select_columns : list<br ALIGN="LEFT"/>max_page_size : int<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>openapi_spec_component_schemas : tuple<br ALIGN="LEFT"/>openapi_spec_methods<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>order_columns : list<br ALIGN="LEFT"/>related_field_filters : dict<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>search_columns : list<br ALIGN="LEFT"/>search_filters : dict<br ALIGN="LEFT"/>show_columns : list<br ALIGN="LEFT"/>|available(): Response<br ALIGN="LEFT"/>catalogs(pk: int): FlaskResponse<br ALIGN="LEFT"/>columnar_metadata(): Response<br ALIGN="LEFT"/>columnar_upload(pk: int): Response<br ALIGN="LEFT"/>csv_metadata(): Response<br ALIGN="LEFT"/>csv_upload(pk: int): Response<br ALIGN="LEFT"/>delete(pk: int): Response<br ALIGN="LEFT"/>delete_ssh_tunnel(pk: int): Response<br ALIGN="LEFT"/>excel_metadata(): Response<br ALIGN="LEFT"/>excel_upload(pk: int): Response<br ALIGN="LEFT"/>export(): Response<br ALIGN="LEFT"/>function_names(pk: int): Response<br ALIGN="LEFT"/>get(pk: int): Response<br ALIGN="LEFT"/>get_connection(pk: int): Response<br ALIGN="LEFT"/>import_(): Response<br ALIGN="LEFT"/>oauth2(): FlaskResponse<br ALIGN="LEFT"/>post(): FlaskResponse<br ALIGN="LEFT"/>put(pk: int): Response<br ALIGN="LEFT"/>related_objects(pk: int): Response<br ALIGN="LEFT"/>schemas(pk: int): FlaskResponse<br ALIGN="LEFT"/>schemas_access_for_file_upload(pk: int): Response<br ALIGN="LEFT"/>select_star(database: Database, table_name: str, schema_name: str \| None): FlaskResponse<br ALIGN="LEFT"/>table_extra_metadata(pk: int): FlaskResponse<br ALIGN="LEFT"/>table_extra_metadata_deprecated(database: Database, table_name: str, schema_name: str): FlaskResponse<br ALIGN="LEFT"/>table_metadata(pk: int): FlaskResponse<br ALIGN="LEFT"/>table_metadata_deprecated(database: Database, table_name: str, schema_name: str): FlaskResponse<br ALIGN="LEFT"/>tables(pk: int): FlaskResponse<br ALIGN="LEFT"/>test_connection(): FlaskResponse<br ALIGN="LEFT"/>validate_parameters(): FlaskResponse<br ALIGN="LEFT"/>validate_sql(pk: int): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.databases.schemas.DatabaseSSHTunnel" [color="black", fontcolor="black", label=<{DatabaseSSHTunnel|id : Integer<br ALIGN="LEFT"/>password : String<br ALIGN="LEFT"/>private_key : String<br ALIGN="LEFT"/>private_key_password : String<br ALIGN="LEFT"/>server_address : String<br ALIGN="LEFT"/>server_port : Integer<br ALIGN="LEFT"/>username : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.DatabaseSchema" [color="black", fontcolor="black", label=<{DatabaseSchema|allow_multi_catalog : Boolean<br ALIGN="LEFT"/>allows_cost_estimate : Boolean<br ALIGN="LEFT"/>allows_subquery : Boolean<br ALIGN="LEFT"/>allows_virtual_table_explore : Boolean<br ALIGN="LEFT"/>backend : String<br ALIGN="LEFT"/>disable_data_preview : Boolean<br ALIGN="LEFT"/>disable_drill_to_detail : Boolean<br ALIGN="LEFT"/>explore_database_id : Integer<br ALIGN="LEFT"/>id : Integer<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.queries.schemas.DatabaseSchema" [color="black", fontcolor="black", label=<{DatabaseSchema|database_name : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.DatabaseSchemaAccessForFileUploadResponse" [color="black", fontcolor="black", label=<{DatabaseSchemaAccessForFileUploadResponse|schemas : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatabaseSchemaUploadNotAllowed" [color="black", fontcolor="black", label=<{DatabaseSchemaUploadNotAllowed|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatabaseSecurityUnsafeError" [color="black", fontcolor="black", label=<{DatabaseSecurityUnsafeError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.DatabaseTablesResponse" [color="black", fontcolor="black", label=<{DatabaseTablesResponse|extra : Dict<br ALIGN="LEFT"/>type : String<br ALIGN="LEFT"/>value : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatabaseTablesUnexpectedError" [color="black", fontcolor="black", label=<{DatabaseTablesUnexpectedError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatabaseTestConnectionDriverError" [color="black", fontcolor="black", label=<{DatabaseTestConnectionDriverError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatabaseTestConnectionFailedError" [color="black", fontcolor="black", label=<{DatabaseTestConnectionFailedError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.DatabaseTestConnectionSchema" [color="black", fontcolor="black", label=<{DatabaseTestConnectionSchema|database_name : String<br ALIGN="LEFT"/>extra : String<br ALIGN="LEFT"/>impersonate_user : Boolean<br ALIGN="LEFT"/>masked_encrypted_extra : String<br ALIGN="LEFT"/>rename_encrypted_extra : NoneType<br ALIGN="LEFT"/>server_cert : String<br ALIGN="LEFT"/>sqlalchemy_uri : String<br ALIGN="LEFT"/>ssh_tunnel : Nested<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatabaseTestConnectionUnexpectedError" [color="black", fontcolor="black", label=<{DatabaseTestConnectionUnexpectedError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatabaseUpdateFailedError" [color="black", fontcolor="black", label=<{DatabaseUpdateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.filters.DatabaseUploadEnabledFilter" [color="black", fontcolor="black", label=<{DatabaseUploadEnabledFilter|arg_name : str<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatabaseUploadFailed" [color="black", fontcolor="black", label=<{DatabaseUploadFailed|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatabaseUploadNotSupported" [color="black", fontcolor="black", label=<{DatabaseUploadNotSupported|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatabaseUploadSaveMetadataFailed" [color="black", fontcolor="black", label=<{DatabaseUploadSaveMetadataFailed|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.core.DatabaseUserOAuth2Tokens" [color="black", fontcolor="black", label=<{DatabaseUserOAuth2Tokens|access_token<br ALIGN="LEFT"/>access_token_expiration<br ALIGN="LEFT"/>database<br ALIGN="LEFT"/>database_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>refresh_token<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.daos.database.DatabaseUserOAuth2TokensDAO" [color="black", fontcolor="black", label=<{DatabaseUserOAuth2TokensDAO|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.DatabaseValidateParametersSchema" [color="black", fontcolor="black", label=<{DatabaseValidateParametersSchema|catalog : Dict<br ALIGN="LEFT"/>configuration_method : Enum<br ALIGN="LEFT"/>database_name : String<br ALIGN="LEFT"/>driver : String<br ALIGN="LEFT"/>engine : String<br ALIGN="LEFT"/>extra : String<br ALIGN="LEFT"/>id : Integer<br ALIGN="LEFT"/>impersonate_user : Boolean<br ALIGN="LEFT"/>masked_encrypted_extra : String<br ALIGN="LEFT"/>parameters : Dict<br ALIGN="LEFT"/>rename_encrypted_extra : NoneType<br ALIGN="LEFT"/>server_cert : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.database.views.DatabaseView" [color="black", fontcolor="black", label=<{DatabaseView|class_permission_name : str<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>|list(): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.databend.DatabendBaseEngineSpec" [color="black", fontcolor="black", label=<{DatabendBaseEngineSpec|column_type_mappings : tuple<br ALIGN="LEFT"/>time_groupby_inline : bool<br ALIGN="LEFT"/>time_secondary_columns : bool<br ALIGN="LEFT"/>|convert_dttm(target_type: str, dttm: datetime, db_extra: dict[str, Any] \| None): str \| None<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.databend.DatabendConnectEngineSpec" [color="black", fontcolor="black", label=<{DatabendConnectEngineSpec|default_driver : str<br ALIGN="LEFT"/>encryption_parameters : dict<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>parameters_schema<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>|build_sqlalchemy_uri(parameters: BasicParametersType): str<br ALIGN="LEFT"/>default_port(interface: str, secure: bool): int<br ALIGN="LEFT"/>get_datatype(type_code: str): str<br ALIGN="LEFT"/>get_dbapi_exception_mapping(): dict[type[Exception], type[Exception]]<br ALIGN="LEFT"/>get_dbapi_mapped_exception(exception: Exception): Exception<br ALIGN="LEFT"/>get_function_names(database: Database): list[str]<br ALIGN="LEFT"/>get_parameters_from_uri(uri: str): BasicParametersType<br ALIGN="LEFT"/>validate_parameters(properties: BasicPropertiesType): list[SupersetError]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.databend.DatabendEngineSpec" [color="black", fontcolor="black", label=<{DatabendEngineSpec|engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>supports_file_upload : bool<br ALIGN="LEFT"/>|get_dbapi_exception_mapping(): dict[type[Exception], type[Exception]]<br ALIGN="LEFT"/>get_dbapi_mapped_exception(exception: Exception): Exception<br ALIGN="LEFT"/>get_function_names(database: Database): list[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.databend.DatabendParametersSchema" [color="black", fontcolor="black", label=<{DatabendParametersSchema|database : String<br ALIGN="LEFT"/>encryption : Boolean<br ALIGN="LEFT"/>host : String<br ALIGN="LEFT"/>password : String<br ALIGN="LEFT"/>port : Integer<br ALIGN="LEFT"/>query : Dict<br ALIGN="LEFT"/>username : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.databricks.DatabricksBaseEngineSpec" [color="black", fontcolor="black", label=<{DatabricksBaseEngineSpec|<br ALIGN="LEFT"/>|convert_dttm(target_type: str, dttm: datetime, db_extra: dict[str, Any] \| None): str \| None<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.databricks.DatabricksBaseParametersType" [color="black", fontcolor="black", label=<{DatabricksBaseParametersType|access_token : str<br ALIGN="LEFT"/>encryption : bool<br ALIGN="LEFT"/>host : str<br ALIGN="LEFT"/>port : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.databricks.DatabricksBaseSchema" [color="black", fontcolor="black", label=<{DatabricksBaseSchema|access_token : String<br ALIGN="LEFT"/>encryption : Boolean<br ALIGN="LEFT"/>host : String<br ALIGN="LEFT"/>port : Integer<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.databricks.DatabricksDynamicBaseEngineSpec" [color="black", fontcolor="black", label=<{DatabricksDynamicBaseEngineSpec|context_key_mapping : dict<br ALIGN="LEFT"/>default_driver : str<br ALIGN="LEFT"/>encryption_parameters : dict<br ALIGN="LEFT"/>required_parameters : set<br ALIGN="LEFT"/>|extract_errors(ex: Exception, context: dict[str, Any] \| None): list[SupersetError]<br ALIGN="LEFT"/>get_extra_params(database: Database): dict[str, Any]<br ALIGN="LEFT"/>get_table_names(database: Database, inspector: Inspector, schema: str \| None): set[str]<br ALIGN="LEFT"/>validate_parameters(properties: Union[DatabricksNativePropertiesType, DatabricksPythonConnectorPropertiesType]): list[SupersetError]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.databricks.DatabricksHiveEngineSpec" [color="black", fontcolor="black", label=<{DatabricksHiveEngineSpec|default_driver : str<br ALIGN="LEFT"/>drivers : dict<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.databricks.DatabricksNativeEngineSpec" [color="black", fontcolor="black", label=<{DatabricksNativeEngineSpec|context_key_mapping : dict<br ALIGN="LEFT"/>default_driver : str<br ALIGN="LEFT"/>drivers : dict<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>parameters_schema<br ALIGN="LEFT"/>properties_schema<br ALIGN="LEFT"/>required_parameters<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>supports_catalog : bool<br ALIGN="LEFT"/>supports_dynamic_catalog : bool<br ALIGN="LEFT"/>supports_dynamic_schema : bool<br ALIGN="LEFT"/>|build_sqlalchemy_uri(parameters: DatabricksNativeParametersType): str<br ALIGN="LEFT"/>get_catalog_names(database: Database, inspector: Inspector): set[str]<br ALIGN="LEFT"/>get_default_catalog(database: Database): str \| None<br ALIGN="LEFT"/>get_parameters_from_uri(uri: str): DatabricksNativeParametersType<br ALIGN="LEFT"/>get_prequeries(database: Database, catalog: str \| None, schema: str \| None): list[str]<br ALIGN="LEFT"/>parameters_json_schema(): Any<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.databricks.DatabricksNativeParametersType" [color="black", fontcolor="black", label=<{DatabricksNativeParametersType|database : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.databricks.DatabricksNativePropertiesSchema" [color="black", fontcolor="black", label=<{DatabricksNativePropertiesSchema|http_path : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.databricks.DatabricksNativePropertiesType" [color="black", fontcolor="black", label=<{DatabricksNativePropertiesType|extra : str<br ALIGN="LEFT"/>parameters<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.databricks.DatabricksNativeSchema" [color="black", fontcolor="black", label=<{DatabricksNativeSchema|database : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.databricks.DatabricksODBCEngineSpec" [color="black", fontcolor="black", label=<{DatabricksODBCEngineSpec|default_driver : str<br ALIGN="LEFT"/>drivers : dict<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.databricks.DatabricksPythonConnectorEngineSpec" [color="black", fontcolor="black", label=<{DatabricksPythonConnectorEngineSpec|context_key_mapping : dict<br ALIGN="LEFT"/>default_driver : str<br ALIGN="LEFT"/>drivers : dict<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>parameters_schema<br ALIGN="LEFT"/>required_parameters<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>supports_catalog : bool<br ALIGN="LEFT"/>supports_dynamic_catalog : bool<br ALIGN="LEFT"/>supports_dynamic_schema : bool<br ALIGN="LEFT"/>|adjust_engine_params(uri: URL, connect_args: dict[str, Any], catalog: str \| None, schema: str \| None): tuple[URL, dict[str, Any]]<br ALIGN="LEFT"/>build_sqlalchemy_uri(parameters: DatabricksPythonConnectorParametersType): str<br ALIGN="LEFT"/>get_catalog_names(database: Database, inspector: Inspector): set[str]<br ALIGN="LEFT"/>get_default_catalog(database: Database): str \| None<br ALIGN="LEFT"/>get_parameters_from_uri(uri: str): DatabricksPythonConnectorParametersType<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.databricks.DatabricksPythonConnectorParametersType" [color="black", fontcolor="black", label=<{DatabricksPythonConnectorParametersType|default_catalog : str<br ALIGN="LEFT"/>default_schema : str<br ALIGN="LEFT"/>http_path_field : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.databricks.DatabricksPythonConnectorPropertiesType" [color="black", fontcolor="black", label=<{DatabricksPythonConnectorPropertiesType|extra : str<br ALIGN="LEFT"/>parameters<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.databricks.DatabricksPythonConnectorSchema" [color="black", fontcolor="black", label=<{DatabricksPythonConnectorSchema|default_catalog : String<br ALIGN="LEFT"/>default_schema : String<br ALIGN="LEFT"/>http_path_field : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-07-05_15-48_409c7b420ab0_add_created_by_fk_as_owner.Dataset" [color="black", fontcolor="black", label=<{Dataset|created_by_fk<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.DatasetAccessDeniedError" [color="black", fontcolor="black", label=<{DatasetAccessDeniedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.explore.exceptions.DatasetAccessDeniedError" [color="black", fontcolor="black", label=<{DatasetAccessDeniedError|datasource_id : Optional[int]<br ALIGN="LEFT"/>datasource_type : Optional[str]<br ALIGN="LEFT"/>message : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.datasets.schemas.DatasetCacheWarmUpRequestSchema" [color="black", fontcolor="black", label=<{DatasetCacheWarmUpRequestSchema|dashboard_id : Integer<br ALIGN="LEFT"/>db_name : String<br ALIGN="LEFT"/>extra_filters : String<br ALIGN="LEFT"/>table_name : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.datasets.schemas.DatasetCacheWarmUpResponseSchema" [color="black", fontcolor="black", label=<{DatasetCacheWarmUpResponseSchema|result : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.datasets.schemas.DatasetCacheWarmUpResponseSingleSchema" [color="black", fontcolor="black", label=<{DatasetCacheWarmUpResponseSingleSchema|chart_id : Integer<br ALIGN="LEFT"/>viz_error : String<br ALIGN="LEFT"/>viz_status : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.datasets.filters.DatasetCertifiedFilter" [color="black", fontcolor="black", label=<{DatasetCertifiedFilter|arg_name : str<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: bool): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.daos.dataset.DatasetColumnDAO" [color="black", fontcolor="black", label=<{DatasetColumnDAO|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.columns.exceptions.DatasetColumnDeleteFailedError" [color="black", fontcolor="black", label=<{DatasetColumnDeleteFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.columns.exceptions.DatasetColumnForbiddenError" [color="black", fontcolor="black", label=<{DatasetColumnForbiddenError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.columns.exceptions.DatasetColumnNotFoundError" [color="black", fontcolor="black", label=<{DatasetColumnNotFoundError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.DatasetColumnNotFoundValidationError" [color="black", fontcolor="red", label=<{DatasetColumnNotFoundValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.DatasetColumnsDuplicateValidationError" [color="black", fontcolor="red", label=<{DatasetColumnsDuplicateValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.DatasetColumnsExistsValidationError" [color="black", fontcolor="red", label=<{DatasetColumnsExistsValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.datasets.schemas.DatasetColumnsPutSchema" [color="black", fontcolor="black", label=<{DatasetColumnsPutSchema|advanced_data_type : String<br ALIGN="LEFT"/>column_name : String<br ALIGN="LEFT"/>description : String<br ALIGN="LEFT"/>expression : String<br ALIGN="LEFT"/>extra : String<br ALIGN="LEFT"/>filterable : Boolean<br ALIGN="LEFT"/>groupby : Boolean<br ALIGN="LEFT"/>id : Integer<br ALIGN="LEFT"/>is_active : Boolean<br ALIGN="LEFT"/>is_dttm : Boolean<br ALIGN="LEFT"/>python_date_format : String<br ALIGN="LEFT"/>type : String<br ALIGN="LEFT"/>uuid : UUID<br ALIGN="LEFT"/>verbose_name : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.datasets.columns.api.DatasetColumnsRestApi" [color="black", fontcolor="black", label=<{DatasetColumnsRestApi|allow_browser_login : bool<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>include_route_methods : set<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>|delete(pk: int, column_id: int): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.DatasetCreateFailedError" [color="black", fontcolor="black", label=<{DatasetCreateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.daos.dataset.DatasetDAO" [color="black", fontcolor="black", label=<{DatasetDAO|base_filter<br ALIGN="LEFT"/>|find_dataset_column(dataset_id: int, column_id: int): TableColumn \| None<br ALIGN="LEFT"/>find_dataset_metric(dataset_id: int, metric_id: int): SqlMetric \| None<br ALIGN="LEFT"/>get_database_by_id(database_id: int): Database \| None<br ALIGN="LEFT"/>get_related_objects(database_id: int): dict[str, Any]<br ALIGN="LEFT"/>get_table_by_name(database_id: int, table_name: str): SqlaTable \| None<br ALIGN="LEFT"/>update(item: SqlaTable \| None, attributes: dict[str, Any] \| None): SqlaTable<br ALIGN="LEFT"/>update_columns(model: SqlaTable, property_columns: list[dict[str, Any]], override_columns: bool): None<br ALIGN="LEFT"/>update_metrics(model: SqlaTable, property_metrics: list[dict[str, Any]]): None<br ALIGN="LEFT"/>validate_columns_exist(dataset_id: int, columns_ids: list[int]): bool<br ALIGN="LEFT"/>validate_columns_uniqueness(dataset_id: int, columns_names: list[str]): bool<br ALIGN="LEFT"/>validate_metrics_exist(dataset_id: int, metrics_ids: list[int]): bool<br ALIGN="LEFT"/>validate_metrics_uniqueness(dataset_id: int, metrics_names: list[str]): bool<br ALIGN="LEFT"/>validate_python_date_format(dt_format: str): bool<br ALIGN="LEFT"/>validate_table_exists(database: Database, table: Table): bool<br ALIGN="LEFT"/>validate_uniqueness(database: Database, table: Table, dataset_id: int \| None): bool<br ALIGN="LEFT"/>validate_update_uniqueness(database: Database, table: Table, dataset_id: int): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.DatasetDataAccessIsNotAllowed" [color="black", fontcolor="red", label=<{DatasetDataAccessIsNotAllowed|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.DatasetDeleteFailedError" [color="black", fontcolor="black", label=<{DatasetDeleteFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.DatasetDuplicateFailedError" [color="black", fontcolor="black", label=<{DatasetDuplicateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.datasets.schemas.DatasetDuplicateSchema" [color="black", fontcolor="black", label=<{DatasetDuplicateSchema|base_model_id : Integer<br ALIGN="LEFT"/>table_name : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.datasource.views.DatasetEditor" [color="black", fontcolor="black", label=<{DatasetEditor|class_permission_name : str<br ALIGN="LEFT"/>route_base : str<br ALIGN="LEFT"/>|root(): FlaskResponse<br ALIGN="LEFT"/>show(pk: int): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.DatasetExistsValidationError" [color="black", fontcolor="red", label=<{DatasetExistsValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.DatasetForbiddenDataURI" [color="black", fontcolor="black", label=<{DatasetForbiddenDataURI|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.DatasetForbiddenError" [color="black", fontcolor="black", label=<{DatasetForbiddenError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.DatasetImportError" [color="black", fontcolor="black", label=<{DatasetImportError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.DatasetInvalidError" [color="black", fontcolor="black", label=<{DatasetInvalidError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.DatasetInvalidPermissionEvaluationException" [color="black", fontcolor="red", label=<{DatasetInvalidPermissionEvaluationException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.datasets.filters.DatasetIsNullOrEmptyFilter" [color="black", fontcolor="black", label=<{DatasetIsNullOrEmptyFilter|arg_name : str<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: bool): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.daos.dataset.DatasetMetricDAO" [color="black", fontcolor="black", label=<{DatasetMetricDAO|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.metrics.exceptions.DatasetMetricDeleteFailedError" [color="black", fontcolor="black", label=<{DatasetMetricDeleteFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.metrics.exceptions.DatasetMetricForbiddenError" [color="black", fontcolor="black", label=<{DatasetMetricForbiddenError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.metrics.exceptions.DatasetMetricNotFoundError" [color="black", fontcolor="black", label=<{DatasetMetricNotFoundError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.datasets.metrics.api.DatasetMetricRestApi" [color="black", fontcolor="black", label=<{DatasetMetricRestApi|allow_browser_login : bool<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>include_route_methods : set<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>|delete(pk: int, metric_id: int): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.DatasetMetricsDuplicateValidationError" [color="black", fontcolor="red", label=<{DatasetMetricsDuplicateValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.DatasetMetricsExistsValidationError" [color="black", fontcolor="red", label=<{DatasetMetricsExistsValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.DatasetMetricsNotFoundValidationError" [color="black", fontcolor="red", label=<{DatasetMetricsNotFoundValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.datasets.schemas.DatasetMetricsPutSchema" [color="black", fontcolor="black", label=<{DatasetMetricsPutSchema|currency : String<br ALIGN="LEFT"/>d3format : String<br ALIGN="LEFT"/>description : String<br ALIGN="LEFT"/>expression : String<br ALIGN="LEFT"/>extra : String<br ALIGN="LEFT"/>id : Integer<br ALIGN="LEFT"/>metric_name : String<br ALIGN="LEFT"/>metric_type : String<br ALIGN="LEFT"/>uuid : UUID<br ALIGN="LEFT"/>verbose_name : String<br ALIGN="LEFT"/>warning_text : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.DatasetNotFoundError" [color="black", fontcolor="black", label=<{DatasetNotFoundError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.datasets.schemas.DatasetPostSchema" [color="black", fontcolor="black", label=<{DatasetPostSchema|always_filter_main_dttm : Boolean<br ALIGN="LEFT"/>catalog : String<br ALIGN="LEFT"/>database : Integer<br ALIGN="LEFT"/>external_url : String<br ALIGN="LEFT"/>is_managed_externally : Boolean<br ALIGN="LEFT"/>normalize_columns : Boolean<br ALIGN="LEFT"/>owners : List<br ALIGN="LEFT"/>schema : String<br ALIGN="LEFT"/>sql : String<br ALIGN="LEFT"/>table_name : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.datasets.schemas.DatasetPutSchema" [color="black", fontcolor="black", label=<{DatasetPutSchema|always_filter_main_dttm : Boolean<br ALIGN="LEFT"/>cache_timeout : Integer<br ALIGN="LEFT"/>catalog : String<br ALIGN="LEFT"/>columns : List<br ALIGN="LEFT"/>database_id : Integer<br ALIGN="LEFT"/>default_endpoint : String<br ALIGN="LEFT"/>description : String<br ALIGN="LEFT"/>external_url : String<br ALIGN="LEFT"/>extra : String<br ALIGN="LEFT"/>fetch_values_predicate : String<br ALIGN="LEFT"/>filter_select_enabled : Boolean<br ALIGN="LEFT"/>is_managed_externally : Boolean<br ALIGN="LEFT"/>is_sqllab_view : Boolean<br ALIGN="LEFT"/>main_dttm_col : String<br ALIGN="LEFT"/>metrics : List<br ALIGN="LEFT"/>normalize_columns : Boolean<br ALIGN="LEFT"/>offset : Integer<br ALIGN="LEFT"/>owners : List<br ALIGN="LEFT"/>schema : String<br ALIGN="LEFT"/>sql : String<br ALIGN="LEFT"/>table_name : String<br ALIGN="LEFT"/>template_params : String<br ALIGN="LEFT"/>|handle_error(error: ValidationError, data: dict[str, Any]): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.DatasetRefreshFailedError" [color="black", fontcolor="black", label=<{DatasetRefreshFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.datasets.schemas.DatasetRelatedChart" [color="black", fontcolor="black", label=<{DatasetRelatedChart|id : Integer<br ALIGN="LEFT"/>slice_name : String<br ALIGN="LEFT"/>viz_type : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.datasets.schemas.DatasetRelatedCharts" [color="black", fontcolor="black", label=<{DatasetRelatedCharts|count : Integer<br ALIGN="LEFT"/>result : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.datasets.schemas.DatasetRelatedDashboard" [color="black", fontcolor="black", label=<{DatasetRelatedDashboard|id : Integer<br ALIGN="LEFT"/>json_metadata : Dict<br ALIGN="LEFT"/>slug : String<br ALIGN="LEFT"/>title : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.datasets.schemas.DatasetRelatedDashboards" [color="black", fontcolor="black", label=<{DatasetRelatedDashboards|count : Integer<br ALIGN="LEFT"/>result : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.datasets.schemas.DatasetRelatedObjectsResponse" [color="black", fontcolor="black", label=<{DatasetRelatedObjectsResponse|charts : Nested<br ALIGN="LEFT"/>dashboards : Nested<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.datasets.api.DatasetRestApi" [color="black", fontcolor="black", label=<{DatasetRestApi|add_columns : list<br ALIGN="LEFT"/>add_model_schema<br ALIGN="LEFT"/>allow_browser_login : bool<br ALIGN="LEFT"/>allowed_distinct_fields : set<br ALIGN="LEFT"/>allowed_rel_fields : set<br ALIGN="LEFT"/>apispec_parameter_schemas : dict<br ALIGN="LEFT"/>base_filters : list<br ALIGN="LEFT"/>base_related_field_filters : dict<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>duplicate_model_schema<br ALIGN="LEFT"/>edit_columns : list<br ALIGN="LEFT"/>edit_model_schema<br ALIGN="LEFT"/>include_route_methods<br ALIGN="LEFT"/>list_columns : list<br ALIGN="LEFT"/>list_outer_default_load : bool<br ALIGN="LEFT"/>list_select_columns : list<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>openapi_spec_component_schemas : tuple<br ALIGN="LEFT"/>openapi_spec_methods<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>order_columns : list<br ALIGN="LEFT"/>related_field_filters : dict<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>search_columns : list<br ALIGN="LEFT"/>search_filters : dict<br ALIGN="LEFT"/>show_columns : list<br ALIGN="LEFT"/>show_outer_default_load : bool<br ALIGN="LEFT"/>show_select_columns : list<br ALIGN="LEFT"/>|bulk_delete(): Response<br ALIGN="LEFT"/>delete(pk: int): Response<br ALIGN="LEFT"/>duplicate(): Response<br ALIGN="LEFT"/>export(): Response<br ALIGN="LEFT"/>get(pk: int): Response<br ALIGN="LEFT"/>get_or_create_dataset(): Response<br ALIGN="LEFT"/>import_(): Response<br ALIGN="LEFT"/>post(): Response<br ALIGN="LEFT"/>put(pk: int): Response<br ALIGN="LEFT"/>refresh(pk: int): Response<br ALIGN="LEFT"/>related_objects(pk: int): Response<br ALIGN="LEFT"/>render_dataset_fields(data: dict[str, Any], processor: BaseTemplateProcessor): dict[str, Any]<br ALIGN="LEFT"/>warm_up_cache(): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.DatasetSamplesFailedError" [color="black", fontcolor="black", label=<{DatasetSamplesFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.explore.schemas.DatasetSchema" [color="black", fontcolor="black", label=<{DatasetSchema|cache_timeout : Integer<br ALIGN="LEFT"/>column_formats : Dict<br ALIGN="LEFT"/>columns : List<br ALIGN="LEFT"/>currency_formats : Dict<br ALIGN="LEFT"/>database : Dict<br ALIGN="LEFT"/>datasource_name : String<br ALIGN="LEFT"/>default_endpoint : String<br ALIGN="LEFT"/>description : String<br ALIGN="LEFT"/>edit_url : String<br ALIGN="LEFT"/>extra : Dict<br ALIGN="LEFT"/>fetch_values_predicate : String<br ALIGN="LEFT"/>filter_select : Boolean<br ALIGN="LEFT"/>filter_select_enabled : Boolean<br ALIGN="LEFT"/>granularity_sqla : List<br ALIGN="LEFT"/>health_check_message : String<br ALIGN="LEFT"/>id : Integer<br ALIGN="LEFT"/>is_sqllab_view : Boolean<br ALIGN="LEFT"/>main_dttm_col : String<br ALIGN="LEFT"/>metrics : List<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>offset : Integer<br ALIGN="LEFT"/>order_by_choices : List<br ALIGN="LEFT"/>owners : List<br ALIGN="LEFT"/>params : Dict<br ALIGN="LEFT"/>perm : String<br ALIGN="LEFT"/>schema : String<br ALIGN="LEFT"/>select_star : String<br ALIGN="LEFT"/>sql : String<br ALIGN="LEFT"/>table_name : String<br ALIGN="LEFT"/>template_params : Dict<br ALIGN="LEFT"/>time_grain_sqla : List<br ALIGN="LEFT"/>type : String<br ALIGN="LEFT"/>uid : String<br ALIGN="LEFT"/>verbose_map : Dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.DatasetUpdateFailedError" [color="black", fontcolor="black", label=<{DatasetUpdateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tags.models.DatasetUpdater" [color="black", fontcolor="black", label=<{DatasetUpdater|object_type : str<br ALIGN="LEFT"/>|get_owners_ids(target: SqlaTable): list[int]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-07-05_15-48_409c7b420ab0_add_created_by_fk_as_owner.DatasetUser" [color="black", fontcolor="black", label=<{DatasetUser|dataset_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.DatasetValidationError" [color="black", fontcolor="black", label=<{DatasetValidationError|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.warm_up_cache.DatasetWarmUpCacheCommand" [color="black", fontcolor="black", label=<{DatasetWarmUpCacheCommand|<br ALIGN="LEFT"/>|run(): list[dict[str, Any]]<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.cachekeys.schemas.Datasource" [color="black", fontcolor="black", label=<{Datasource|catalog : String<br ALIGN="LEFT"/>database_name : String<br ALIGN="LEFT"/>datasource_name : String<br ALIGN="LEFT"/>datasource_type : String<br ALIGN="LEFT"/>schema : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.datasource.views.Datasource" [color="black", fontcolor="black", label=<{Datasource|<br ALIGN="LEFT"/>|external_metadata(datasource_type: str, datasource_id: int): FlaskResponse<br ALIGN="LEFT"/>external_metadata_by_name(): FlaskResponse<br ALIGN="LEFT"/>get(datasource_type: str, datasource_id: int): FlaskResponse<br ALIGN="LEFT"/>samples(): FlaskResponse<br ALIGN="LEFT"/>save(): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.daos.datasource.DatasourceDAO" [color="black", fontcolor="black", label=<{DatasourceDAO|sources : dict[Union[DatasourceType, str], type[Datasource]]<br ALIGN="LEFT"/>|get_datasource(datasource_type: Union[DatasourceType, str], datasource_id: int): Datasource<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.core.DatasourceDict" [color="black", fontcolor="black", label=<{DatasourceDict|id : int<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.base.DatasourceFilter" [color="black", fontcolor="black", label=<{DatasourceFilter|<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.explore.exceptions.DatasourceForbiddenError" [color="black", fontcolor="black", label=<{DatasourceForbiddenError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.connectors.sqla.models.DatasourceKind" [color="black", fontcolor="black", label=<{DatasourceKind|PHYSICAL : str<br ALIGN="LEFT"/>VIRTUAL : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.core.DatasourceName" [color="black", fontcolor="black", label=<{DatasourceName|catalog : str \| None<br ALIGN="LEFT"/>schema : str<br ALIGN="LEFT"/>table : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.daos.exceptions.DatasourceNotFound" [color="black", fontcolor="red", label=<{DatasourceNotFound|message : str<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.exceptions.DatasourceNotFoundValidationError" [color="black", fontcolor="red", label=<{DatasourceNotFoundValidationError|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.datasource.api.DatasourceRestApi" [color="black", fontcolor="black", label=<{DatasourceRestApi|allow_browser_login : bool<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>|get_column_values(datasource_type: str, datasource_id: int, column_name: str): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.explore.exceptions.DatasourceSamplesFailedError" [color="black", fontcolor="black", label=<{DatasourceSamplesFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.core.DatasourceType" [color="black", fontcolor="black", label=<{DatasourceType|DATASET : str<br ALIGN="LEFT"/>QUERY : str<br ALIGN="LEFT"/>SAVEDQUERY : str<br ALIGN="LEFT"/>TABLE : str<br ALIGN="LEFT"/>VIEW : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.exceptions.DatasourceTypeInvalidError" [color="black", fontcolor="red", label=<{DatasourceTypeInvalidError|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.daos.exceptions.DatasourceTypeNotSupportedError" [color="black", fontcolor="red", label=<{DatasourceTypeNotSupportedError|message : str<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.chart.exceptions.DatasourceTypeUpdateRequiredValidationError" [color="black", fontcolor="red", label=<{DatasourceTypeUpdateRequiredValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.sql_types.presto_sql_types.Date" [color="black", fontcolor="black", label=<{Date|impl : DATE<br ALIGN="LEFT"/>|process_bind_param(value: str, dialect: Dialect): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.core.DateColumn" [color="black", fontcolor="black", label=<{DateColumn|col_label : str<br ALIGN="LEFT"/>offset : int \| None<br ALIGN="LEFT"/>time_shift : str \| None<br ALIGN="LEFT"/>timestamp_format : str \| None<br ALIGN="LEFT"/>|get_legacy_time_column(timestamp_format: str \| None, offset: int \| None, time_shift: str \| None): DateColumn<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.date_parser.DateRangeMigration" [color="black", fontcolor="black", label=<{DateRangeMigration|x_dateunit : str<br ALIGN="LEFT"/>x_dateunit_in_since : str<br ALIGN="LEFT"/>x_dateunit_in_until : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.db2.Db2EngineSpec" [color="black", fontcolor="black", label=<{Db2EngineSpec|engine : str<br ALIGN="LEFT"/>engine_aliases : set<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>force_column_alias_quotes : bool<br ALIGN="LEFT"/>limit_method<br ALIGN="LEFT"/>max_column_name_length : int<br ALIGN="LEFT"/>supports_dynamic_schema : bool<br ALIGN="LEFT"/>|epoch_to_dttm(): str<br ALIGN="LEFT"/>get_prequeries(database: Database, catalog: Union[str, None], schema: Union[str, None]): list[str]<br ALIGN="LEFT"/>get_table_comment(inspector: Inspector, table: Table): Optional[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.extensions.metadb.Decimal" [color="black", fontcolor="black", label=<{Decimal|db_api_type : str<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.viz.DeckArc" [color="black", fontcolor="black", label=<{DeckArc|is_timeseries : bool<br ALIGN="LEFT"/>spatial_control_keys : list<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>get_properties(data: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>query_obj(): QueryObjectDict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.viz.DeckContour" [color="black", fontcolor="black", label=<{DeckContour|metric_label : NoneType<br ALIGN="LEFT"/>spatial_control_keys : list<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>get_properties(data: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.viz.DeckGLMultiLayer" [color="black", fontcolor="black", label=<{DeckGLMultiLayer|credits : str<br ALIGN="LEFT"/>is_timeseries : bool<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>query_obj(): QueryObjectDict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.viz.DeckGeoJson" [color="black", fontcolor="black", label=<{DeckGeoJson|verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_properties(data: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>query_obj(): QueryObjectDict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.viz.DeckGrid" [color="black", fontcolor="black", label=<{DeckGrid|metric_label : NoneType<br ALIGN="LEFT"/>spatial_control_keys : list<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>get_properties(data: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.viz.DeckHeatmap" [color="black", fontcolor="black", label=<{DeckHeatmap|metric_label : NoneType<br ALIGN="LEFT"/>spatial_control_keys : list<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>get_properties(data: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.viz.DeckHex" [color="black", fontcolor="black", label=<{DeckHex|metric_label : NoneType<br ALIGN="LEFT"/>spatial_control_keys : list<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>get_properties(data: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.viz.DeckPathViz" [color="black", fontcolor="black", label=<{DeckPathViz|deck_viz_key : str<br ALIGN="LEFT"/>deser_map : dict<br ALIGN="LEFT"/>has_metrics : bool<br ALIGN="LEFT"/>is_timeseries : bool<br ALIGN="LEFT"/>metric<br ALIGN="LEFT"/>metric_label : NoneType<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>get_properties(data: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>query_obj(): QueryObjectDict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.viz.DeckPolygon" [color="black", fontcolor="black", label=<{DeckPolygon|deck_viz_key : str<br ALIGN="LEFT"/>elevation<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_metrics(): list[str]<br ALIGN="LEFT"/>get_properties(data: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>query_obj(): QueryObjectDict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.viz.DeckScatterViz" [color="black", fontcolor="black", label=<{DeckScatterViz|dim<br ALIGN="LEFT"/>fixed_value : NoneType<br ALIGN="LEFT"/>is_timeseries : bool<br ALIGN="LEFT"/>metric : NoneType<br ALIGN="LEFT"/>metric_label : NoneType<br ALIGN="LEFT"/>point_radius_fixed<br ALIGN="LEFT"/>spatial_control_keys : list<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>get_metrics(): list[str]<br ALIGN="LEFT"/>get_properties(data: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>query_obj(): QueryObjectDict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.viz.DeckScreengrid" [color="black", fontcolor="black", label=<{DeckScreengrid|is_timeseries : bool<br ALIGN="LEFT"/>metric_label : NoneType<br ALIGN="LEFT"/>spatial_control_keys : list<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>get_properties(data: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>query_obj(): QueryObjectDict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.logging_configurator.DefaultLoggingConfigurator" [color="black", fontcolor="black", label=<{DefaultLoggingConfigurator|<br ALIGN="LEFT"/>|configure_logging(app_config: flask.config.Config, debug_mode: bool): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.chart.unfave.DelFavoriteChartCommand" [color="black", fontcolor="black", label=<{DelFavoriteChartCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.unfave.DelFavoriteDashboardCommand" [color="black", fontcolor="black", label=<{DelFavoriteDashboardCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.annotation_layer.annotation.delete.DeleteAnnotationCommand" [color="black", fontcolor="black", label=<{DeleteAnnotationCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.annotation_layer.delete.DeleteAnnotationLayerCommand" [color="black", fontcolor="black", label=<{DeleteAnnotationLayerCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.chart.delete.DeleteChartCommand" [color="black", fontcolor="black", label=<{DeleteChartCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.css.delete.DeleteCssTemplateCommand" [color="black", fontcolor="black", label=<{DeleteCssTemplateCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.delete.DeleteDashboardCommand" [color="black", fontcolor="black", label=<{DeleteDashboardCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.database.delete.DeleteDatabaseCommand" [color="black", fontcolor="black", label=<{DeleteDatabaseCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dataset.columns.delete.DeleteDatasetColumnCommand" [color="black", fontcolor="black", label=<{DeleteDatasetColumnCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dataset.delete.DeleteDatasetCommand" [color="black", fontcolor="black", label=<{DeleteDatasetCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dataset.metrics.delete.DeleteDatasetMetricCommand" [color="black", fontcolor="black", label=<{DeleteDatasetMetricCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.distributed_lock.delete.DeleteDistributedLock" [color="black", fontcolor="black", label=<{DeleteDistributedLock|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.delete.DeleteEmbeddedDashboardCommand" [color="black", fontcolor="black", label=<{DeleteEmbeddedDashboardCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.exceptions.DeleteFailedError" [color="black", fontcolor="red", label=<{DeleteFailedError|message : str<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.filter_state.delete.DeleteFilterStateCommand" [color="black", fontcolor="black", label=<{DeleteFilterStateCommand|<br ALIGN="LEFT"/>|delete(cmd_params: CommandParameters): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.explore.form_data.delete.DeleteFormDataCommand" [color="black", fontcolor="black", label=<{DeleteFormDataCommand|<br ALIGN="LEFT"/>|run(): bool<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.exceptions.DeleteKeyValueDistributedLockFailedException" [color="black", fontcolor="red", label=<{DeleteKeyValueDistributedLockFailedException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.base.DeleteMixin" [color="black", fontcolor="black", label=<{DeleteMixin|<br ALIGN="LEFT"/>|muldelete(items: list[Model]): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.security.delete.DeleteRLSRuleCommand" [color="black", fontcolor="black", label=<{DeleteRLSRuleCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.report.delete.DeleteReportScheduleCommand" [color="black", fontcolor="black", label=<{DeleteReportScheduleCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.database.ssh_tunnel.delete.DeleteSSHTunnelCommand" [color="black", fontcolor="black", label=<{DeleteSSHTunnelCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.query.delete.DeleteSavedQueryCommand" [color="black", fontcolor="black", label=<{DeleteSavedQueryCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.tag.delete.DeleteTaggedObjectCommand" [color="black", fontcolor="black", label=<{DeleteTaggedObjectCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.tag.delete.DeleteTagsCommand" [color="black", fontcolor="black", label=<{DeleteTagsCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.temporary_cache.delete.DeleteTemporaryCacheCommand" [color="black", fontcolor="black", label=<{DeleteTemporaryCacheCommand|<br ALIGN="LEFT"/>|<I>delete</I>(cmd_params: CommandParameters): bool<br ALIGN="LEFT"/>run(): bool<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.databases.schemas.DelimitedListField" [color="black", fontcolor="black", label=<{DelimitedListField|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.denodo.DenodoEngineSpec" [color="black", fontcolor="black", label=<{DenodoEngineSpec|custom_errors : dict[re.Pattern[str], tuple[str, SupersetErrorType, dict[str, Any]]]<br ALIGN="LEFT"/>default_driver : str<br ALIGN="LEFT"/>encryption_parameters : dict<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>|convert_dttm(target_type: str, dttm: datetime, db_extra: Optional[dict[str, Any]]): Optional[str]<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>get_datatype(type_code: Any): Optional[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.common.query_object.DeprecatedField" [color="black", fontcolor="black", label=<{DeprecatedField|new_name : str<br ALIGN="LEFT"/>old_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.DisallowedSQLFunction" [color="black", fontcolor="red", label=<{DisallowedSQLFunction|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.base_api.DistincResponseSchema" [color="black", fontcolor="black", label=<{DistincResponseSchema|count : Integer<br ALIGN="LEFT"/>result : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.base_api.DistinctResultResponseSchema" [color="black", fontcolor="black", label=<{DistinctResultResponseSchema|text : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.doris.DorisEngineSpec" [color="black", fontcolor="black", label=<{DorisEngineSpec|column_type_mappings : tuple<br ALIGN="LEFT"/>custom_errors : dict[Pattern[str], tuple[str, SupersetErrorType, dict[str, Any]]]<br ALIGN="LEFT"/>default_driver : str<br ALIGN="LEFT"/>encryption_parameters : dict<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_aliases : set<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>max_column_name_length : int<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>supports_catalog : bool<br ALIGN="LEFT"/>supports_dynamic_catalog : bool<br ALIGN="LEFT"/>supports_dynamic_schema : bool<br ALIGN="LEFT"/>|adjust_engine_params(uri: URL, connect_args: dict[str, Any], catalog: Optional[str], schema: Optional[str]): tuple[URL, dict[str, Any]]<br ALIGN="LEFT"/>get_catalog_names(database: Database, inspector: Inspector): set[str]<br ALIGN="LEFT"/>get_default_catalog(database: Database): Optional[str]<br ALIGN="LEFT"/>get_schema_from_engine_params(sqlalchemy_uri: URL, connect_args: dict[str, Any]): Optional[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.dremio.DremioEngineSpec" [color="black", fontcolor="black", label=<{DremioEngineSpec|default_driver : str<br ALIGN="LEFT"/>drivers : dict<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_aliases : set<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>|convert_dttm(target_type: str, dttm: datetime, db_extra: dict[str, Any] \| None): str \| None<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>get_allows_alias_in_select(database: Database): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.drill.DrillEngineSpec" [color="black", fontcolor="black", label=<{DrillEngineSpec|default_driver : str<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>supports_dynamic_schema : bool<br ALIGN="LEFT"/>|adjust_engine_params(uri: URL, connect_args: dict[str, Any], catalog: str \| None, schema: str \| None): tuple[URL, dict[str, Any]]<br ALIGN="LEFT"/>convert_dttm(target_type: str, dttm: datetime, db_extra: dict[str, Any] \| None): str \| None<br ALIGN="LEFT"/>epoch_ms_to_dttm(): str<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>fetch_data(cursor: Any, limit: int \| None): list[tuple[Any, ...]]<br ALIGN="LEFT"/>get_schema_from_engine_params(sqlalchemy_uri: URL, connect_args: dict[str, Any]): str \| None<br ALIGN="LEFT"/>get_url_for_impersonation(url: URL, impersonate_user: bool, username: str \| None, access_token: str \| None): URL<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.unit_tests.models.core_test.test_get_all_schema_names_needs_oauth2.DriverSpecificError" [color="black", fontcolor="red", label=<{DriverSpecificError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.unit_tests.models.core_test.test_get_all_catalog_names_needs_oauth2.DriverSpecificError" [color="black", fontcolor="red", label=<{DriverSpecificError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.DruidCluster" [color="black", fontcolor="black", label=<{DruidCluster|broker_endpoint<br ALIGN="LEFT"/>broker_host<br ALIGN="LEFT"/>cluster_name<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>verbose_name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.DruidCluster" [color="black", fontcolor="black", label=<{DruidCluster|broker_endpoint<br ALIGN="LEFT"/>broker_host<br ALIGN="LEFT"/>cluster_name<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>verbose_name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.DruidCluster" [color="black", fontcolor="black", label=<{DruidCluster|broker_endpoint<br ALIGN="LEFT"/>broker_host<br ALIGN="LEFT"/>cluster_name<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>verbose_name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.DruidColumn" [color="black", fontcolor="black", label=<{DruidColumn|dimension_spec_json<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-20_15-31_7f2635b51f5d_update_base_columns.DruidColumn" [color="black", fontcolor="black", label=<{DruidColumn|datasource_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.DruidColumn" [color="black", fontcolor="black", label=<{DruidColumn|dimension_spec_json<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.DruidColumn" [color="black", fontcolor="black", label=<{DruidColumn|dimension_spec_json<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.DruidDatasource" [color="black", fontcolor="black", label=<{DruidDatasource|datasource_name<br ALIGN="LEFT"/>default_endpoint<br ALIGN="LEFT"/>fetch_values_from<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.DruidDatasource" [color="black", fontcolor="black", label=<{DruidDatasource|datasource_name<br ALIGN="LEFT"/>default_endpoint<br ALIGN="LEFT"/>fetch_values_from<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.DruidDatasource" [color="black", fontcolor="black", label=<{DruidDatasource|datasource_name<br ALIGN="LEFT"/>default_endpoint<br ALIGN="LEFT"/>fetch_values_from<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.druid.DruidEngineSpec" [color="black", fontcolor="black", label=<{DruidEngineSpec|allows_joins<br ALIGN="LEFT"/>allows_subqueries : bool<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>|alter_new_orm_column(orm_col: TableColumn): None<br ALIGN="LEFT"/>convert_dttm(target_type: str, dttm: datetime, db_extra: dict[str, Any] \| None): str \| None<br ALIGN="LEFT"/>epoch_ms_to_dttm(): str<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>get_dbapi_exception_mapping(): dict[type[Exception], type[Exception]]<br ALIGN="LEFT"/>get_extra_params(database: Database): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2016-06-07_12-33_d8bc074f7aad_add_new_field_is_restricted_to_.DruidMetric" [color="black", fontcolor="black", label=<{DruidMetric|id<br ALIGN="LEFT"/>is_restricted<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.DruidMetric" [color="black", fontcolor="black", label=<{DruidMetric|json<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-20_15-57_e9df189e5c7e_update_base_metrics.DruidMetric" [color="black", fontcolor="black", label=<{DruidMetric|datasource_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.DruidMetric" [color="black", fontcolor="black", label=<{DruidMetric|json<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.DruidMetric" [color="black", fontcolor="black", label=<{DruidMetric|json<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.duckdb.DuckDBEngineSpec" [color="black", fontcolor="black", label=<{DuckDBEngineSpec|custom_errors : dict[Pattern[str], tuple[str, SupersetErrorType, dict[str, Any]]]<br ALIGN="LEFT"/>default_driver : str<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>|convert_dttm(target_type: str, dttm: datetime, db_extra: dict[str, Any] \| None): str \| None<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>get_extra_params(database: Database): dict[str, Any]<br ALIGN="LEFT"/>get_table_names(database: Database, inspector: Inspector, schema: str \| None): set[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.duckdb.DuckDBParametersMixin" [color="black", fontcolor="black", label=<{DuckDBParametersMixin|default_driver : str<br ALIGN="LEFT"/>encryption_parameters : dict[str, str]<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>parameters_schema<br ALIGN="LEFT"/>|build_sqlalchemy_uri(parameters: DuckDBParametersType, encrypted_extra: dict[str, str] \| None): str<br ALIGN="LEFT"/>get_parameters_from_uri(uri: str, encrypted_extra: dict[str, Any] \| None): DuckDBParametersType<br ALIGN="LEFT"/>parameters_json_schema(): Any<br ALIGN="LEFT"/>validate_parameters(properties: DuckDBPropertiesType): list[SupersetError]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.duckdb.DuckDBParametersSchema" [color="black", fontcolor="black", label=<{DuckDBParametersSchema|access_token : String<br ALIGN="LEFT"/>database : String<br ALIGN="LEFT"/>query : Dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.duckdb.DuckDBParametersType" [color="black", fontcolor="black", label=<{DuckDBParametersType|access_token : str \| None<br ALIGN="LEFT"/>database : str<br ALIGN="LEFT"/>query : dict[str, Any]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.duckdb.DuckDBPropertiesType" [color="black", fontcolor="black", label=<{DuckDBPropertiesType|parameters<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.unit_tests.databases.schema_tests.dummy_engine.DummyEngine" [color="black", fontcolor="black", label=<{DummyEngine|default_driver : str<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.integration_tests.db_engine_specs.base_engine_spec_tests.TestDbEngineSpecs.test_limit_with_fetch_many.DummyEngineSpec" [color="black", fontcolor="black", label=<{DummyEngineSpec|limit_method<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.integration_tests.event_logger_tests.TestEventLogger.test_context_manager_log.DummyEventLogger" [color="black", fontcolor="black", label=<{DummyEventLogger|records : list<br ALIGN="LEFT"/>|log(user_id: Optional[int], action: str, dashboard_id: Optional[int], duration_ms: Optional[int], slice_id: Optional[int], referrer: Optional[str])<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.event_logger_tests.TestEventLogger.test_context_manager_log_with_context.DummyEventLogger" [color="black", fontcolor="black", label=<{DummyEventLogger|records : list<br ALIGN="LEFT"/>|log(user_id: Optional[int], action: str, dashboard_id: Optional[int], duration_ms: Optional[int], slice_id: Optional[int], referrer: Optional[str])<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.event_logger_tests.TestEventLogger.test_log_with_context_user_null.DummyEventLogger" [color="black", fontcolor="black", label=<{DummyEventLogger|records : list<br ALIGN="LEFT"/>|log(user_id: Optional[int], action: str, dashboard_id: Optional[int], duration_ms: Optional[int], slice_id: Optional[int], referrer: Optional[str])<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.unit_tests.databases.schema_tests.dummy_schema.DummySchema" [color="black", fontcolor="black", label=<{DummySchema|sqlalchemy_uri : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.stats_logger.DummyStatsLogger" [color="black", fontcolor="black", label=<{DummyStatsLogger|<br ALIGN="LEFT"/>|decr(key: str): None<br ALIGN="LEFT"/>gauge(key: str, value: float): None<br ALIGN="LEFT"/>incr(key: str): None<br ALIGN="LEFT"/>timing(key: str, value: float): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.tasks.cache.DummyStrategy" [color="black", fontcolor="black", label=<{DummyStrategy|name : str<br ALIGN="LEFT"/>|get_tasks(): list[CacheWarmupTask]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dataset.duplicate.DuplicateDatasetCommand" [color="black", fontcolor="black", label=<{DuplicateDatasetCommand|<br ALIGN="LEFT"/>|run(): Model<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.extensions.metadb.Duration" [color="black", fontcolor="black", label=<{Duration|db_api_type : str<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.dynamic_plugins.DynamicPlugin" [color="black", fontcolor="black", label=<{DynamicPlugin|bundle_url<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.dynamic_plugins.DynamicPluginsView" [color="black", fontcolor="black", label=<{DynamicPluginsView|add_columns : list<br ALIGN="LEFT"/>add_title : LazyString<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>description_columns : dict<br ALIGN="LEFT"/>edit_columns : list<br ALIGN="LEFT"/>edit_title : LazyString<br ALIGN="LEFT"/>label_columns : dict<br ALIGN="LEFT"/>list_columns : list<br ALIGN="LEFT"/>list_title : LazyString<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>route_base : str<br ALIGN="LEFT"/>show_columns : list<br ALIGN="LEFT"/>show_title : LazyString<br ALIGN="LEFT"/>|ensure_dynamic_plugins_enabled(): Optional[Response]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.dynamodb.DynamoDBEngineSpec" [color="black", fontcolor="black", label=<{DynamoDBEngineSpec|engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>|convert_dttm(target_type: str, dttm: datetime, db_extra: Optional[dict[str, Any]]): Optional[str]<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.elasticsearch.ElasticSearchEngineSpec" [color="black", fontcolor="black", label=<{ElasticSearchEngineSpec|allows_joins : bool<br ALIGN="LEFT"/>allows_sql_comments : bool<br ALIGN="LEFT"/>allows_subqueries : bool<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>time_groupby_inline : bool<br ALIGN="LEFT"/>type_code_map : dict[int, str]<br ALIGN="LEFT"/>|convert_dttm(target_type: str, dttm: datetime, db_extra: Optional[dict[str, Any]]): Optional[str]<br ALIGN="LEFT"/>get_dbapi_exception_mapping(): dict[type[Exception], type[Exception]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.reports.notifications.email.EmailContent" [color="black", fontcolor="black", label=<{EmailContent|body : str<br ALIGN="LEFT"/>data : Optional[dict[str, Any]]<br ALIGN="LEFT"/>header_data : Optional[HeaderDataType]<br ALIGN="LEFT"/>images : Optional[dict[str, bytes]]<br ALIGN="LEFT"/>pdf : Optional[dict[str, bytes]]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.notifications.email.EmailNotification" [color="black", fontcolor="black", label=<{EmailNotification|type<br ALIGN="LEFT"/>|send(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.models.embedded_dashboard.EmbeddedDashboard" [color="black", fontcolor="black", label=<{EmbeddedDashboard|allow_domain_list<br ALIGN="LEFT"/>allowed_domains<br ALIGN="LEFT"/>dashboard<br ALIGN="LEFT"/>dashboard_id<br ALIGN="LEFT"/>uuid<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.embedded.exceptions.EmbeddedDashboardAccessDeniedError" [color="black", fontcolor="black", label=<{EmbeddedDashboardAccessDeniedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.EmbeddedDashboardConfigSchema" [color="black", fontcolor="black", label=<{EmbeddedDashboardConfigSchema|allowed_domains : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.daos.dashboard.EmbeddedDashboardDAO" [color="black", fontcolor="black", label=<{EmbeddedDashboardDAO|id_column_name : str<br ALIGN="LEFT"/>|<I>create</I>(item: EmbeddedDashboardDAO \| None, attributes: dict[str, Any] \| None): Any<br ALIGN="LEFT"/>upsert(dashboard: Dashboard, allowed_domains: list[str]): EmbeddedDashboard<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.embedded.exceptions.EmbeddedDashboardNotFoundError" [color="black", fontcolor="black", label=<{EmbeddedDashboardNotFoundError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.EmbeddedDashboardResponseSchema" [color="black", fontcolor="black", label=<{EmbeddedDashboardResponseSchema|allowed_domains : List<br ALIGN="LEFT"/>changed_by : Nested<br ALIGN="LEFT"/>changed_on : DateTime<br ALIGN="LEFT"/>dashboard_id : String<br ALIGN="LEFT"/>uuid : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.embedded.api.EmbeddedDashboardRestApi" [color="black", fontcolor="black", label=<{EmbeddedDashboardRestApi|allow_browser_login : bool<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>embedded_response_schema<br ALIGN="LEFT"/>include_route_methods<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>openapi_spec_methods<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>|ensure_embedded_enabled(): Optional[Response]<br ALIGN="LEFT"/>get(uuid: str): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.embedded.view.EmbeddedView" [color="black", fontcolor="black", label=<{EmbeddedView|route_base : str<br ALIGN="LEFT"/>|embedded(uuid: str, add_extra_log_payload: Callable[..., None]): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.databases.types.EncryptedDict" [color="black", fontcolor="black", label=<{EncryptedDict|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.types.EncryptedField" [color="black", fontcolor="black", label=<{EncryptedField|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.encrypt.EncryptedFieldFactory" [color="black", fontcolor="black", label=<{EncryptedFieldFactory|<br ALIGN="LEFT"/>|create(): TypeDecorator<br ALIGN="LEFT"/>created_by_enc_field_factory(field: TypeDecorator): bool<br ALIGN="LEFT"/>init_app(app: Flask): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.utils.encrypt_tests.EncryptedFieldTest" [color="black", fontcolor="black", label=<{EncryptedFieldTest|<br ALIGN="LEFT"/>|setUp(): None<br ALIGN="LEFT"/>test_create_field()<br ALIGN="LEFT"/>test_custom_adapter()<br ALIGN="LEFT"/>test_ensure_encrypted_field_factory_is_used()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.databases.types.EncryptedString" [color="black", fontcolor="black", label=<{EncryptedString|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.encrypt.EncryptedType" [color="black", fontcolor="black", label=<{EncryptedType|cache_ok : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.EngineInformationSchema" [color="black", fontcolor="black", label=<{EngineInformationSchema|disable_ssh_tunneling : Boolean<br ALIGN="LEFT"/>supports_dynamic_catalog : Boolean<br ALIGN="LEFT"/>supports_file_upload : Boolean<br ALIGN="LEFT"/>supports_oauth2 : Boolean<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.temporary_cache.entry.Entry" [color="black", fontcolor="black", label=<{Entry|owner : Optional[int]<br ALIGN="LEFT"/>value : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.errors.ErrorLevel" [color="black", fontcolor="black", label=<{ErrorLevel|ERROR : str<br ALIGN="LEFT"/>INFO : str<br ALIGN="LEFT"/>WARNING : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sqllab.schemas.EstimateQueryCostSchema" [color="black", fontcolor="black", label=<{EstimateQueryCostSchema|catalog : String<br ALIGN="LEFT"/>database_id : Integer<br ALIGN="LEFT"/>schema : String<br ALIGN="LEFT"/>sql : String<br ALIGN="LEFT"/>template_params : Dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.sql_lab.estimate.EstimateQueryCostType" [color="black", fontcolor="black", label=<{EstimateQueryCostType|catalog : str \| None<br ALIGN="LEFT"/>database_id : int<br ALIGN="LEFT"/>schema : str \| None<br ALIGN="LEFT"/>sql : str<br ALIGN="LEFT"/>template_params : dict[str, Any]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.date_parser.EvalDateAddFunc" [color="black", fontcolor="black", label=<{EvalDateAddFunc|value<br ALIGN="LEFT"/>|eval(): datetime<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.date_parser.EvalDateDiffFunc" [color="black", fontcolor="black", label=<{EvalDateDiffFunc|value<br ALIGN="LEFT"/>|eval(): int<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.date_parser.EvalDateTimeFunc" [color="black", fontcolor="black", label=<{EvalDateTimeFunc|value<br ALIGN="LEFT"/>|eval(): datetime<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.date_parser.EvalDateTruncFunc" [color="black", fontcolor="black", label=<{EvalDateTruncFunc|value<br ALIGN="LEFT"/>|eval(): datetime<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.date_parser.EvalHolidayFunc" [color="black", fontcolor="black", label=<{EvalHolidayFunc|value<br ALIGN="LEFT"/>|eval(): datetime<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.date_parser.EvalLastDayFunc" [color="black", fontcolor="black", label=<{EvalLastDayFunc|value<br ALIGN="LEFT"/>|eval(): datetime<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.date_parser.EvalText" [color="black", fontcolor="black", label=<{EvalText|value<br ALIGN="LEFT"/>|eval(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.viz.EventFlowViz" [color="black", fontcolor="black", label=<{EventFlowViz|credits : str<br ALIGN="LEFT"/>is_timeseries : bool<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>query_obj(): QueryObjectDict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.example_data.data_generator.base_generator.ExampleDataGenerator" [color="black", fontcolor="black", label=<{ExampleDataGenerator|<br ALIGN="LEFT"/>|<I>generate</I>(): Iterable[dict[Any, Any]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.exasol.ExasolEngineSpec" [color="black", fontcolor="black", label=<{ExasolEngineSpec|engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>max_column_name_length : int<br ALIGN="LEFT"/>|fetch_data(cursor: Any, limit: Optional[int]): list[tuple[Any, ...]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.databases.schemas.ExcelMetadataUploadFilePostSchema" [color="black", fontcolor="black", label=<{ExcelMetadataUploadFilePostSchema|file : Raw<br ALIGN="LEFT"/>header_row : Integer<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.uploaders.excel_reader.ExcelReader" [color="black", fontcolor="black", label=<{ExcelReader|<br ALIGN="LEFT"/>|file_metadata(file: FileStorage): FileMetadata<br ALIGN="LEFT"/>file_to_dataframe(file: FileStorage): pd.DataFrame<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.database.uploaders.excel_reader.ExcelReaderOptions" [color="black", fontcolor="black", label=<{ExcelReaderOptions|column_dates : list[str]<br ALIGN="LEFT"/>columns_read : list[str]<br ALIGN="LEFT"/>decimal_character : str<br ALIGN="LEFT"/>header_row : int<br ALIGN="LEFT"/>index_column : str<br ALIGN="LEFT"/>null_values : list[str]<br ALIGN="LEFT"/>rows_to_read : int<br ALIGN="LEFT"/>sheet_name : str<br ALIGN="LEFT"/>skip_rows : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.ExcelUploadPostSchema" [color="black", fontcolor="black", label=<{ExcelUploadPostSchema|column_dates<br ALIGN="LEFT"/>decimal_character : String<br ALIGN="LEFT"/>file : Raw<br ALIGN="LEFT"/>header_row : Integer<br ALIGN="LEFT"/>index_column : String<br ALIGN="LEFT"/>null_values<br ALIGN="LEFT"/>rows_to_read : Integer<br ALIGN="LEFT"/>sheet_name : String<br ALIGN="LEFT"/>skip_rows : Integer<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sqllab.schemas.ExecutePayloadSchema" [color="black", fontcolor="black", label=<{ExecutePayloadSchema|catalog : String<br ALIGN="LEFT"/>client_id : String<br ALIGN="LEFT"/>ctas_method : String<br ALIGN="LEFT"/>database_id : Integer<br ALIGN="LEFT"/>expand_data : Boolean<br ALIGN="LEFT"/>json : Boolean<br ALIGN="LEFT"/>queryLimit : Integer<br ALIGN="LEFT"/>runAsync : Boolean<br ALIGN="LEFT"/>schema : String<br ALIGN="LEFT"/>select_as_cta : Boolean<br ALIGN="LEFT"/>sql : String<br ALIGN="LEFT"/>sql_editor_id : String<br ALIGN="LEFT"/>tab : String<br ALIGN="LEFT"/>templateParams : String<br ALIGN="LEFT"/>tmp_table_name : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.sql_lab.execute.ExecuteSqlCommand" [color="black", fontcolor="black", label=<{ExecuteSqlCommand|<br ALIGN="LEFT"/>|is_query_handled(query: Query \| None): bool<br ALIGN="LEFT"/>run(): CommandResult<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sqllab.execution_context_convertor.ExecutionContextConvertor" [color="black", fontcolor="black", label=<{ExecutionContextConvertor|payload : dict[str, Any]<br ALIGN="LEFT"/>|serialize_payload(): str<br ALIGN="LEFT"/>set_max_row_in_display(value: int): None<br ALIGN="LEFT"/>set_payload(execution_context: SqlJsonExecutionContext, execution_status: SqlJsonExecutionStatus): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.tasks.exceptions.ExecutorNotFoundError" [color="black", fontcolor="black", label=<{ExecutorNotFoundError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tasks.types.ExecutorType" [color="black", fontcolor="black", label=<{ExecutorType|CREATOR : str<br ALIGN="LEFT"/>CREATOR_OWNER : str<br ALIGN="LEFT"/>CURRENT_USER : str<br ALIGN="LEFT"/>FIXED_USER : str<br ALIGN="LEFT"/>MODIFIER : str<br ALIGN="LEFT"/>MODIFIER_OWNER : str<br ALIGN="LEFT"/>OWNER : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.explore.schemas.ExploreContextSchema" [color="black", fontcolor="black", label=<{ExploreContextSchema|dataset : Nested<br ALIGN="LEFT"/>form_data : Dict<br ALIGN="LEFT"/>message : String<br ALIGN="LEFT"/>slice : Nested<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.cache_manager.ExploreFormDataCache" [color="black", fontcolor="black", label=<{ExploreFormDataCache|<br ALIGN="LEFT"/>|get(): Optional[Union[str, Markup]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.explore.form_data.api.ExploreFormDataRestApi" [color="black", fontcolor="black", label=<{ExploreFormDataRestApi|add_model_schema<br ALIGN="LEFT"/>allow_browser_login : bool<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>edit_model_schema<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>openapi_spec_component_schemas : tuple<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>|delete(key: str): Response<br ALIGN="LEFT"/>get(key: str): Response<br ALIGN="LEFT"/>post(): Response<br ALIGN="LEFT"/>put(key: str): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.models.helpers.ExploreMixin" [color="black", fontcolor="black", label=<{ExploreMixin|always_filter_main_dttm<br ALIGN="LEFT"/>cache_timeout<br ALIGN="LEFT"/>catalog<br ALIGN="LEFT"/>column_names<br ALIGN="LEFT"/>columns<br ALIGN="LEFT"/>database<br ALIGN="LEFT"/>database_id<br ALIGN="LEFT"/>db_engine_spec<br ALIGN="LEFT"/>db_extra<br ALIGN="LEFT"/>dttm_cols<br ALIGN="LEFT"/>fetch_values_predicate : NoneType<br ALIGN="LEFT"/>is_rls_supported<br ALIGN="LEFT"/>main_dttm_col<br ALIGN="LEFT"/>metrics<br ALIGN="LEFT"/>offset<br ALIGN="LEFT"/>owners_data<br ALIGN="LEFT"/>schema<br ALIGN="LEFT"/>sql<br ALIGN="LEFT"/>sqla_aggregations : dict<br ALIGN="LEFT"/>template_params_dict<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>uid<br ALIGN="LEFT"/>|<I>adhoc_column_to_sqla</I>(col: 'AdhocColumn', force_type_check: bool, template_processor: Optional[BaseTemplateProcessor]): ColumnElement<br ALIGN="LEFT"/>adhoc_metric_to_sqla(metric: AdhocMetric, columns_by_name: dict[str, 'TableColumn'], template_processor: Optional[BaseTemplateProcessor]): ColumnElement<br ALIGN="LEFT"/>convert_tbl_column_to_sqla_col(tbl_column: 'TableColumn', label: Optional[str], template_processor: Optional[BaseTemplateProcessor]): Column<br ALIGN="LEFT"/>dttm_sql_literal(dttm: datetime, col: 'TableColumn'): str<br ALIGN="LEFT"/>exc_query(qry: Any): QueryResult<br ALIGN="LEFT"/>filter_values_handler(values: Optional[FilterValues], operator: str, target_generic_type: utils.GenericDataType, target_native_type: Optional[str], is_list_target: bool, db_engine_spec: Optional[builtins.type['BaseEngineSpec']], db_extra: Optional[dict[str, Any]]): Optional[FilterValues]<br ALIGN="LEFT"/><I>get_extra_cache_keys</I>(query_obj: dict[str, Any]): list[Hashable]<br ALIGN="LEFT"/>get_fetch_values_predicate(template_processor: Optional[BaseTemplateProcessor]): TextClause<br ALIGN="LEFT"/>get_from_clause(template_processor: Optional[BaseTemplateProcessor]): tuple[Union[TableClause, Alias], Optional[str]]<br ALIGN="LEFT"/>get_query_str(query_obj: QueryObjectDict): str<br ALIGN="LEFT"/>get_query_str_extended(query_obj: QueryObjectDict, mutate: bool): QueryStringExtended<br ALIGN="LEFT"/>get_rendered_sql(template_processor: Optional[BaseTemplateProcessor]): str<br ALIGN="LEFT"/>get_sqla_query(apply_fetch_values_predicate: bool, columns: Optional[list[Column]], extras: Optional[dict[str, Any]], filter: Optional[list[utils.QueryObjectFilterClause]], from_dttm: Optional[datetime], granularity: Optional[str], groupby: Optional[list[Column]], inner_from_dttm: Optional[datetime], inner_to_dttm: Optional[datetime], is_rowcount: bool, is_timeseries: bool, metrics: Optional[list[Metric]], orderby: Optional[list[OrderBy]], order_desc: bool, to_dttm: Optional[datetime], series_columns: Optional[list[Column]], series_limit: Optional[int], series_limit_metric: Optional[Metric], row_limit: Optional[int], row_offset: Optional[int], timeseries_limit: Optional[int], timeseries_limit_metric: Optional[Metric], time_shift: Optional[str]): SqlaQuery<br ALIGN="LEFT"/>get_sqla_row_level_filters(template_processor: Optional[BaseTemplateProcessor]): list[TextClause]<br ALIGN="LEFT"/><I>get_template_processor</I>(): BaseTemplateProcessor<br ALIGN="LEFT"/>get_time_filter(time_col: 'TableColumn', start_dttm: Optional[sa.DateTime], end_dttm: Optional[sa.DateTime], time_grain: Optional[str], label: Optional[str], template_processor: Optional[BaseTemplateProcessor]): ColumnElement<br ALIGN="LEFT"/>get_timestamp_expression(column: dict[str, Any], time_grain: Optional[str], label: Optional[str], template_processor: Optional[BaseTemplateProcessor]): Union[TimestampExpression, Label]<br ALIGN="LEFT"/>make_orderby_compatible(select_exprs: list[ColumnElement], orderby_exprs: list[ColumnElement]): None<br ALIGN="LEFT"/>make_sqla_column_compatible(sqla_col: ColumnElement, label: Optional[str]): ColumnElement<br ALIGN="LEFT"/><I>query</I>(query_obj: QueryObjectDict): QueryResult<br ALIGN="LEFT"/>text(clause: str): TextClause<br ALIGN="LEFT"/>values_for_column(column_name: str, limit: int, denormalize_column: bool): list[Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.explore.permalink.exceptions.ExplorePermalinkCreateFailedError" [color="black", fontcolor="black", label=<{ExplorePermalinkCreateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.explore.permalink.exceptions.ExplorePermalinkGetFailedError" [color="black", fontcolor="black", label=<{ExplorePermalinkGetFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.explore.permalink.exceptions.ExplorePermalinkInvalidStateError" [color="black", fontcolor="black", label=<{ExplorePermalinkInvalidStateError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.explore.permalink.api.ExplorePermalinkRestApi" [color="black", fontcolor="black", label=<{ExplorePermalinkRestApi|add_model_schema<br ALIGN="LEFT"/>allow_browser_login : bool<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>openapi_spec_component_schemas : tuple<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>|get(key: str): Response<br ALIGN="LEFT"/>post(): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.explore.permalink.schemas.ExplorePermalinkSchema" [color="black", fontcolor="black", label=<{ExplorePermalinkSchema|chartId : Integer<br ALIGN="LEFT"/>datasource : String<br ALIGN="LEFT"/>datasourceId : Integer<br ALIGN="LEFT"/>datasourceType : String<br ALIGN="LEFT"/>state : Nested<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.explore.permalink.types.ExplorePermalinkState" [color="black", fontcolor="black", label=<{ExplorePermalinkState|formData : dict[str, Any]<br ALIGN="LEFT"/>urlParams : Optional[list[tuple[str, str]]]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.explore.permalink.schemas.ExplorePermalinkStateSchema" [color="black", fontcolor="black", label=<{ExplorePermalinkStateSchema|formData : Dict<br ALIGN="LEFT"/>urlParams : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.explore.permalink.types.ExplorePermalinkValue" [color="black", fontcolor="black", label=<{ExplorePermalinkValue|chartId : Optional[int]<br ALIGN="LEFT"/>datasetId : Optional[int]<br ALIGN="LEFT"/>datasource : str<br ALIGN="LEFT"/>datasourceId : Optional[int]<br ALIGN="LEFT"/>datasourceType : str<br ALIGN="LEFT"/>state<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.explore.ExplorePermalinkView" [color="black", fontcolor="black", label=<{ExplorePermalinkView|class_permission_name : str<br ALIGN="LEFT"/>route_base : str<br ALIGN="LEFT"/>|permalink(key: str): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.explore.api.ExploreRestApi" [color="black", fontcolor="black", label=<{ExploreRestApi|allow_browser_login : bool<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>openapi_spec_component_schemas : tuple<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>|get(): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.views.explore.ExploreView" [color="black", fontcolor="black", label=<{ExploreView|class_permission_name : str<br ALIGN="LEFT"/>route_base : str<br ALIGN="LEFT"/>|root(): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.export.assets.ExportAssetsCommand" [color="black", fontcolor="black", label=<{ExportAssetsCommand|<br ALIGN="LEFT"/>|run(): Iterator[tuple[str, Callable[[], str]]]<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.chart.export.ExportChartsCommand" [color="black", fontcolor="black", label=<{ExportChartsCommand|dao<br ALIGN="LEFT"/>not_found<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.export.ExportDashboardsCommand" [color="black", fontcolor="black", label=<{ExportDashboardsCommand|dao<br ALIGN="LEFT"/>not_found<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.export.ExportDatabasesCommand" [color="black", fontcolor="black", label=<{ExportDatabasesCommand|dao<br ALIGN="LEFT"/>not_found<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.export.ExportDatasetsCommand" [color="black", fontcolor="black", label=<{ExportDatasetsCommand|dao<br ALIGN="LEFT"/>not_found<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.export.models.ExportModelsCommand" [color="black", fontcolor="black", label=<{ExportModelsCommand|dao : type[BaseDAO[Model]]<br ALIGN="LEFT"/>export_related : bool<br ALIGN="LEFT"/>model_ids : list[int]<br ALIGN="LEFT"/>not_found : type[CommandException]<br ALIGN="LEFT"/>|run(): Iterator[tuple[str, Callable[[], str]]]<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.query.export.ExportSavedQueriesCommand" [color="black", fontcolor="black", label=<{ExportSavedQueriesCommand|dao<br ALIGN="LEFT"/>not_found<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.datasource.schemas.ExternalMetadataParams" [color="black", fontcolor="black", label=<{ExternalMetadataParams|always_filter_main_dttm : Optional[bool]<br ALIGN="LEFT"/>catalog_name : Optional[str]<br ALIGN="LEFT"/>database_name : str<br ALIGN="LEFT"/>datasource_type : str<br ALIGN="LEFT"/>normalize_columns : Optional[bool]<br ALIGN="LEFT"/>schema_name : str<br ALIGN="LEFT"/>table_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.datasource.schemas.ExternalMetadataSchema" [color="black", fontcolor="black", label=<{ExternalMetadataSchema|always_filter_main_dttm : Boolean<br ALIGN="LEFT"/>catalog_name : String<br ALIGN="LEFT"/>database_name : String<br ALIGN="LEFT"/>datasource_type : String<br ALIGN="LEFT"/>normalize_columns : Boolean<br ALIGN="LEFT"/>schema_name : String<br ALIGN="LEFT"/>table_name : String<br ALIGN="LEFT"/>|normalize(data: ExternalMetadataParams): ExternalMetadataParams<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.jinja_context.ExtraCache" [color="black", fontcolor="black", label=<{ExtraCache|applied_filters : NoneType, list<br ALIGN="LEFT"/>database : Optional[Database]<br ALIGN="LEFT"/>dialect : Optional[Dialect]<br ALIGN="LEFT"/>extra_cache_keys : Optional[list[Any]]<br ALIGN="LEFT"/>regex<br ALIGN="LEFT"/>removed_filters : NoneType, list<br ALIGN="LEFT"/>table : Optional[SqlaTable]<br ALIGN="LEFT"/>|cache_key_wrapper(key: Any): Any<br ALIGN="LEFT"/>current_user_email(add_to_cache_keys: bool): Optional[str]<br ALIGN="LEFT"/>current_user_id(add_to_cache_keys: bool): Optional[int]<br ALIGN="LEFT"/>current_username(add_to_cache_keys: bool): Optional[str]<br ALIGN="LEFT"/>filter_values(column: str, default: Optional[str], remove_filter: bool): list[Any]<br ALIGN="LEFT"/>get_filters(column: str, remove_filter: bool): list[Filter]<br ALIGN="LEFT"/>get_time_filter(column: str \| None, default: str \| None, target_type: str \| None, strftime: str \| None, remove_filter: bool): TimeFilter<br ALIGN="LEFT"/>url_param(param: str, default: Optional[str], add_to_cache_keys: bool, escape_result: bool): Optional[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.config.ExtraDynamicQueryFilters" [color="black", fontcolor="black", label=<{ExtraDynamicQueryFilters|databases : Callable[[Query], Query]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.core.ExtraFiltersReasonType" [color="black", fontcolor="black", label=<{ExtraFiltersReasonType|COL_NOT_IN_DATASOURCE : str<br ALIGN="LEFT"/>NO_TEMPORAL_COLUMN : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.core.ExtraFiltersTimeColumnType" [color="black", fontcolor="black", label=<{ExtraFiltersTimeColumnType|TIME_COL : str<br ALIGN="LEFT"/>TIME_GRAIN : str<br ALIGN="LEFT"/>TIME_ORIGIN : str<br ALIGN="LEFT"/>TIME_RANGE : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.helpers.ExtraJSONMixin" [color="black", fontcolor="black", label=<{ExtraJSONMixin|extra<br ALIGN="LEFT"/>extra_json<br ALIGN="LEFT"/>|ensure_extra_json_is_not_none(_: str, value: Optional[dict[str, Any]]): Any<br ALIGN="LEFT"/>set_extra_json_key(key: str, value: Any): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.config.ExtraRelatedQueryFilters" [color="black", fontcolor="black", label=<{ExtraRelatedQueryFilters|role : Callable[[Query], Query]<br ALIGN="LEFT"/>user : Callable[[Query], Query]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.integration_tests.security_tests.FakeRequest" [color="black", fontcolor="black", label=<{FakeRequest|form : Any<br ALIGN="LEFT"/>headers : Any<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.extensions.metadb.FallbackField" [color="black", fontcolor="black", label=<{FallbackField|db_api_type : str<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|parse(value: Any): str \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.models.core.FavStar" [color="black", fontcolor="black", label=<{FavStar|class_name<br ALIGN="LEFT"/>dttm<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>obj_id<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.core.FavStarClassName" [color="black", fontcolor="black", label=<{FavStarClassName|CHART : str<br ALIGN="LEFT"/>DASHBOARD : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tags.models.FavStarUpdater" [color="black", fontcolor="black", label=<{FavStarUpdater|<br ALIGN="LEFT"/>|after_delete(_mapper: Mapper, connection: Connection, target: FavStar): None<br ALIGN="LEFT"/>after_insert(_mapper: Mapper, connection: Connection, target: FavStar): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.feature_flag_manager.FeatureFlagManager" [color="black", fontcolor="black", label=<{FeatureFlagManager|<br ALIGN="LEFT"/>|get_feature_flags(): dict[str, bool]<br ALIGN="LEFT"/>init_app(app: Flask): None<br ALIGN="LEFT"/>is_feature_enabled(feature: str): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.database.uploaders.base.FileMetadata" [color="black", fontcolor="black", label=<{FileMetadata|items : list[FileMetadataItem]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.uploaders.base.FileMetadataItem" [color="black", fontcolor="black", label=<{FileMetadataItem|column_names : list[str]<br ALIGN="LEFT"/>sheet_name : Optional[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.jinja_context.Filter" [color="black", fontcolor="black", label=<{Filter|col : str<br ALIGN="LEFT"/>op : str<br ALIGN="LEFT"/>val : Union[None, Any, list[Any]]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.core.FilterOperator" [color="black", fontcolor="black", label=<{FilterOperator|EQUALS : str<br ALIGN="LEFT"/>GREATER_THAN : str<br ALIGN="LEFT"/>GREATER_THAN_OR_EQUALS : str<br ALIGN="LEFT"/>ILIKE : str<br ALIGN="LEFT"/>IN : str<br ALIGN="LEFT"/>IS_FALSE : str<br ALIGN="LEFT"/>IS_NOT_NULL : str<br ALIGN="LEFT"/>IS_NULL : str<br ALIGN="LEFT"/>IS_TRUE : str<br ALIGN="LEFT"/>LESS_THAN : str<br ALIGN="LEFT"/>LESS_THAN_OR_EQUALS : str<br ALIGN="LEFT"/>LIKE : str<br ALIGN="LEFT"/>NOT_EQUALS : str<br ALIGN="LEFT"/>NOT_IN : str<br ALIGN="LEFT"/>NOT_LIKE : str<br ALIGN="LEFT"/>TEMPORAL_RANGE : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.filters.FilterRelatedOwners" [color="black", fontcolor="black", label=<{FilterRelatedOwners|arg_name : str<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: Optional[Any]): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.dashboards.filters.FilterRelatedRoles" [color="black", fontcolor="black", label=<{FilterRelatedRoles|arg_name : str<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: Optional[Any]): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.core.FilterStringOperators" [color="black", fontcolor="black", label=<{FilterStringOperators|EQUALS : tuple<br ALIGN="LEFT"/>GREATER_THAN : tuple<br ALIGN="LEFT"/>GREATER_THAN_OR_EQUAL : tuple<br ALIGN="LEFT"/>ILIKE : tuple<br ALIGN="LEFT"/>IN : tuple<br ALIGN="LEFT"/>IS_FALSE : tuple<br ALIGN="LEFT"/>IS_NOT_NULL : tuple<br ALIGN="LEFT"/>IS_NULL : tuple<br ALIGN="LEFT"/>IS_TRUE : tuple<br ALIGN="LEFT"/>LATEST_PARTITION : tuple<br ALIGN="LEFT"/>LESS_THAN : tuple<br ALIGN="LEFT"/>LESS_THAN_OR_EQUAL : tuple<br ALIGN="LEFT"/>LIKE : tuple<br ALIGN="LEFT"/>NOT_EQUALS : tuple<br ALIGN="LEFT"/>NOT_IN : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.integration_tests.sqla_models_tests.FilterTestCase" [color="black", fontcolor="black", label=<{FilterTestCase|column : str<br ALIGN="LEFT"/>expected : Union[str, list[str]]<br ALIGN="LEFT"/>operator : str<br ALIGN="LEFT"/>value : Union[float, int, list[Any], str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.firebird.FirebirdEngineSpec" [color="black", fontcolor="black", label=<{FirebirdEngineSpec|engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>limit_method<br ALIGN="LEFT"/>|convert_dttm(target_type: str, dttm: datetime, db_extra: Optional[dict[str, Any]]): Optional[str]<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sql.dialects.firebolt.Firebolt" [color="black", fontcolor="black", label=<{Firebolt|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.firebolt.FireboltEngineSpec" [color="black", fontcolor="black", label=<{FireboltEngineSpec|default_driver : str<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>|convert_dttm(target_type: str, dttm: datetime, db_extra: Optional[dict[str, Any]]): Optional[str]<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sql.dialects.firebolt.FireboltOld" [color="black", fontcolor="black", label=<{FireboltOld|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tasks.types.FixedExecutor" [color="black", fontcolor="black", label=<{FixedExecutor|username : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.exceptions.ForbiddenError" [color="black", fontcolor="red", label=<{ForbiddenError|message : str<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.shared.constraints.ForeignKey" [color="black", fontcolor="black", label=<{ForeignKey|constraint_name<br ALIGN="LEFT"/>local_cols : list[str]<br ALIGN="LEFT"/>referent_table : str<br ALIGN="LEFT"/>remote_cols : list[str]<br ALIGN="LEFT"/>table : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.explore.form_data.schemas.FormDataPostSchema" [color="black", fontcolor="black", label=<{FormDataPostSchema|chart_id : Integer<br ALIGN="LEFT"/>datasource_id : Integer<br ALIGN="LEFT"/>datasource_type : String<br ALIGN="LEFT"/>form_data : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.explore.form_data.schemas.FormDataPutSchema" [color="black", fontcolor="black", label=<{FormDataPutSchema|chart_id : Integer<br ALIGN="LEFT"/>datasource_id : Integer<br ALIGN="LEFT"/>datasource_type : String<br ALIGN="LEFT"/>form_data : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sqllab.schemas.FormatQueryPayloadSchema" [color="black", fontcolor="black", label=<{FormatQueryPayloadSchema|engine : String<br ALIGN="LEFT"/>sql : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.gsheets.GSheetsEngineSpec" [color="black", fontcolor="black", label=<{GSheetsEngineSpec|allows_joins : bool<br ALIGN="LEFT"/>allows_subqueries : bool<br ALIGN="LEFT"/>custom_errors : dict[Pattern[str], tuple[str, SupersetErrorType, dict[str, Any]]]<br ALIGN="LEFT"/>default_driver : str<br ALIGN="LEFT"/>encrypted_extra_sensitive_fields : set<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>oauth2_authorization_request_uri : str<br ALIGN="LEFT"/>oauth2_exception<br ALIGN="LEFT"/>oauth2_scope : str<br ALIGN="LEFT"/>oauth2_token_request_uri : str<br ALIGN="LEFT"/>parameters_schema<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>supports_file_upload : bool<br ALIGN="LEFT"/>supports_oauth2 : bool<br ALIGN="LEFT"/>|build_sqlalchemy_uri(_: GSheetsParametersType, encrypted_extra: None \| dict[str, Any]): str<br ALIGN="LEFT"/>df_to_sql(database: Database, table: Table, df: pd.DataFrame, to_sql_kwargs: dict[str, Any]): None<br ALIGN="LEFT"/>get_extra_table_metadata(database: Database, table: Table): dict[str, Any]<br ALIGN="LEFT"/>get_parameters_from_uri(uri: str, encrypted_extra: dict[str, Any] \| None): Any<br ALIGN="LEFT"/>get_url_for_impersonation(url: URL, impersonate_user: bool, username: str \| None, access_token: str \| None): URL<br ALIGN="LEFT"/>parameters_json_schema(): Any<br ALIGN="LEFT"/>validate_parameters(properties: GSheetsPropertiesType): list[SupersetError]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.gsheets.GSheetsParametersSchema" [color="black", fontcolor="black", label=<{GSheetsParametersSchema|catalog : Dict<br ALIGN="LEFT"/>service_account_info<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.gsheets.GSheetsParametersType" [color="black", fontcolor="black", label=<{GSheetsParametersType|catalog : dict[str, str] \| None<br ALIGN="LEFT"/>service_account_info : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.gsheets.GSheetsPropertiesType" [color="black", fontcolor="black", label=<{GSheetsPropertiesType|catalog : dict[str, str]<br ALIGN="LEFT"/>parameters<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.sql_types.mssql_sql_types.GUID" [color="black", fontcolor="black", label=<{GUID|impl : CHAR<br ALIGN="LEFT"/>python_type<br ALIGN="LEFT"/>|process_bind_param(value: str, dialect: Dialect): Optional[str]<br ALIGN="LEFT"/>process_result_value(value: Optional[str], dialect: Dialect): Optional[uuid.UUID]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sql.dialects.firebolt.Firebolt.Generator" [color="black", fontcolor="black", label=<{Generator|TYPE_MAPPING<br ALIGN="LEFT"/>|not_sql(expression: exp.Not): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sql.dialects.firebolt.FireboltOld.Generator" [color="black", fontcolor="black", label=<{Generator|<br ALIGN="LEFT"/>|join_sql(expression: exp.Join): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.core.GenericDataType" [color="black", fontcolor="black", label=<{GenericDataType|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.permalink.get.GetDashboardPermalinkCommand" [color="black", fontcolor="black", label=<{GetDashboardPermalinkCommand|key : str<br ALIGN="LEFT"/>|run(): Optional[DashboardPermalinkValue]<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.distributed_lock.get.GetDistributedLock" [color="black", fontcolor="black", label=<{GetDistributedLock|<br ALIGN="LEFT"/>|run(): LockValue \| None<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.explore.get.GetExploreCommand" [color="black", fontcolor="black", label=<{GetExploreCommand|<br ALIGN="LEFT"/>|run(): Optional[dict[str, Any]]<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.explore.permalink.get.GetExplorePermalinkCommand" [color="black", fontcolor="black", label=<{GetExplorePermalinkCommand|key : str<br ALIGN="LEFT"/>|run(): Optional[ExplorePermalinkValue]<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.charts.schemas.GetFavStarIdsSchema" [color="black", fontcolor="black", label=<{GetFavStarIdsSchema|result : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.GetFavStarIdsSchema" [color="black", fontcolor="black", label=<{GetFavStarIdsSchema|result : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.filter_state.get.GetFilterStateCommand" [color="black", fontcolor="black", label=<{GetFilterStateCommand|<br ALIGN="LEFT"/>|get(cmd_params: CommandParameters): Optional[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.explore.form_data.get.GetFormDataCommand" [color="black", fontcolor="black", label=<{GetFormDataCommand|<br ALIGN="LEFT"/>|run(): Optional[str]<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.datasets.schemas.GetOrCreateDatasetSchema" [color="black", fontcolor="black", label=<{GetOrCreateDatasetSchema|always_filter_main_dttm : Boolean<br ALIGN="LEFT"/>catalog : String<br ALIGN="LEFT"/>database_id : Integer<br ALIGN="LEFT"/>normalize_columns : Boolean<br ALIGN="LEFT"/>schema : String<br ALIGN="LEFT"/>table_name : String<br ALIGN="LEFT"/>template_params : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.sql_lab.permalink.get.GetSqlLabPermalinkCommand" [color="black", fontcolor="black", label=<{GetSqlLabPermalinkCommand|key : str<br ALIGN="LEFT"/>|run(): Optional[SqlLabPermalinkValue]<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.temporary_cache.get.GetTemporaryCacheCommand" [color="black", fontcolor="black", label=<{GetTemporaryCacheCommand|<br ALIGN="LEFT"/>|<I>get</I>(cmd_params: CommandParameters): Optional[str]<br ALIGN="LEFT"/>run(): Optional[str]<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.security.guest_token.GuestToken" [color="black", fontcolor="black", label=<{GuestToken|exp : float<br ALIGN="LEFT"/>iat : float<br ALIGN="LEFT"/>resources : list<br ALIGN="LEFT"/>rls_rules : list[GuestTokenRlsRule]<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.security.api.GuestTokenCreateSchema" [color="black", fontcolor="black", label=<{GuestTokenCreateSchema|resources : List<br ALIGN="LEFT"/>rls : List<br ALIGN="LEFT"/>user : Nested<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.security.guest_token.GuestTokenResource" [color="black", fontcolor="black", label=<{GuestTokenResource|id : Union[str, int]<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.security.guest_token.GuestTokenResourceType" [color="black", fontcolor="black", label=<{GuestTokenResourceType|DASHBOARD : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.security.guest_token.GuestTokenRlsRule" [color="black", fontcolor="black", label=<{GuestTokenRlsRule|clause : str<br ALIGN="LEFT"/>dataset : Optional[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.integration_tests.security.row_level_security_tests.GuestTokenRowLevelSecurityTests" [color="black", fontcolor="black", label=<{GuestTokenRowLevelSecurityTests|query_obj : dict[str, Any]<br ALIGN="LEFT"/>|default_rls_rule()<br ALIGN="LEFT"/>guest_user_with_rls(rules: Optional[list[Any]]): GuestUser<br ALIGN="LEFT"/>test_dataset_id_can_be_string()<br ALIGN="LEFT"/>test_multiple_rls_filters_are_unionized()<br ALIGN="LEFT"/>test_rls_filter_alters_query()<br ALIGN="LEFT"/>test_rls_filter_does_not_alter_unrelated_query()<br ALIGN="LEFT"/>test_rls_filter_for_all_datasets()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.security.guest_token.GuestTokenUser" [color="black", fontcolor="black", label=<{GuestTokenUser|first_name : str<br ALIGN="LEFT"/>last_name : str<br ALIGN="LEFT"/>username : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.security.guest_token.GuestUser" [color="black", fontcolor="black", label=<{GuestUser|first_name<br ALIGN="LEFT"/>guest_token<br ALIGN="LEFT"/>is_anonymous<br ALIGN="LEFT"/>is_authenticated<br ALIGN="LEFT"/>is_guest_user : bool<br ALIGN="LEFT"/>last_name<br ALIGN="LEFT"/>resources<br ALIGN="LEFT"/>rls<br ALIGN="LEFT"/>roles : list[Role]<br ALIGN="LEFT"/>username<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.doris.HLL" [color="black", fontcolor="black", label=<{HLL|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.starrocks.HLL" [color="black", fontcolor="black", label=<{HLL|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.hana.HanaEngineSpec" [color="black", fontcolor="black", label=<{HanaEngineSpec|engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>force_column_alias_quotes : bool<br ALIGN="LEFT"/>limit_method<br ALIGN="LEFT"/>max_column_name_length : int<br ALIGN="LEFT"/>|convert_dttm(target_type: str, dttm: datetime, db_extra: Optional[dict[str, Any]]): Optional[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.core.HeaderDataType" [color="black", fontcolor="black", label=<{HeaderDataType|chart_id : int \| None<br ALIGN="LEFT"/>dashboard_id : int \| None<br ALIGN="LEFT"/>notification_format : str<br ALIGN="LEFT"/>notification_source : str \| None<br ALIGN="LEFT"/>notification_type : str<br ALIGN="LEFT"/>owners : list[int]<br ALIGN="LEFT"/>slack_channels : list[str] \| None<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.hive.HiveEngineSpec" [color="black", fontcolor="black", label=<{HiveEngineSpec|allows_alias_to_source_column : bool<br ALIGN="LEFT"/>allows_hidden_orderby_agg : bool<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>jobs_stats_r<br ALIGN="LEFT"/>launching_job_r<br ALIGN="LEFT"/>max_column_name_length : int<br ALIGN="LEFT"/>stage_progress_r<br ALIGN="LEFT"/>supports_dynamic_schema : bool<br ALIGN="LEFT"/>|adjust_engine_params(uri: URL, connect_args: dict[str, Any], catalog: str \| None, schema: str \| None): tuple[URL, dict[str, Any]]<br ALIGN="LEFT"/>convert_dttm(target_type: str, dttm: datetime, db_extra: dict[str, Any] \| None): str \| None<br ALIGN="LEFT"/>df_to_sql(database: Database, table: Table, df: pd.DataFrame, to_sql_kwargs: dict[str, Any]): None<br ALIGN="LEFT"/>execute(cursor, query: str, database: Database, async_: bool)<br ALIGN="LEFT"/>fetch_data(cursor: Any, limit: int \| None): list[tuple[Any, ...]]<br ALIGN="LEFT"/>get_columns(inspector: Inspector, table: Table, options: dict[str, Any] \| None): list[ResultSetColumnType]<br ALIGN="LEFT"/>get_function_names(database: Database): list[str]<br ALIGN="LEFT"/>get_schema_from_engine_params(sqlalchemy_uri: URL, connect_args: dict[str, Any]): str \| None<br ALIGN="LEFT"/>get_tracking_url_from_logs(log_lines: list[str]): str \| None<br ALIGN="LEFT"/>get_url_for_impersonation(url: URL, impersonate_user: bool, username: str \| None, access_token: str \| None): URL<br ALIGN="LEFT"/>get_view_names(database: Database, inspector: Inspector, schema: str \| None): set[str]<br ALIGN="LEFT"/>handle_cursor(cursor: Any, query: Query): None<br ALIGN="LEFT"/>has_implicit_cancel(): bool<br ALIGN="LEFT"/><I>latest_sub_partition</I>(database: Database, table: Table): str<br ALIGN="LEFT"/>patch(): None<br ALIGN="LEFT"/>progress(log_lines: list[str]): int<br ALIGN="LEFT"/>select_star(database: Database, table: Table, engine: Engine, limit: int, show_cols: bool, indent: bool, latest_partition: bool, cols: list[ResultSetColumnType] \| None): str<br ALIGN="LEFT"/>update_impersonation_config(database: Database, connect_args: dict[str, Any], uri: str, username: str \| None, access_token: str \| None): None<br ALIGN="LEFT"/>where_latest_partition(database: Database, table: Table, query: Select, columns: list[ResultSetColumnType] \| None): Select \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.jinja_context.HiveTemplateProcessor" [color="black", fontcolor="black", label=<{HiveTemplateProcessor|engine : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.viz.HorizonViz" [color="black", fontcolor="black", label=<{HorizonViz|credits : str<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.ibmi.IBMiEngineSpec" [color="black", fontcolor="black", label=<{IBMiEngineSpec|engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>max_column_name_length : int<br ALIGN="LEFT"/>|epoch_to_dttm(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.impala.ImpalaEngineSpec" [color="black", fontcolor="black", label=<{ImpalaEngineSpec|engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>has_query_id_before_execute : bool<br ALIGN="LEFT"/>|cancel_query(cursor: Any, query: Query, cancel_query_id: str): bool<br ALIGN="LEFT"/>convert_dttm(target_type: str, dttm: datetime, db_extra: dict[str, Any] \| None): str \| None<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>execute(cursor: Any, query: str, database: Database): None<br ALIGN="LEFT"/>get_cancel_query_id(cursor: Any, query: Query): Optional[str]<br ALIGN="LEFT"/>get_schema_names(inspector: Inspector): set[str]<br ALIGN="LEFT"/>handle_cursor(cursor: Any, query: Query): None<br ALIGN="LEFT"/>has_implicit_cancel(): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.importers.v1.assets.ImportAssetsCommand" [color="black", fontcolor="black", label=<{ImportAssetsCommand|contents : dict[str, str]<br ALIGN="LEFT"/>passwords : dict[str, str]<br ALIGN="LEFT"/>schemas : dict[str, Schema]<br ALIGN="LEFT"/>ssh_tunnel_passwords : dict[str, str]<br ALIGN="LEFT"/>ssh_tunnel_priv_key_passwords : dict[str, str]<br ALIGN="LEFT"/>ssh_tunnel_private_keys : dict[str, str]<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.chart.importers.dispatcher.ImportChartsCommand" [color="black", fontcolor="black", label=<{ImportChartsCommand|args : tuple<br ALIGN="LEFT"/>contents : dict[str, str]<br ALIGN="LEFT"/>kwargs : dict<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.chart.importers.v1.ImportChartsCommand" [color="black", fontcolor="black", label=<{ImportChartsCommand|dao<br ALIGN="LEFT"/>import_error<br ALIGN="LEFT"/>model_name : str<br ALIGN="LEFT"/>prefix : str<br ALIGN="LEFT"/>schemas : dict[str, Schema]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.importers.dispatcher.ImportDashboardsCommand" [color="black", fontcolor="black", label=<{ImportDashboardsCommand|args : tuple<br ALIGN="LEFT"/>contents : dict[str, str]<br ALIGN="LEFT"/>kwargs : dict<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.importers.v0.ImportDashboardsCommand" [color="black", fontcolor="black", label=<{ImportDashboardsCommand|contents : dict[str, str]<br ALIGN="LEFT"/>database_id : Optional[int]<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.importers.v1.ImportDashboardsCommand" [color="black", fontcolor="black", label=<{ImportDashboardsCommand|dao<br ALIGN="LEFT"/>import_error<br ALIGN="LEFT"/>model_name : str<br ALIGN="LEFT"/>prefix : str<br ALIGN="LEFT"/>schemas : dict[str, Schema]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.importers.dispatcher.ImportDatabasesCommand" [color="black", fontcolor="black", label=<{ImportDatabasesCommand|args : tuple<br ALIGN="LEFT"/>contents : dict[str, str]<br ALIGN="LEFT"/>kwargs : dict<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.database.importers.v1.ImportDatabasesCommand" [color="black", fontcolor="black", label=<{ImportDatabasesCommand|dao<br ALIGN="LEFT"/>import_error<br ALIGN="LEFT"/>model_name : str<br ALIGN="LEFT"/>prefix : str<br ALIGN="LEFT"/>schemas : dict[str, Schema]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.importers.dispatcher.ImportDatasetsCommand" [color="black", fontcolor="black", label=<{ImportDatasetsCommand|args : tuple<br ALIGN="LEFT"/>contents : dict[str, str]<br ALIGN="LEFT"/>kwargs : dict<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dataset.importers.v0.ImportDatasetsCommand" [color="black", fontcolor="black", label=<{ImportDatasetsCommand|contents : dict[str, str]<br ALIGN="LEFT"/>sync : list<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dataset.importers.v1.ImportDatasetsCommand" [color="black", fontcolor="black", label=<{ImportDatasetsCommand|dao<br ALIGN="LEFT"/>import_error<br ALIGN="LEFT"/>model_name : str<br ALIGN="LEFT"/>prefix : str<br ALIGN="LEFT"/>schemas : dict[str, Schema]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.importers.v1.examples.ImportExamplesCommand" [color="black", fontcolor="black", label=<{ImportExamplesCommand|dao<br ALIGN="LEFT"/>force_data<br ALIGN="LEFT"/>import_error<br ALIGN="LEFT"/>model_name : str<br ALIGN="LEFT"/>schemas : dict[str, Schema]<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.models.helpers.ImportExportMixin" [color="black", fontcolor="black", label=<{ImportExportMixin|changed_by : NoneType<br ALIGN="LEFT"/>created_by : NoneType<br ALIGN="LEFT"/>export_children : list[str]<br ALIGN="LEFT"/>export_fields : list[str]<br ALIGN="LEFT"/>export_parent : Optional[str]<br ALIGN="LEFT"/>extra_import_fields : list[str]<br ALIGN="LEFT"/>owners : list<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>params_dict<br ALIGN="LEFT"/>template_params_dict<br ALIGN="LEFT"/>|alter_params(): None<br ALIGN="LEFT"/>copy(): Any<br ALIGN="LEFT"/>export_schema(recursive: bool, include_parent_ref: bool): dict[str, Any]<br ALIGN="LEFT"/>export_to_dict(recursive: bool, include_parent_ref: bool, include_defaults: bool, export_uuids: bool): dict[Any, Any]<br ALIGN="LEFT"/>import_from_dict(dict_rep: dict[Any, Any], parent: Optional[Any], recursive: bool, sync: Optional[list[str]], allow_reparenting: bool): Any<br ALIGN="LEFT"/>override(obj: Any): None<br ALIGN="LEFT"/>parent_foreign_key_mappings(): dict[str, str]<br ALIGN="LEFT"/>remove_params(param_to_remove: str): None<br ALIGN="LEFT"/>reset_ownership(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.importexport.api.ImportExportRestApi" [color="black", fontcolor="black", label=<{ImportExportRestApi|allow_browser_login : bool<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>|export(): Response<br ALIGN="LEFT"/>import_(): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.exceptions.ImportFailedError" [color="black", fontcolor="red", label=<{ImportFailedError|message : str<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2020-09-28_17-57_b56500de1855_add_uuid_column_to_import_mixin.ImportMixin" [color="black", fontcolor="black", label=<{ImportMixin|id<br ALIGN="LEFT"/>uuid<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2020-10-21_21-09_96e99fb176a0_add_import_mixing_to_saved_query.ImportMixin" [color="black", fontcolor="black", label=<{ImportMixin|id<br ALIGN="LEFT"/>uuid<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.importers.v1.ImportModelsCommand" [color="black", fontcolor="black", label=<{ImportModelsCommand|contents : dict[str, str]<br ALIGN="LEFT"/>dao<br ALIGN="LEFT"/>import_error<br ALIGN="LEFT"/>model_name : str<br ALIGN="LEFT"/>overwrite : bool<br ALIGN="LEFT"/>passwords : dict[str, str]<br ALIGN="LEFT"/>prefix : str<br ALIGN="LEFT"/>schemas : dict[str, Schema]<br ALIGN="LEFT"/>ssh_tunnel_passwords : dict[str, str]<br ALIGN="LEFT"/>ssh_tunnel_priv_key_passwords : dict[str, str]<br ALIGN="LEFT"/>ssh_tunnel_private_keys : dict[str, str]<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.query.importers.dispatcher.ImportSavedQueriesCommand" [color="black", fontcolor="black", label=<{ImportSavedQueriesCommand|args : tuple<br ALIGN="LEFT"/>contents : dict[str, str]<br ALIGN="LEFT"/>kwargs : dict<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.query.importers.v1.ImportSavedQueriesCommand" [color="black", fontcolor="black", label=<{ImportSavedQueriesCommand|dao<br ALIGN="LEFT"/>import_error<br ALIGN="LEFT"/>model_name : str<br ALIGN="LEFT"/>prefix : str<br ALIGN="LEFT"/>schemas : dict[str, Schema]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ImportV1ChartSchema" [color="black", fontcolor="black", label=<{ImportV1ChartSchema|cache_timeout : Integer<br ALIGN="LEFT"/>certification_details : String<br ALIGN="LEFT"/>certified_by : String<br ALIGN="LEFT"/>dataset_uuid : UUID<br ALIGN="LEFT"/>description : String<br ALIGN="LEFT"/>external_url : String<br ALIGN="LEFT"/>is_managed_externally : Boolean<br ALIGN="LEFT"/>params : Dict<br ALIGN="LEFT"/>query_context : String<br ALIGN="LEFT"/>slice_name : String<br ALIGN="LEFT"/>uuid : UUID<br ALIGN="LEFT"/>version : String<br ALIGN="LEFT"/>viz_type : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.datasets.schemas.ImportV1ColumnSchema" [color="black", fontcolor="black", label=<{ImportV1ColumnSchema|advanced_data_type : String<br ALIGN="LEFT"/>column_name : String<br ALIGN="LEFT"/>description : String<br ALIGN="LEFT"/>expression : String<br ALIGN="LEFT"/>extra : Dict<br ALIGN="LEFT"/>filterable : Boolean<br ALIGN="LEFT"/>groupby : Boolean<br ALIGN="LEFT"/>is_active : Boolean<br ALIGN="LEFT"/>is_dttm : Boolean<br ALIGN="LEFT"/>python_date_format : String<br ALIGN="LEFT"/>type : String<br ALIGN="LEFT"/>verbose_name : String<br ALIGN="LEFT"/>|fix_extra(data: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.ImportV1DashboardSchema" [color="black", fontcolor="black", label=<{ImportV1DashboardSchema|certification_details : String<br ALIGN="LEFT"/>certified_by : String<br ALIGN="LEFT"/>css : String<br ALIGN="LEFT"/>dashboard_title : String<br ALIGN="LEFT"/>description : String<br ALIGN="LEFT"/>external_url : String<br ALIGN="LEFT"/>is_managed_externally : Boolean<br ALIGN="LEFT"/>metadata : Dict<br ALIGN="LEFT"/>position : Dict<br ALIGN="LEFT"/>published : Boolean<br ALIGN="LEFT"/>slug : String<br ALIGN="LEFT"/>uuid : UUID<br ALIGN="LEFT"/>version : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.ImportV1DatabaseExtraSchema" [color="black", fontcolor="black", label=<{ImportV1DatabaseExtraSchema|allow_multi_catalog : Boolean<br ALIGN="LEFT"/>allows_virtual_table_explore : Boolean<br ALIGN="LEFT"/>cancel_query_on_windows_unload : Boolean<br ALIGN="LEFT"/>cost_estimate_enabled : Boolean<br ALIGN="LEFT"/>disable_data_preview : Boolean<br ALIGN="LEFT"/>disable_drill_to_detail : Boolean<br ALIGN="LEFT"/>engine_params : Dict<br ALIGN="LEFT"/>metadata_cache_timeout : Dict<br ALIGN="LEFT"/>metadata_params : Dict<br ALIGN="LEFT"/>schemas_allowed_for_csv_upload : List<br ALIGN="LEFT"/>version : String<br ALIGN="LEFT"/>|fix_schemas_allowed_for_csv_upload(data: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.databases.schemas.ImportV1DatabaseSchema" [color="black", fontcolor="black", label=<{ImportV1DatabaseSchema|allow_csv_upload : Boolean<br ALIGN="LEFT"/>allow_ctas : Boolean<br ALIGN="LEFT"/>allow_cvas : Boolean<br ALIGN="LEFT"/>allow_dml : Boolean<br ALIGN="LEFT"/>allow_run_async : Boolean<br ALIGN="LEFT"/>cache_timeout : Integer<br ALIGN="LEFT"/>database_name : String<br ALIGN="LEFT"/>expose_in_sqllab : Boolean<br ALIGN="LEFT"/>external_url : String<br ALIGN="LEFT"/>extra : Nested<br ALIGN="LEFT"/>impersonate_user : Boolean<br ALIGN="LEFT"/>is_managed_externally : Boolean<br ALIGN="LEFT"/>password : String<br ALIGN="LEFT"/>sqlalchemy_uri : String<br ALIGN="LEFT"/>ssh_tunnel : Nested<br ALIGN="LEFT"/>uuid : UUID<br ALIGN="LEFT"/>version : String<br ALIGN="LEFT"/>|fix_allow_csv_upload(data: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>validate_password(data: dict[str, Any]): None<br ALIGN="LEFT"/>validate_ssh_tunnel_credentials(data: dict[str, Any]): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.datasets.schemas.ImportV1DatasetSchema" [color="black", fontcolor="black", label=<{ImportV1DatasetSchema|always_filter_main_dttm : Boolean<br ALIGN="LEFT"/>cache_timeout : Integer<br ALIGN="LEFT"/>catalog : String<br ALIGN="LEFT"/>columns : List<br ALIGN="LEFT"/>data : Url<br ALIGN="LEFT"/>database_uuid : UUID<br ALIGN="LEFT"/>default_endpoint : String<br ALIGN="LEFT"/>description : String<br ALIGN="LEFT"/>external_url : String<br ALIGN="LEFT"/>extra : Dict<br ALIGN="LEFT"/>fetch_values_predicate : String<br ALIGN="LEFT"/>filter_select_enabled : Boolean<br ALIGN="LEFT"/>is_managed_externally : Boolean<br ALIGN="LEFT"/>main_dttm_col : String<br ALIGN="LEFT"/>metrics : List<br ALIGN="LEFT"/>normalize_columns : Boolean<br ALIGN="LEFT"/>offset : Integer<br ALIGN="LEFT"/>params : Dict<br ALIGN="LEFT"/>schema : String<br ALIGN="LEFT"/>sql : String<br ALIGN="LEFT"/>table_name : String<br ALIGN="LEFT"/>template_params : Dict<br ALIGN="LEFT"/>uuid : UUID<br ALIGN="LEFT"/>version : String<br ALIGN="LEFT"/>|fix_extra(data: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.datasets.schemas.ImportV1MetricSchema" [color="black", fontcolor="black", label=<{ImportV1MetricSchema|currency : String<br ALIGN="LEFT"/>d3format : String<br ALIGN="LEFT"/>description : String<br ALIGN="LEFT"/>expression : String<br ALIGN="LEFT"/>extra : Dict<br ALIGN="LEFT"/>metric_name : String<br ALIGN="LEFT"/>metric_type : String<br ALIGN="LEFT"/>verbose_name : String<br ALIGN="LEFT"/>warning_text : String<br ALIGN="LEFT"/>|fix_extra(data: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.queries.saved_queries.schemas.ImportV1SavedQuerySchema" [color="black", fontcolor="black", label=<{ImportV1SavedQuerySchema|database_uuid : UUID<br ALIGN="LEFT"/>description : String<br ALIGN="LEFT"/>label : String<br ALIGN="LEFT"/>schema : String<br ALIGN="LEFT"/>sql : String<br ALIGN="LEFT"/>uuid : UUID<br ALIGN="LEFT"/>version : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.importers.exceptions.IncorrectFormatError" [color="black", fontcolor="black", label=<{IncorrectFormatError|message : str<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.importers.exceptions.IncorrectVersionError" [color="black", fontcolor="black", label=<{IncorrectVersionError|message : str<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.integration_tests.insert_chart_mixin.InsertChartMixin" [color="black", fontcolor="black", label=<{InsertChartMixin|<br ALIGN="LEFT"/>|insert_chart(slice_name: str, owners: list[int], datasource_id: int, created_by, datasource_type: str, description: Optional[str], viz_type: Optional[str], params: Optional[str], cache_timeout: Optional[int], certified_by: Optional[str], certification_details: Optional[str]): Slice<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sql_parse.InsertRLSState" [color="black", fontcolor="black", label=<{InsertRLSState|FOUND_TABLE : str<br ALIGN="LEFT"/>SCANNING : str<br ALIGN="LEFT"/>SEEN_SOURCE : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.constants.InstantTimeComparison" [color="black", fontcolor="black", label=<{InstantTimeComparison|INHERITED : str<br ALIGN="LEFT"/>MONTH : str<br ALIGN="LEFT"/>WEEK : str<br ALIGN="LEFT"/>YEAR : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.sql_types.presto_sql_types.Interval" [color="black", fontcolor="black", label=<{Interval|python_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.unit_tests.databases.schema_tests.InvalidEngine" [color="black", fontcolor="black", label=<{InvalidEngine|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.InvalidEngineError" [color="black", fontcolor="black", label=<{InvalidEngineError|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tasks.exceptions.InvalidExecutorError" [color="black", fontcolor="black", label=<{InvalidExecutorError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.InvalidParametersError" [color="black", fontcolor="black", label=<{InvalidParametersError|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.InvalidPayloadFormatError" [color="black", fontcolor="red", label=<{InvalidPayloadFormatError|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.InvalidPayloadSchemaError" [color="black", fontcolor="red", label=<{InvalidPayloadSchemaError|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.InvalidPostProcessingError" [color="black", fontcolor="red", label=<{InvalidPostProcessingError|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tags.exceptions.InvalidTagNameError" [color="black", fontcolor="red", label=<{InvalidTagNameError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.extensions.pylint.JSONLibraryImportChecker" [color="black", fontcolor="black", label=<{JSONLibraryImportChecker|exclude_files : list<br ALIGN="LEFT"/>msgs : dict<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>path_strip_prefix<br ALIGN="LEFT"/>priority : int<br ALIGN="LEFT"/>|visit_import(node: nodes.Import): None<br ALIGN="LEFT"/>visit_importfrom(node: nodes.ImportFrom): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.jinja_context.JinjaTemplateProcessor" [color="black", fontcolor="black", label=<{JinjaTemplateProcessor|<br ALIGN="LEFT"/>|set_context(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.key_value.types.JsonKeyValueCodec" [color="black", fontcolor="black", label=<{JsonKeyValueCodec|<br ALIGN="LEFT"/>|decode(value: bytes): dict[Any, Any]<br ALIGN="LEFT"/>encode(value: dict[Any, Any]): bytes<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.forms.JsonListField" [color="black", fontcolor="black", label=<{JsonListField|data : list[str]<br ALIGN="LEFT"/>widget : BS3TextFieldWidget<br ALIGN="LEFT"/>|process_formdata(valuelist: list[str]): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sql.parse.KQLSplitState" [color="black", fontcolor="black", label=<{KQLSplitState|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.core.KeyValue" [color="black", fontcolor="black", label=<{KeyValue|id<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.key_value.exceptions.KeyValueAccessDeniedError" [color="black", fontcolor="black", label=<{KeyValueAccessDeniedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.key_value.types.KeyValueCodec" [color="black", fontcolor="black", label=<{KeyValueCodec|<br ALIGN="LEFT"/>|<I>decode</I>(value: bytes): Any<br ALIGN="LEFT"/><I>encode</I>(value: Any): bytes<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.key_value.exceptions.KeyValueCodecDecodeException" [color="black", fontcolor="red", label=<{KeyValueCodecDecodeException|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.key_value.exceptions.KeyValueCodecEncodeException" [color="black", fontcolor="red", label=<{KeyValueCodecEncodeException|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.key_value.exceptions.KeyValueCodecException" [color="black", fontcolor="red", label=<{KeyValueCodecException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.key_value.exceptions.KeyValueCreateFailedError" [color="black", fontcolor="black", label=<{KeyValueCreateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.daos.key_value.KeyValueDAO" [color="black", fontcolor="black", label=<{KeyValueDAO|<br ALIGN="LEFT"/>|create_entry(resource: KeyValueResource, value: Any, codec: KeyValueCodec, key: Key \| None, expires_on: datetime \| None): KeyValueEntry<br ALIGN="LEFT"/>delete_entry(resource: KeyValueResource, key: Key): bool<br ALIGN="LEFT"/>delete_expired_entries(resource: KeyValueResource): None<br ALIGN="LEFT"/>get_entry(resource: KeyValueResource, key: Key): KeyValueEntry \| None<br ALIGN="LEFT"/>get_value(resource: KeyValueResource, key: Key, codec: KeyValueCodec): Any<br ALIGN="LEFT"/>update_entry(resource: KeyValueResource, value: Any, codec: KeyValueCodec, key: Key, expires_on: datetime \| None): KeyValueEntry<br ALIGN="LEFT"/>upsert_entry(resource: KeyValueResource, value: Any, codec: KeyValueCodec, key: Key, expires_on: datetime \| None): KeyValueEntry<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.key_value.exceptions.KeyValueDeleteFailedError" [color="black", fontcolor="black", label=<{KeyValueDeleteFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.key_value.models.KeyValueEntry" [color="black", fontcolor="black", label=<{KeyValueEntry|changed_by<br ALIGN="LEFT"/>changed_by_fk<br ALIGN="LEFT"/>changed_on<br ALIGN="LEFT"/>created_by<br ALIGN="LEFT"/>created_by_fk<br ALIGN="LEFT"/>created_on<br ALIGN="LEFT"/>expires_on<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>resource<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|is_expired(): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-06-27_14-59_7fb8bca906d2_permalink_rename_filterstate.KeyValueEntry" [color="black", fontcolor="black", label=<{KeyValueEntry|id<br ALIGN="LEFT"/>resource<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2023-05-01_12-03_9c2a5681ddfd_convert_key_value_entries_to_json.KeyValueEntry" [color="black", fontcolor="black", label=<{KeyValueEntry|id<br ALIGN="LEFT"/>resource<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.key_value.types.KeyValueFilter" [color="black", fontcolor="black", label=<{KeyValueFilter|id : int \| None<br ALIGN="LEFT"/>resource : str<br ALIGN="LEFT"/>uuid : UUID \| None<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.key_value.exceptions.KeyValueGetFailedError" [color="black", fontcolor="black", label=<{KeyValueGetFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.key_value.exceptions.KeyValueParseKeyError" [color="black", fontcolor="black", label=<{KeyValueParseKeyError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.key_value.types.KeyValueResource" [color="black", fontcolor="black", label=<{KeyValueResource|APP : str<br ALIGN="LEFT"/>DASHBOARD_PERMALINK : str<br ALIGN="LEFT"/>EXPLORE_PERMALINK : str<br ALIGN="LEFT"/>LOCK : str<br ALIGN="LEFT"/>METASTORE_CACHE : str<br ALIGN="LEFT"/>SQLLAB_PERMALINK : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.key_value.exceptions.KeyValueUpdateFailedError" [color="black", fontcolor="black", label=<{KeyValueUpdateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.key_value.exceptions.KeyValueUpsertFailedError" [color="black", fontcolor="black", label=<{KeyValueUpsertFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sql.parse.KustoKQLStatement" [color="black", fontcolor="black", label=<{KustoKQLStatement|<br ALIGN="LEFT"/>|format(comments: bool): str<br ALIGN="LEFT"/>get_settings(): dict[str, str \| bool]<br ALIGN="LEFT"/>is_mutating(): bool<br ALIGN="LEFT"/>optimize(): KustoKQLStatement<br ALIGN="LEFT"/>split_script(script: str, engine: str): list[KustoKQLStatement]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.kusto.KustoKqlEngineSpec" [color="black", fontcolor="black", label=<{KustoKqlEngineSpec|allows_joins : bool<br ALIGN="LEFT"/>allows_sql_comments : bool<br ALIGN="LEFT"/>allows_subqueries : bool<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>limit_method<br ALIGN="LEFT"/>run_multiple_statements_as_one : bool<br ALIGN="LEFT"/>time_groupby_inline : bool<br ALIGN="LEFT"/>type_code_map : dict[int, str]<br ALIGN="LEFT"/>|convert_dttm(target_type: str, dttm: datetime, db_extra: Optional[dict[str, Any]]): Optional[str]<br ALIGN="LEFT"/>get_dbapi_exception_mapping(): dict[type[Exception], type[Exception]]<br ALIGN="LEFT"/>is_select_query(parsed_query: ParsedQuery): bool<br ALIGN="LEFT"/>parse_sql(sql: str): list[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.kusto.KustoSqlEngineSpec" [color="black", fontcolor="black", label=<{KustoSqlEngineSpec|allows_joins : bool<br ALIGN="LEFT"/>allows_sql_comments : bool<br ALIGN="LEFT"/>allows_subqueries : bool<br ALIGN="LEFT"/>column_type_mappings : tuple<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>limit_method<br ALIGN="LEFT"/>time_groupby_inline : bool<br ALIGN="LEFT"/>type_code_map : dict[int, str]<br ALIGN="LEFT"/>|convert_dttm(target_type: str, dttm: datetime, db_extra: Optional[dict[str, Any]]): Optional[str]<br ALIGN="LEFT"/>get_dbapi_exception_mapping(): dict[type[Exception], type[Exception]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.kylin.KylinEngineSpec" [color="black", fontcolor="black", label=<{KylinEngineSpec|engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>|convert_dttm(target_type: str, dttm: datetime, db_extra: Optional[dict[str, Any]]): Optional[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.doris.LARGEINT" [color="black", fontcolor="black", label=<{LARGEINT|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.starrocks.LARGEINT" [color="black", fontcolor="black", label=<{LARGEINT|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.superset_typing.LegacyMetric" [color="black", fontcolor="black", label=<{LegacyMetric|label : Optional[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.base.LimitMethod" [color="black", fontcolor="black", label=<{LimitMethod|FETCH_MANY : str<br ALIGN="LEFT"/>FORCE_LIMIT : str<br ALIGN="LEFT"/>WRAP_SQL : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sqllab.limiting_factor.LimitingFactor" [color="black", fontcolor="black", label=<{LimitingFactor|DROPDOWN : str<br ALIGN="LEFT"/>NOT_LIMITED : str<br ALIGN="LEFT"/>QUERY : str<br ALIGN="LEFT"/>QUERY_AND_DROPDOWN : str<br ALIGN="LEFT"/>UNKNOWN : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.unit_tests.utils.test_decorators.ListHandler" [color="black", fontcolor="black", label=<{ListHandler|log_records : list[logging.LogRecord]<br ALIGN="LEFT"/>|emit(record: logging.LogRecord): None<br ALIGN="LEFT"/>reset(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.distributed_lock.types.LockValue" [color="black", fontcolor="black", label=<{LockValue|value : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.core.Log" [color="black", fontcolor="black", label=<{Log|action<br ALIGN="LEFT"/>dashboard_id<br ALIGN="LEFT"/>dttm<br ALIGN="LEFT"/>duration_ms<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>json<br ALIGN="LEFT"/>referrer<br ALIGN="LEFT"/>slice_id<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.daos.log.LogDAO" [color="black", fontcolor="black", label=<{LogDAO|<br ALIGN="LEFT"/>|get_recent_activity(actions: list[str], distinct: bool, page: int, page_size: int): list[dict[str, Any]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.views.log.LogMixin" [color="black", fontcolor="black", label=<{LogMixin|add_title : LazyString<br ALIGN="LEFT"/>base_order : tuple<br ALIGN="LEFT"/>edit_columns : list<br ALIGN="LEFT"/>edit_title : LazyString<br ALIGN="LEFT"/>label_columns : dict<br ALIGN="LEFT"/>list_columns : list<br ALIGN="LEFT"/>list_title : LazyString<br ALIGN="LEFT"/>show_title : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.log.views.LogModelView" [color="black", fontcolor="black", label=<{LogModelView|class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>include_route_methods : set<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>|ensure_enabled(): None<br ALIGN="LEFT"/>is_enabled(): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.views.log.api.LogRestApi" [color="black", fontcolor="black", label=<{LogRestApi|allow_browser_login : bool<br ALIGN="LEFT"/>apispec_parameter_schemas : dict<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>include_route_methods : set<br ALIGN="LEFT"/>list_columns : list<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>openapi_spec_component_schemas : tuple<br ALIGN="LEFT"/>openapi_spec_methods<br ALIGN="LEFT"/>page_size : int<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>show_columns : list<br ALIGN="LEFT"/>|ensure_enabled(): None<br ALIGN="LEFT"/>get_user_activity_access_error(user_id: int): Optional[FlaskResponse]<br ALIGN="LEFT"/>is_enabled(): bool<br ALIGN="LEFT"/>recent_activity(): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.core.LoggerLevel" [color="black", fontcolor="black", label=<{LoggerLevel|EXCEPTION : str<br ALIGN="LEFT"/>INFO : str<br ALIGN="LEFT"/>WARNING : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.logging_configurator.LoggingConfigurator" [color="black", fontcolor="black", label=<{LoggingConfigurator|<br ALIGN="LEFT"/>|<I>configure_logging</I>(app_config: flask.config.Config, debug_mode: bool): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.doris.MAP" [color="black", fontcolor="black", label=<{MAP|python_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.oceanbase.MAP" [color="black", fontcolor="black", label=<{MAP|python_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.starrocks.MAP" [color="black", fontcolor="black", label=<{MAP|python_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.machine_auth.MachineAuthProvider" [color="black", fontcolor="black", label=<{MachineAuthProvider|<br ALIGN="LEFT"/>|authenticate_browser_context(browser_context: BrowserContext, user: User): BrowserContext<br ALIGN="LEFT"/>authenticate_webdriver(driver: WebDriver, user: User): WebDriver<br ALIGN="LEFT"/>get_auth_cookies(user: User): dict[str, str]<br ALIGN="LEFT"/>get_cookies(user: User \| None): dict[str, str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.machine_auth.MachineAuthProviderFactory" [color="black", fontcolor="black", label=<{MachineAuthProviderFactory|instance<br ALIGN="LEFT"/>|init_app(app: Flask): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.utils.machine_auth_tests.MachineAuthProviderTests" [color="black", fontcolor="black", label=<{MachineAuthProviderTests|<br ALIGN="LEFT"/>|test_auth_driver_request(request)<br ALIGN="LEFT"/>test_auth_driver_user(get_auth_cookies)<br ALIGN="LEFT"/>test_get_auth_cookies()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.models.sql_types.presto_sql_types.Map" [color="black", fontcolor="black", label=<{Map|python_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.viz.MapboxViz" [color="black", fontcolor="black", label=<{MapboxViz|credits : str<br ALIGN="LEFT"/>is_timeseries : bool<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>query_obj(): QueryObjectDict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.mariadb.MariaDBEngineSpec" [color="black", fontcolor="black", label=<{MariaDBEngineSpec|engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.key_value.types.MarshmallowKeyValueCodec" [color="black", fontcolor="black", label=<{MarshmallowKeyValueCodec|schema : Schema<br ALIGN="LEFT"/>|decode(value: bytes): dict[Any, Any]<br ALIGN="LEFT"/>encode(value: dict[Any, Any]): bytes<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataQueryObjectSchema.Meta" [color="black", fontcolor="black", label=<{Meta|unknown : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.DatabaseValidateParametersSchema.Meta" [color="black", fontcolor="black", label=<{Meta|unknown : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.DatabasePostSchema.Meta" [color="black", fontcolor="black", label=<{Meta|unknown : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.DatabasePutSchema.Meta" [color="black", fontcolor="black", label=<{Meta|unknown : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.OAuth2ProviderResponseSchema.Meta" [color="black", fontcolor="black", label=<{Meta|unknown : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.queries.schemas.QuerySchema.Meta" [color="black", fontcolor="black", label=<{Meta|include_relationships : bool<br ALIGN="LEFT"/>load_instance : bool<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.security.api.PermissiveSchema.Meta" [color="black", fontcolor="black", label=<{Meta|unknown : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.oauth2.OAuth2StateSchema.Meta" [color="black", fontcolor="black", label=<{Meta|unknown : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.connectors.sqla.models.MetadataResult" [color="black", fontcolor="black", label=<{MetadataResult|added : list[str]<br ALIGN="LEFT"/>modified : list[str]<br ALIGN="LEFT"/>removed : list[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.importers.v1.utils.MetadataSchema" [color="black", fontcolor="black", label=<{MetadataSchema|timestamp : DateTime<br ALIGN="LEFT"/>type : String<br ALIGN="LEFT"/>version : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.base.MetricType" [color="black", fontcolor="black", label=<{MetricType|currency : str \| None<br ALIGN="LEFT"/>d3format : str \| None<br ALIGN="LEFT"/>description : str \| None<br ALIGN="LEFT"/>expression : str<br ALIGN="LEFT"/>extra : str \| None<br ALIGN="LEFT"/>metric_name : str<br ALIGN="LEFT"/>metric_type : str \| None<br ALIGN="LEFT"/>verbose_name : str \| None<br ALIGN="LEFT"/>warning_text : str \| None<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.shared.migrate_viz.processors.MigrateAreaChart" [color="black", fontcolor="black", label=<{MigrateAreaChart|source_viz_type : str<br ALIGN="LEFT"/>stacked_map : dict<br ALIGN="LEFT"/>target_viz_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.shared.migrate_viz.processors.MigrateBarChart" [color="black", fontcolor="black", label=<{MigrateBarChart|source_viz_type : str<br ALIGN="LEFT"/>target_viz_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.shared.migrate_viz.processors.MigrateBubbleChart" [color="black", fontcolor="black", label=<{MigrateBubbleChart|remove_keys : set<br ALIGN="LEFT"/>rename_keys : dict<br ALIGN="LEFT"/>source_viz_type : str<br ALIGN="LEFT"/>target_viz_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.shared.migrate_viz.processors.MigrateDistBarChart" [color="black", fontcolor="black", label=<{MigrateDistBarChart|has_x_axis_control : bool<br ALIGN="LEFT"/>source_viz_type : str<br ALIGN="LEFT"/>target_viz_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.shared.migrate_viz.processors.MigrateDualLine" [color="black", fontcolor="black", label=<{MigrateDualLine|has_x_axis_control : bool<br ALIGN="LEFT"/>remove_keys : set<br ALIGN="LEFT"/>rename_keys : dict<br ALIGN="LEFT"/>source_viz_type : str<br ALIGN="LEFT"/>target_viz_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.shared.migrate_viz.processors.MigrateHeatmapChart" [color="black", fontcolor="black", label=<{MigrateHeatmapChart|remove_keys : set<br ALIGN="LEFT"/>rename_keys : dict<br ALIGN="LEFT"/>source_viz_type : str<br ALIGN="LEFT"/>target_viz_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.shared.migrate_viz.processors.MigrateHistogramChart" [color="black", fontcolor="black", label=<{MigrateHistogramChart|remove_keys : set<br ALIGN="LEFT"/>rename_keys : dict<br ALIGN="LEFT"/>source_viz_type : str<br ALIGN="LEFT"/>target_viz_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.shared.migrate_viz.processors.MigrateLineChart" [color="black", fontcolor="black", label=<{MigrateLineChart|source_viz_type : str<br ALIGN="LEFT"/>target_viz_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.shared.migrate_viz.processors.MigratePivotTable" [color="black", fontcolor="black", label=<{MigratePivotTable|aggregation_mapping : dict<br ALIGN="LEFT"/>remove_keys : set<br ALIGN="LEFT"/>rename_keys : dict<br ALIGN="LEFT"/>source_viz_type : str<br ALIGN="LEFT"/>target_viz_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.shared.migrate_viz.processors.MigrateSankey" [color="black", fontcolor="black", label=<{MigrateSankey|remove_keys : set<br ALIGN="LEFT"/>source_viz_type : str<br ALIGN="LEFT"/>target_viz_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.shared.migrate_viz.processors.MigrateSunburst" [color="black", fontcolor="black", label=<{MigrateSunburst|rename_keys : dict<br ALIGN="LEFT"/>source_viz_type : str<br ALIGN="LEFT"/>target_viz_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.shared.migrate_viz.processors.MigrateTreeMap" [color="black", fontcolor="black", label=<{MigrateTreeMap|remove_keys : set<br ALIGN="LEFT"/>rename_keys : dict<br ALIGN="LEFT"/>source_viz_type : str<br ALIGN="LEFT"/>target_viz_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.shared.migrate_viz.base.MigrateViz" [color="black", fontcolor="black", label=<{MigrateViz|data : dict<br ALIGN="LEFT"/>has_x_axis_control : bool<br ALIGN="LEFT"/>remove_keys : set[str]<br ALIGN="LEFT"/>rename_keys : dict[str, str]<br ALIGN="LEFT"/>source_viz_type : str<br ALIGN="LEFT"/>target_viz_type : str<br ALIGN="LEFT"/>|downgrade(session: Session): None<br ALIGN="LEFT"/>downgrade_slice(slc: Slice): None<br ALIGN="LEFT"/>upgrade(session: Session): None<br ALIGN="LEFT"/>upgrade_slice(slc: Slice): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.exceptions.MissingUserContextException" [color="black", fontcolor="red", label=<{MissingUserContextException|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.unit_tests.utils.slack_test.MockResponse" [color="black", fontcolor="black", label=<{MockResponse|data<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.unit_tests.utils.test_core.MockZipInfo" [color="black", fontcolor="black", label=<{MockZipInfo|compress_size : int<br ALIGN="LEFT"/>file_size : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.integration_tests.base_api_tests.Model1Api" [color="black", fontcolor="black", label=<{Model1Api|allow_browser_login : bool<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>method_permission_name : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.unit_tests.tasks.test_utils.ModelConfig" [color="black", fontcolor="black", label=<{ModelConfig|creator : Optional[int]<br ALIGN="LEFT"/>modifier : Optional[int]<br ALIGN="LEFT"/>owners : list[int]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.unit_tests.tasks.test_utils.ModelType" [color="black", fontcolor="black", label=<{ModelType|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.duckdb.MotherDuckEngineSpec" [color="black", fontcolor="black", label=<{MotherDuckEngineSpec|engine : str<br ALIGN="LEFT"/>engine_aliases : set[str]<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>|build_sqlalchemy_uri(parameters: DuckDBParametersType, encrypted_extra: dict[str, str] \| None): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.mssql.MssqlEngineSpec" [color="black", fontcolor="black", label=<{MssqlEngineSpec|allow_limit_clause : bool<br ALIGN="LEFT"/>allows_cte_in_subquery : bool<br ALIGN="LEFT"/>column_type_mappings : tuple<br ALIGN="LEFT"/>custom_errors : dict[Pattern[str], tuple[str, SupersetErrorType, dict[str, Any]]]<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>limit_method<br ALIGN="LEFT"/>max_column_name_length : int<br ALIGN="LEFT"/>supports_multivalues_insert : bool<br ALIGN="LEFT"/>|convert_dttm(target_type: str, dttm: datetime, db_extra: Optional[dict[str, Any]]): Optional[str]<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>extract_error_message(ex: Exception): str<br ALIGN="LEFT"/>fetch_data(cursor: Any, limit: Optional[int]): list[tuple[Any, ...]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.logging_configurator_tests.TestLoggingConfigurator.test_configurator_adding_handler.MyConfigurator" [color="black", fontcolor="black", label=<{MyConfigurator|handler<br ALIGN="LEFT"/>|configure_logging(app_config, debug_mode)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.logging_configurator_tests.TestLoggingConfigurator.test_configurator_adding_handler.MyEventHandler" [color="black", fontcolor="black", label=<{MyEventHandler|received : bool<br ALIGN="LEFT"/>|handle(record)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.mysql.MySQLEngineSpec" [color="black", fontcolor="black", label=<{MySQLEngineSpec|column_type_mappings : tuple<br ALIGN="LEFT"/>column_type_mutators : dict[types.TypeEngine, Callable[[Any], Any]]<br ALIGN="LEFT"/>custom_errors : dict[Pattern[str], tuple[str, SupersetErrorType, dict[str, Any]]]<br ALIGN="LEFT"/>default_driver : str<br ALIGN="LEFT"/>disallow_uri_query_params : dict<br ALIGN="LEFT"/>encryption_parameters : dict<br ALIGN="LEFT"/>enforce_uri_query_params : dict<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>max_column_name_length : int<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>supports_dynamic_schema : bool<br ALIGN="LEFT"/>type_code_map : dict[int, str]<br ALIGN="LEFT"/>|adjust_engine_params(uri: URL, connect_args: dict[str, Any], catalog: Optional[str], schema: Optional[str]): tuple[URL, dict[str, Any]]<br ALIGN="LEFT"/>cancel_query(cursor: Any, query: Query, cancel_query_id: str): bool<br ALIGN="LEFT"/>convert_dttm(target_type: str, dttm: datetime, db_extra: Optional[dict[str, Any]]): Optional[str]<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>get_cancel_query_id(cursor: Any, query: Query): Optional[str]<br ALIGN="LEFT"/>get_datatype(type_code: Any): Optional[str]<br ALIGN="LEFT"/>get_schema_from_engine_params(sqlalchemy_uri: URL, connect_args: dict[str, Any]): Optional[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.oceanbase.NUMBER" [color="black", fontcolor="black", label=<{NUMBER|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.oceanbase.NUMERIC" [color="black", fontcolor="black", label=<{NUMERIC|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.viz.NVD3CompareTimeSeriesViz" [color="black", fontcolor="black", label=<{NVD3CompareTimeSeriesViz|verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.viz.NVD3TimePivotViz" [color="black", fontcolor="black", label=<{NVD3TimePivotViz|sort_series : bool<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>query_obj(): QueryObjectDict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.viz.NVD3TimeSeriesViz" [color="black", fontcolor="black", label=<{NVD3TimeSeriesViz|is_timeseries : bool<br ALIGN="LEFT"/>pivot_fill_value : int \| None<br ALIGN="LEFT"/>sort_series : bool<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>process_data(df: pd.DataFrame, aggregate: bool): VizData<br ALIGN="LEFT"/>query_obj(): QueryObjectDict<br ALIGN="LEFT"/>run_extra_queries(): None<br ALIGN="LEFT"/>to_series(df: pd.DataFrame, classed: str, title_suffix: str): list[dict[str, Any]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.viz.NVD3Viz" [color="black", fontcolor="black", label=<{NVD3Viz|credits : str<br ALIGN="LEFT"/>is_timeseries : bool<br ALIGN="LEFT"/>verbose_name : str<br ALIGN="LEFT"/>viz_type : str \| None<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.netezza.NetezzaEngineSpec" [color="black", fontcolor="black", label=<{NetezzaEngineSpec|default_driver : str<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>|epoch_to_dttm(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.NewColumn" [color="black", fontcolor="black", label=<{NewColumn|description<br ALIGN="LEFT"/>expression<br ALIGN="LEFT"/>external_url<br ALIGN="LEFT"/>extra_json<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>is_additive<br ALIGN="LEFT"/>is_aggregation<br ALIGN="LEFT"/>is_dimensional<br ALIGN="LEFT"/>is_filterable<br ALIGN="LEFT"/>is_increase_desired<br ALIGN="LEFT"/>is_managed_externally<br ALIGN="LEFT"/>is_partition<br ALIGN="LEFT"/>is_physical<br ALIGN="LEFT"/>is_spatial<br ALIGN="LEFT"/>is_temporal<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>table_id<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>warning_text<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.NewDataset" [color="black", fontcolor="black", label=<{NewDataset|database_id<br ALIGN="LEFT"/>expression<br ALIGN="LEFT"/>external_url<br ALIGN="LEFT"/>extra_json<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>is_managed_externally<br ALIGN="LEFT"/>is_physical<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.NewTable" [color="black", fontcolor="black", label=<{NewTable|catalog<br ALIGN="LEFT"/>database<br ALIGN="LEFT"/>database_id<br ALIGN="LEFT"/>external_url<br ALIGN="LEFT"/>extra_json<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>is_managed_externally<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>schema<br ALIGN="LEFT"/>sqlatable_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.NoDataException" [color="black", fontcolor="red", label=<{NoDataException|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.unit_tests.db_engine_specs.test_base.test_select_star.NoLimitDBEngineSpec" [color="black", fontcolor="black", label=<{NoLimitDBEngineSpec|allow_limit_clause : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.jinja_context.NoOpTemplateProcessor" [color="black", fontcolor="black", label=<{NoOpTemplateProcessor|<br ALIGN="LEFT"/>|process_template(sql: str): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.importers.exceptions.NoValidFilesFoundError" [color="black", fontcolor="black", label=<{NoValidFilesFoundError|message : str<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.NoValidatorConfigFoundError" [color="black", fontcolor="black", label=<{NoValidatorConfigFoundError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.NoValidatorFoundError" [color="black", fontcolor="black", label=<{NoValidatorFoundError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.common.not_authorized_object.NotAuthorizedException" [color="black", fontcolor="red", label=<{NotAuthorizedException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.common.not_authorized_object.NotAuthorizedObject" [color="black", fontcolor="black", label=<{NotAuthorizedObject|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.notifications.exceptions.NotificationAuthorizationException" [color="black", fontcolor="red", label=<{NotificationAuthorizationException|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.notifications.base.NotificationContent" [color="black", fontcolor="black", label=<{NotificationContent|csv : Optional[bytes]<br ALIGN="LEFT"/>description : Optional[str]<br ALIGN="LEFT"/>embedded_data : Optional[pd.DataFrame]<br ALIGN="LEFT"/>header_data<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>pdf : Optional[bytes]<br ALIGN="LEFT"/>screenshots : Optional[list[bytes]]<br ALIGN="LEFT"/>text : Optional[str]<br ALIGN="LEFT"/>url : Optional[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.notifications.exceptions.NotificationError" [color="black", fontcolor="black", label=<{NotificationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.notifications.exceptions.NotificationMalformedException" [color="black", fontcolor="red", label=<{NotificationMalformedException|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.notifications.exceptions.NotificationParamException" [color="black", fontcolor="red", label=<{NotificationParamException|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.notifications.exceptions.NotificationUnprocessableException" [color="black", fontcolor="red", label=<{NotificationUnprocessableException|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.NullValueException" [color="black", fontcolor="red", label=<{NullValueException|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.superset_typing.OAuth2ClientConfig" [color="black", fontcolor="black", label=<{OAuth2ClientConfig|authorization_request_uri : str<br ALIGN="LEFT"/>id : str<br ALIGN="LEFT"/>redirect_uri : str<br ALIGN="LEFT"/>request_content_type : str<br ALIGN="LEFT"/>scope : str<br ALIGN="LEFT"/>secret : str<br ALIGN="LEFT"/>token_request_uri : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.oauth2.OAuth2ClientConfigSchema" [color="black", fontcolor="black", label=<{OAuth2ClientConfigSchema|authorization_request_uri : String<br ALIGN="LEFT"/>id : String<br ALIGN="LEFT"/>redirect_uri : String<br ALIGN="LEFT"/>request_content_type : String<br ALIGN="LEFT"/>scope : String<br ALIGN="LEFT"/>secret : String<br ALIGN="LEFT"/>token_request_uri : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.OAuth2Error" [color="black", fontcolor="red", label=<{OAuth2Error|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.OAuth2ProviderResponseSchema" [color="black", fontcolor="black", label=<{OAuth2ProviderResponseSchema|code : String<br ALIGN="LEFT"/>error : String<br ALIGN="LEFT"/>error_description : String<br ALIGN="LEFT"/>scope : String<br ALIGN="LEFT"/>state : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.OAuth2RedirectError" [color="black", fontcolor="red", label=<{OAuth2RedirectError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.superset_typing.OAuth2State" [color="black", fontcolor="black", label=<{OAuth2State|database_id : int<br ALIGN="LEFT"/>default_redirect_uri : str<br ALIGN="LEFT"/>tab_id : str<br ALIGN="LEFT"/>user_id : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.oauth2.OAuth2StateSchema" [color="black", fontcolor="black", label=<{OAuth2StateSchema|database_id : Integer<br ALIGN="LEFT"/>default_redirect_uri : String<br ALIGN="LEFT"/>tab_id : String<br ALIGN="LEFT"/>user_id : Integer<br ALIGN="LEFT"/>|make_oauth2_state(data: dict[str, Any]): OAuth2State<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.superset_typing.OAuth2TokenResponse" [color="black", fontcolor="black", label=<{OAuth2TokenResponse|access_token : str<br ALIGN="LEFT"/>expires_in : int<br ALIGN="LEFT"/>refresh_token : str<br ALIGN="LEFT"/>scope : str<br ALIGN="LEFT"/>token_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.exceptions.ObjectNotFoundError" [color="black", fontcolor="red", label=<{ObjectNotFoundError|message_format : str<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2024-01-17_13-09_96164e3017c6_tagged_object_unique_constraint.ObjectType" [color="black", fontcolor="black", label=<{ObjectType|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tags.models.ObjectType" [color="black", fontcolor="black", label=<{ObjectType|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.url_map_converters.ObjectTypeConverter" [color="black", fontcolor="black", label=<{ObjectTypeConverter|<br ALIGN="LEFT"/>|to_python(value: str): Any<br ALIGN="LEFT"/>to_url(value: Any): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.tags.models.ObjectUpdater" [color="black", fontcolor="black", label=<{ObjectUpdater|object_type : str<br ALIGN="LEFT"/>|add_tag_object_if_not_tagged(session: orm.Session, tag_id: int, object_id: int, object_type: str): None<br ALIGN="LEFT"/>after_delete(_mapper: Mapper, connection: Connection, target: Dashboard \| FavStar \| Slice \| Query \| SqlaTable): None<br ALIGN="LEFT"/>after_insert(_mapper: Mapper, connection: Connection, target: Dashboard \| FavStar \| Slice \| Query \| SqlaTable): None<br ALIGN="LEFT"/>after_update(_mapper: Mapper, connection: Connection, target: Dashboard \| FavStar \| Slice \| Query \| SqlaTable): None<br ALIGN="LEFT"/>get_owner_tag_ids(session: orm.Session, target: Dashboard \| FavStar \| Slice \| Query \| SqlaTable): set[int]<br ALIGN="LEFT"/><I>get_owners_ids</I>(target: Dashboard \| FavStar \| Slice \| Query \| SqlaTable): list[int]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.oceanbase.OceanBaseEngineSpec" [color="black", fontcolor="black", label=<{OceanBaseEngineSpec|column_type_mappings : tuple<br ALIGN="LEFT"/>custom_errors : dict[Pattern[str], tuple[str, SupersetErrorType, dict[str, Any]]]<br ALIGN="LEFT"/>default_driver : str<br ALIGN="LEFT"/>encryption_parameters : dict<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_aliases : set<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>max_column_name_length : int<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>supports_dynamic_schema : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.ocient.OcientEngineSpec" [color="black", fontcolor="black", label=<{OcientEngineSpec|allows_cte_in_subquery : bool<br ALIGN="LEFT"/>cte_alias : str<br ALIGN="LEFT"/>custom_errors : dict[Pattern[str], tuple[str, SupersetErrorType, dict[str, Any]]]<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>force_column_alias_quotes : bool<br ALIGN="LEFT"/>max_column_name_length : int<br ALIGN="LEFT"/>query_id_mapping : dict[str, str]<br ALIGN="LEFT"/>query_id_mapping_lock : lock<br ALIGN="LEFT"/>|cancel_query(cursor: Any, query: Query, cancel_query_id: str): bool<br ALIGN="LEFT"/>epoch_ms_to_dttm(): str<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>fetch_data(cursor: Any, limit: Optional[int]): list[tuple[Any, ...]]<br ALIGN="LEFT"/>get_cancel_query_id(cursor: Any, query: Query): Optional[str]<br ALIGN="LEFT"/>get_table_names(database: Database, inspector: Inspector, schema: Optional[str]): set[str]<br ALIGN="LEFT"/>handle_cursor(cursor: Any, query: Query): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.unit_tests.models.core_test.test_get_db_engine_spec.OldDBEngineSpec" [color="black", fontcolor="black", label=<{OldDBEngineSpec|engine : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.schema.OneOfCaseInsensitive" [color="black", fontcolor="black", label=<{OneOfCaseInsensitive|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.elasticsearch.OpenDistroEngineSpec" [color="black", fontcolor="black", label=<{OpenDistroEngineSpec|allows_joins : bool<br ALIGN="LEFT"/>allows_sql_comments : bool<br ALIGN="LEFT"/>allows_subqueries : bool<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>time_groupby_inline : bool<br ALIGN="LEFT"/>|convert_dttm(target_type: str, dttm: datetime, db_extra: Optional[dict[str, Any]]): Optional[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.oracle.OracleEngineSpec" [color="black", fontcolor="black", label=<{OracleEngineSpec|engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>force_column_alias_quotes : bool<br ALIGN="LEFT"/>limit_method<br ALIGN="LEFT"/>max_column_name_length : int<br ALIGN="LEFT"/>|convert_dttm(target_type: str, dttm: datetime, db_extra: Optional[dict[str, Any]]): Optional[str]<br ALIGN="LEFT"/>epoch_ms_to_dttm(): str<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>fetch_data(cursor: Any, limit: Optional[int]): list[tuple[Any, ...]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.exceptions.OwnersNotFoundValidationError" [color="black", fontcolor="red", label=<{OwnersNotFoundValidationError|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.OwnersNotFoundValidationError" [color="black", fontcolor="red", label=<{OwnersNotFoundValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.starrocks.PERCENTILE" [color="black", fontcolor="black", label=<{PERCENTILE|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.viz.PairedTTestViz" [color="black", fontcolor="black", label=<{PairedTTestViz|is_timeseries : bool<br ALIGN="LEFT"/>sort_series : bool<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>query_obj(): QueryObjectDict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.constants.PandasAxis" [color="black", fontcolor="black", label=<{PandasAxis|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.example_data.data_loading.pandas.pandas_data_loader.PandasDataLoader" [color="black", fontcolor="black", label=<{PandasDataLoader|<br ALIGN="LEFT"/>|load_table(table: Table): None<br ALIGN="LEFT"/>remove_table(table_name: str): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.example_data.data_loading.pandas.pands_data_loading_conf.PandasLoaderConfigurations" [color="black", fontcolor="black", label=<{PandasLoaderConfigurations|chunksize : int<br ALIGN="LEFT"/>if_exists : str<br ALIGN="LEFT"/>index : bool<br ALIGN="LEFT"/>method : str<br ALIGN="LEFT"/>strftime : str<br ALIGN="LEFT"/>support_datetime_type : bool<br ALIGN="LEFT"/>|make_default(): PandasLoaderConfigurations<br ALIGN="LEFT"/>make_from_dict(_dict: dict[str, Any]): PandasLoaderConfigurations<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.constants.PandasPostprocessingCompare" [color="black", fontcolor="black", label=<{PandasPostprocessingCompare|DIFF : str<br ALIGN="LEFT"/>PCT : str<br ALIGN="LEFT"/>RAT : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.viz.ParallelCoordinatesViz" [color="black", fontcolor="black", label=<{ParallelCoordinatesViz|credits : str<br ALIGN="LEFT"/>is_timeseries : bool<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>query_obj(): QueryObjectDict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sql_parse.ParsedQuery" [color="black", fontcolor="black", label=<{ParsedQuery|limit<br ALIGN="LEFT"/>sql : str<br ALIGN="LEFT"/>tables<br ALIGN="LEFT"/>|as_create_table(table_name: str, schema_name: str \| None, overwrite: bool, method: CtasMethod): str<br ALIGN="LEFT"/>check_functions_exist(functions: set[str]): bool<br ALIGN="LEFT"/>get_inner_cte_expression(tokens: TokenList): TokenList \| None<br ALIGN="LEFT"/>get_statements(): list[str]<br ALIGN="LEFT"/>get_table(tlist: TokenList): Table \| None<br ALIGN="LEFT"/>is_explain(): bool<br ALIGN="LEFT"/>is_select(): bool<br ALIGN="LEFT"/>is_set(): bool<br ALIGN="LEFT"/>is_show(): bool<br ALIGN="LEFT"/>is_unknown(): bool<br ALIGN="LEFT"/>is_valid_ctas(): bool<br ALIGN="LEFT"/>is_valid_cvas(): bool<br ALIGN="LEFT"/>set_or_update_query_limit(new_limit: int, force: bool): str<br ALIGN="LEFT"/>strip_comments(): str<br ALIGN="LEFT"/>stripped(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sql.dialects.firebolt.Firebolt.Parser" [color="black", fontcolor="black", label=<{Parser|UNARY_PARSERS : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sql.dialects.firebolt.FireboltOld.Parser" [color="black", fontcolor="black", label=<{Parser|TABLE_ALIAS_TOKENS<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.viz.PartitionViz" [color="black", fontcolor="black", label=<{PartitionViz|verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>levels_for(time_op: str, groups: list[str], df: pd.DataFrame): dict[int, pd.Series]<br ALIGN="LEFT"/>levels_for_diff(time_op: str, groups: list[str], df: pd.DataFrame): dict[int, pd.DataFrame]<br ALIGN="LEFT"/>levels_for_time(groups: list[str], df: pd.DataFrame): dict[int, VizData]<br ALIGN="LEFT"/>nest_procs(procs: dict[int, pd.DataFrame], level: int, dims: tuple[str, ...] \| None, time: Any): list[dict[str, Any]]<br ALIGN="LEFT"/>nest_values(levels: dict[int, pd.DataFrame], level: int, metric: str \| None, dims: list[str] \| None): list[dict[str, Any]]<br ALIGN="LEFT"/>query_obj(): QueryObjectDict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.migrations.shared.security_converge.Permission" [color="black", fontcolor="black", label=<{Permission|id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2020-09-24_12-04_3fbbc6e8d654_fix_data_access_permissions_for_virtual_.Permission" [color="black", fontcolor="black", label=<{Permission|id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-05-18_16-07_e786798587de_delete_none_permissions.Permission" [color="black", fontcolor="black", label=<{Permission|id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.shared.security_converge.PermissionView" [color="black", fontcolor="black", label=<{PermissionView|id<br ALIGN="LEFT"/>permission<br ALIGN="LEFT"/>permission_id<br ALIGN="LEFT"/>view_menu<br ALIGN="LEFT"/>view_menu_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2020-09-24_12-04_3fbbc6e8d654_fix_data_access_permissions_for_virtual_.PermissionView" [color="black", fontcolor="black", label=<{PermissionView|id<br ALIGN="LEFT"/>permission<br ALIGN="LEFT"/>permission_id<br ALIGN="LEFT"/>view_menu<br ALIGN="LEFT"/>view_menu_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-05-18_16-07_e786798587de_delete_none_permissions.PermissionView" [color="black", fontcolor="black", label=<{PermissionView|id<br ALIGN="LEFT"/>permission<br ALIGN="LEFT"/>permission_id<br ALIGN="LEFT"/>view_menu<br ALIGN="LEFT"/>view_menu_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.security.api.PermissiveSchema" [color="black", fontcolor="black", label=<{PermissiveSchema|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.key_value.types.PickleKeyValueCodec" [color="black", fontcolor="black", label=<{PickleKeyValueCodec|<br ALIGN="LEFT"/>|decode(value: bytes): dict[Any, Any]<br ALIGN="LEFT"/>encode(value: dict[Any, Any]): bytes<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.pinot.PinotEngineSpec" [color="black", fontcolor="black", label=<{PinotEngineSpec|allows_alias_in_orderby : bool<br ALIGN="LEFT"/>allows_alias_in_select : bool<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>|column_datatype_to_string(sqla_column_type: TypeEngine, dialect: Dialect): str<br ALIGN="LEFT"/>epoch_ms_to_dttm(): str<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.ocient.PlacedSanitizeFunc" [color="black", fontcolor="black", label=<{PlacedSanitizeFunc|column_index : int<br ALIGN="LEFT"/>sanitize_func : Callable<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.core.PostProcessingBoxplotWhiskerType" [color="black", fontcolor="black", label=<{PostProcessingBoxplotWhiskerType|MINMAX : str<br ALIGN="LEFT"/>PERCENTILE : str<br ALIGN="LEFT"/>TUKEY : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.core.PostProcessingContributionOrientation" [color="black", fontcolor="black", label=<{PostProcessingContributionOrientation|COLUMN : str<br ALIGN="LEFT"/>ROW : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sql_validators.postgres.PostgreSQLValidator" [color="black", fontcolor="black", label=<{PostgreSQLValidator|name : str<br ALIGN="LEFT"/>|validate(sql: str, catalog: str \| None, schema: str \| None, database: Database): list[SQLValidationAnnotation]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.postgres.PostgresBaseEngineSpec" [color="black", fontcolor="black", label=<{PostgresBaseEngineSpec|custom_errors : dict[Pattern[str], tuple[str, SupersetErrorType, dict[str, Any]]]<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>|convert_dttm(target_type: str, dttm: datetime, db_extra: dict[str, Any] \| None): str \| None<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>fetch_data(cursor: Any, limit: int \| None): list[tuple[Any, ...]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.unit_tests.models.core_test.test_get_db_engine_spec.PostgresDBEngineSpec" [color="black", fontcolor="black", label=<{PostgresDBEngineSpec|default_driver : str<br ALIGN="LEFT"/>drivers : dict<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_aliases : set<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.postgres.PostgresEngineSpec" [color="black", fontcolor="black", label=<{PostgresEngineSpec|column_type_mappings : tuple<br ALIGN="LEFT"/>default_driver : str<br ALIGN="LEFT"/>encryption_parameters : dict<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_aliases : set<br ALIGN="LEFT"/>max_column_name_length : int<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>supports_catalog : bool<br ALIGN="LEFT"/>supports_dynamic_catalog : bool<br ALIGN="LEFT"/>supports_dynamic_schema : bool<br ALIGN="LEFT"/>try_remove_schema_from_table_name : bool<br ALIGN="LEFT"/>|adjust_engine_params(uri: URL, connect_args: dict[str, Any], catalog: str \| None, schema: str \| None): tuple[URL, dict[str, Any]]<br ALIGN="LEFT"/>cancel_query(cursor: Any, query: Query, cancel_query_id: str): bool<br ALIGN="LEFT"/>estimate_statement_cost(database: Database, statement: str, cursor: Any): dict[str, Any]<br ALIGN="LEFT"/>get_allow_cost_estimate(extra: dict[str, Any]): bool<br ALIGN="LEFT"/>get_cancel_query_id(cursor: Any, query: Query): str \| None<br ALIGN="LEFT"/>get_catalog_names(database: Database, inspector: Inspector): set[str]<br ALIGN="LEFT"/>get_datatype(type_code: Any): str \| None<br ALIGN="LEFT"/>get_default_catalog(database: Database): str \| None<br ALIGN="LEFT"/>get_default_schema_for_query(database: Database, query: Query): str \| None<br ALIGN="LEFT"/>get_extra_params(database: Database): dict[str, Any]<br ALIGN="LEFT"/>get_prequeries(database: Database, catalog: str \| None, schema: str \| None): list[str]<br ALIGN="LEFT"/>get_schema_from_engine_params(sqlalchemy_uri: URL, connect_args: dict[str, Any]): str \| None<br ALIGN="LEFT"/>get_table_names(database: Database, inspector: PGInspector, schema: str \| None): set[str]<br ALIGN="LEFT"/>query_cost_formatter(raw_cost: list[dict[str, Any]]): list[dict[str, str]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.presto.PrestoBaseEngineSpec" [color="black", fontcolor="black", label=<{PrestoBaseEngineSpec|column_type_mappings : tuple<br ALIGN="LEFT"/>supports_catalog : bool<br ALIGN="LEFT"/>supports_dynamic_catalog : bool<br ALIGN="LEFT"/>supports_dynamic_schema : bool<br ALIGN="LEFT"/>|adjust_engine_params(uri: URL, connect_args: dict[str, Any], catalog: str \| None, schema: str \| None): tuple[URL, dict[str, Any]]<br ALIGN="LEFT"/>convert_dttm(target_type: str, dttm: datetime, db_extra: dict[str, Any] \| None): str \| None<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>estimate_statement_cost(database: Database, statement: str, cursor: Any): dict[str, Any]<br ALIGN="LEFT"/>get_catalog_names(database: Database, inspector: Inspector): set[str]<br ALIGN="LEFT"/>get_columns(inspector: Inspector, table: Table, options: dict[str, Any] \| None): list[ResultSetColumnType]<br ALIGN="LEFT"/>get_default_catalog(database: Database): str \| None<br ALIGN="LEFT"/>get_function_names(database: Database): list[str]<br ALIGN="LEFT"/>get_schema_from_engine_params(sqlalchemy_uri: URL, connect_args: dict[str, Any]): str \| None<br ALIGN="LEFT"/>latest_partition(database: Database, table: Table, show_first: bool, indexes: list[dict[str, Any]] \| None): tuple[list[str], list[str] \| None]<br ALIGN="LEFT"/>latest_sub_partition(database: Database, table: Table): Any<br ALIGN="LEFT"/>query_cost_formatter(raw_cost: list[dict[str, Any]]): list[dict[str, str]]<br ALIGN="LEFT"/>where_latest_partition(database: Database, table: Table, query: Select, columns: list[ResultSetColumnType] \| None): Select \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sql_validators.presto_db.PrestoDBSQLValidator" [color="black", fontcolor="black", label=<{PrestoDBSQLValidator|name : str<br ALIGN="LEFT"/>|validate(sql: str, catalog: str \| None, schema: str \| None, database: Database): list[SQLValidationAnnotation]<br ALIGN="LEFT"/>validate_statement(statement: SQLStatement, database: Database, cursor: Any): SQLValidationAnnotation \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.presto.PrestoEngineSpec" [color="black", fontcolor="black", label=<{PrestoEngineSpec|allows_alias_to_source_column : bool<br ALIGN="LEFT"/>custom_errors : dict[Pattern[str], tuple[str, SupersetErrorType, dict[str, Any]]]<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>|expand_data(columns: list[ResultSetColumnType], data: list[dict[Any, Any]]): tuple[list[ResultSetColumnType], list[dict[Any, Any]], list[ResultSetColumnType]]<br ALIGN="LEFT"/>get_allow_cost_estimate(extra: dict[str, Any]): bool<br ALIGN="LEFT"/>get_create_view(database: Database, schema: str \| None, table: str): str \| None<br ALIGN="LEFT"/>get_extra_table_metadata(database: Database, table: Table): dict[str, Any]<br ALIGN="LEFT"/>get_table_names(database: Database, inspector: Inspector, schema: str \| None): set[str]<br ALIGN="LEFT"/>get_tracking_url(cursor: Cursor): str \| None<br ALIGN="LEFT"/>get_view_names(database: Database, inspector: Inspector, schema: str \| None): set[str]<br ALIGN="LEFT"/>handle_cursor(cursor: Cursor, query: Query): None<br ALIGN="LEFT"/>has_implicit_cancel(): bool<br ALIGN="LEFT"/>select_star(database: Database, table: Table, engine: Engine, limit: int, show_cols: bool, indent: bool, latest_partition: bool, cols: list[ResultSetColumnType] \| None): str<br ALIGN="LEFT"/>update_impersonation_config(database: Database, connect_args: dict[str, Any], uri: str, username: str \| None, access_token: str \| None): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sql_validators.presto_db.PrestoSQLValidationError" [color="black", fontcolor="red", label=<{PrestoSQLValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.jinja_context.PrestoTemplateProcessor" [color="black", fontcolor="black", label=<{PrestoTemplateProcessor|engine : str<br ALIGN="LEFT"/>latest_partition<br ALIGN="LEFT"/>|first_latest_partition(table_name: str): Optional[str]<br ALIGN="LEFT"/>latest_partitions(table_name: str): Optional[list[str]]<br ALIGN="LEFT"/>latest_sub_partition(table_name: str): Any<br ALIGN="LEFT"/>set_context(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.extensions.ProfilingExtension" [color="black", fontcolor="black", label=<{ProfilingExtension|interval : float<br ALIGN="LEFT"/>|init_app(app: Flask): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.unit_tests.db_engine_specs.test_gsheets.ProgrammingError" [color="black", fontcolor="red", label=<{ProgrammingError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.PruneReportScheduleLogFailedError" [color="black", fontcolor="black", label=<{PruneReportScheduleLogFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.shared.security_converge.Pvm" [color="black", fontcolor="black", label=<{Pvm|permission : str<br ALIGN="LEFT"/>view : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.QualifiedTableSchema" [color="black", fontcolor="black", label=<{QualifiedTableSchema|catalog : String<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>schema : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.doris.QuantileState" [color="black", fontcolor="black", label=<{QuantileState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.shared.catalogs.Query" [color="black", fontcolor="black", label=<{Query|catalog<br ALIGN="LEFT"/>database_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-03-02_09-20_b5a422d8e252_fix_query_and_saved_query_null_schema.Query" [color="black", fontcolor="black", label=<{Query|id<br ALIGN="LEFT"/>schema<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.sql_lab.Query" [color="black", fontcolor="black", label=<{Query|cache_timeout<br ALIGN="LEFT"/>catalog<br ALIGN="LEFT"/>changed_on<br ALIGN="LEFT"/>client_id<br ALIGN="LEFT"/>column_names<br ALIGN="LEFT"/>columns<br ALIGN="LEFT"/>ctas_method<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>database<br ALIGN="LEFT"/>database_id<br ALIGN="LEFT"/>database_name<br ALIGN="LEFT"/>db_engine_spec<br ALIGN="LEFT"/>db_extra<br ALIGN="LEFT"/>default_endpoint<br ALIGN="LEFT"/>dttm_cols<br ALIGN="LEFT"/>end_result_backend_time<br ALIGN="LEFT"/>end_time<br ALIGN="LEFT"/>error_message<br ALIGN="LEFT"/>executed_sql<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>is_rls_supported<br ALIGN="LEFT"/>limit<br ALIGN="LEFT"/>limiting_factor<br ALIGN="LEFT"/>main_dttm_col<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>offset<br ALIGN="LEFT"/>owners_data<br ALIGN="LEFT"/>perm<br ALIGN="LEFT"/>progress<br ALIGN="LEFT"/>query_language : str<br ALIGN="LEFT"/>results_key<br ALIGN="LEFT"/>rows<br ALIGN="LEFT"/>schema<br ALIGN="LEFT"/>schema_perm<br ALIGN="LEFT"/>select_as_cta<br ALIGN="LEFT"/>select_as_cta_used<br ALIGN="LEFT"/>select_sql<br ALIGN="LEFT"/>sql<br ALIGN="LEFT"/>sql_editor_id<br ALIGN="LEFT"/>start_running_time<br ALIGN="LEFT"/>start_time<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>tab_name<br ALIGN="LEFT"/>tmp_schema_name<br ALIGN="LEFT"/>tmp_table_name<br ALIGN="LEFT"/>tracking_url<br ALIGN="LEFT"/>tracking_url_raw<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>uid<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>username<br ALIGN="LEFT"/>|adhoc_column_to_sqla(col: 'AdhocColumn', force_type_check: bool, template_processor: Optional[BaseTemplateProcessor]): ColumnElement<br ALIGN="LEFT"/>get_column(column_name: Optional[str]): Optional[dict[str, Any]]<br ALIGN="LEFT"/>get_extra_cache_keys(query_obj: dict[str, Any]): list[Hashable]<br ALIGN="LEFT"/>get_template_processor(): BaseTemplateProcessor<br ALIGN="LEFT"/>raise_for_access(): None<br ALIGN="LEFT"/>to_dict(): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.common.utils.query_cache_manager.QueryCacheManager" [color="black", fontcolor="black", label=<{QueryCacheManager|annotation_data : NoneType, dict<br ALIGN="LEFT"/>applied_filter_columns : list<br ALIGN="LEFT"/>applied_template_filters : list<br ALIGN="LEFT"/>cache_dttm : NoneType, str \| None<br ALIGN="LEFT"/>cache_value : dict[str, Any] \| None<br ALIGN="LEFT"/>df : DataFrame<br ALIGN="LEFT"/>error_message : str \| None<br ALIGN="LEFT"/>is_cached : bool \| None<br ALIGN="LEFT"/>is_loaded : bool<br ALIGN="LEFT"/>query : str<br ALIGN="LEFT"/>rejected_filter_columns : list<br ALIGN="LEFT"/>sql_rowcount : int \| None<br ALIGN="LEFT"/>stacktrace : str \| None<br ALIGN="LEFT"/>status : str \| None<br ALIGN="LEFT"/>|delete(key: str \| None, region: CacheRegion): None<br ALIGN="LEFT"/>get(key: str \| None, region: CacheRegion, force_query: bool \| None, force_cached: bool \| None): QueryCacheManager<br ALIGN="LEFT"/>has(key: str \| None, region: CacheRegion): bool<br ALIGN="LEFT"/>set(key: str \| None, value: dict[str, Any], timeout: int \| None, datasource_uid: str \| None, region: CacheRegion): None<br ALIGN="LEFT"/>set_query_result(key: str, query_result: QueryResult, annotation_data: dict[str, Any] \| None, force_query: bool \| None, timeout: int \| None, datasource_uid: str \| None, region: CacheRegion): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.exceptions.QueryClauseValidationException" [color="black", fontcolor="red", label=<{QueryClauseValidationException|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.common.query_context.QueryContext" [color="black", fontcolor="black", label=<{QueryContext|cache_type : ClassVar[str]<br ALIGN="LEFT"/>cache_values : dict[str, Any]<br ALIGN="LEFT"/>custom_cache_timeout : int \| None<br ALIGN="LEFT"/>datasource<br ALIGN="LEFT"/>enforce_numerical_metrics : ClassVar[bool]<br ALIGN="LEFT"/>force : bool<br ALIGN="LEFT"/>form_data : dict[str, Any] \| None<br ALIGN="LEFT"/>queries : list[QueryObject]<br ALIGN="LEFT"/>result_format<br ALIGN="LEFT"/>result_type<br ALIGN="LEFT"/>slice_ : Slice \| None<br ALIGN="LEFT"/>|get_cache_timeout(): int \| None<br ALIGN="LEFT"/>get_data(df: pd.DataFrame, coltypes: list[GenericDataType]): str \| list[dict[str, Any]]<br ALIGN="LEFT"/>get_df_payload(query_obj: QueryObject, force_cached: bool \| None): dict[str, Any]<br ALIGN="LEFT"/>get_payload(cache_query_context: bool \| None, force_cached: bool): dict[str, Any]<br ALIGN="LEFT"/>get_query_result(query_object: QueryObject): QueryResult<br ALIGN="LEFT"/>processing_time_offsets(df: pd.DataFrame, query_object: QueryObject): CachedTimeOffset<br ALIGN="LEFT"/>query_cache_key(query_obj: QueryObject): str \| None<br ALIGN="LEFT"/>raise_for_access(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.charts.data.api_tests.TestPostChartDataApi.test_chart_data_async_cached_sync_response.QueryContext" [color="black", fontcolor="black", label=<{QueryContext|result_format<br ALIGN="LEFT"/>result_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.charts.data.query_context_cache_loader.QueryContextCacheLoader" [color="black", fontcolor="black", label=<{QueryContextCacheLoader|<br ALIGN="LEFT"/>|load(cache_key: str): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.common.query_context_factory.QueryContextFactory" [color="black", fontcolor="black", label=<{QueryContextFactory|<br ALIGN="LEFT"/>|create(): QueryContext<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.common.query_context_generator.QueryContextGenerator" [color="black", fontcolor="black", label=<{QueryContextGenerator|<br ALIGN="LEFT"/>|generate(query_name: str, add_postprocessing_operations: bool, add_time_offsets: bool, table_id, table_type, form_data: Optional[dict[str, Any]]): dict[str, Any]<br ALIGN="LEFT"/>get_table(name, id_, type_)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.fixtures.query_context.QueryContextGeneratorInteg" [color="black", fontcolor="black", label=<{QueryContextGeneratorInteg|<br ALIGN="LEFT"/>|get_table(name, id_, type_)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.common.query_context_processor.QueryContextProcessor" [color="black", fontcolor="black", label=<{QueryContextProcessor|cache_type : ClassVar[str]<br ALIGN="LEFT"/>enforce_numerical_metrics : ClassVar[bool]<br ALIGN="LEFT"/>|add_offset_join_column(df: pd.DataFrame, name: str, time_grain: str, time_offset: str \| None, join_column_producer: Any): None<br ALIGN="LEFT"/>cache_key(): str<br ALIGN="LEFT"/>generate_join_column(row: pd.Series, column_index: int, time_grain: str, time_offset: str \| None): str<br ALIGN="LEFT"/>get_annotation_data(query_obj: QueryObject): dict[str, Any]<br ALIGN="LEFT"/>get_cache_timeout(): int<br ALIGN="LEFT"/>get_data(df: pd.DataFrame, coltypes: list[GenericDataType]): str \| list[dict[str, Any]]<br ALIGN="LEFT"/>get_df_payload(query_obj: QueryObject, force_cached: bool \| None): dict[str, Any]<br ALIGN="LEFT"/>get_native_annotation_data(query_obj: QueryObject): dict[str, Any]<br ALIGN="LEFT"/>get_offset_custom_or_inherit(offset: str, outer_from_dttm: datetime, outer_to_dttm: datetime): str<br ALIGN="LEFT"/>get_payload(cache_query_context: bool \| None, force_cached: bool): dict[str, Any]<br ALIGN="LEFT"/>get_query_result(query_object: QueryObject): QueryResult<br ALIGN="LEFT"/>get_time_grain(query_object: QueryObject): Any \| None<br ALIGN="LEFT"/>get_viz_annotation_data(annotation_layer: dict[str, Any], force: bool): dict[str, Any]<br ALIGN="LEFT"/>is_valid_date(date_string: str): bool<br ALIGN="LEFT"/>join_offset_dfs(df: pd.DataFrame, offset_dfs: dict[str, pd.DataFrame], time_grain: str \| None, join_keys: list[str]): pd.DataFrame<br ALIGN="LEFT"/>normalize_df(df: pd.DataFrame, query_object: QueryObject): pd.DataFrame<br ALIGN="LEFT"/>processing_time_offsets(df: pd.DataFrame, query_object: QueryObject): CachedTimeOffset<br ALIGN="LEFT"/>query_cache_key(query_obj: QueryObject): str \| None<br ALIGN="LEFT"/>raise_for_access(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.daos.query.QueryDAO" [color="black", fontcolor="black", label=<{QueryDAO|base_filter<br ALIGN="LEFT"/>|get_queries_changed_after(last_updated_ms: Union[float, int]): list[Query]<br ALIGN="LEFT"/>save_metadata(query: Query, payload: dict[str, Any]): None<br ALIGN="LEFT"/>stop_query(client_id: str): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.sql_lab.estimate.QueryEstimationCommand" [color="black", fontcolor="black", label=<{QueryEstimationCommand|<br ALIGN="LEFT"/>|run(): list[dict[str, Any]]<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sqllab.schemas.QueryExecutionResponseSchema" [color="black", fontcolor="black", label=<{QueryExecutionResponseSchema|columns : List<br ALIGN="LEFT"/>data : List<br ALIGN="LEFT"/>expanded_columns : List<br ALIGN="LEFT"/>query : Nested<br ALIGN="LEFT"/>query_id : Integer<br ALIGN="LEFT"/>selected_columns : List<br ALIGN="LEFT"/>status : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.queries.filters.QueryFilter" [color="black", fontcolor="black", label=<{QueryFilter|<br ALIGN="LEFT"/>|apply(query: BaseQuery, value: Any): BaseQuery<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sqllab.exceptions.QueryIsForbiddenToAccessException" [color="black", fontcolor="red", label=<{QueryIsForbiddenToAccessException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.QueryNotFoundException" [color="black", fontcolor="red", label=<{QueryNotFoundException|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.exceptions.QueryNotFoundValidationError" [color="black", fontcolor="red", label=<{QueryNotFoundValidationError|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.common.query_object.QueryObject" [color="black", fontcolor="black", label=<{QueryObject|annotation_layers : list[dict[str, Any]]<br ALIGN="LEFT"/>applied_time_extras : dict[str, str]<br ALIGN="LEFT"/>apply_fetch_values_predicate : bool<br ALIGN="LEFT"/>column_names<br ALIGN="LEFT"/>columns : list[Column]<br ALIGN="LEFT"/>datasource : BaseDatasource \| None<br ALIGN="LEFT"/>extras : dict[str, Any]<br ALIGN="LEFT"/>filter : list[QueryObjectFilterClause]<br ALIGN="LEFT"/>from_dttm : datetime \| None<br ALIGN="LEFT"/>granularity : str \| None<br ALIGN="LEFT"/>inner_from_dttm : datetime \| None<br ALIGN="LEFT"/>inner_to_dttm : datetime \| None<br ALIGN="LEFT"/>is_rowcount : bool<br ALIGN="LEFT"/>is_timeseries : bool<br ALIGN="LEFT"/>metric_names<br ALIGN="LEFT"/>metrics : list[Metric] \| None<br ALIGN="LEFT"/>order_desc : bool<br ALIGN="LEFT"/>orderby : list[OrderBy]<br ALIGN="LEFT"/>post_processing : list[dict[str, Any]]<br ALIGN="LEFT"/>result_type : ChartDataResultType \| None<br ALIGN="LEFT"/>row_limit : int \| None<br ALIGN="LEFT"/>row_offset : int<br ALIGN="LEFT"/>series_columns : list[Column]<br ALIGN="LEFT"/>series_limit : int<br ALIGN="LEFT"/>series_limit_metric : Metric \| None<br ALIGN="LEFT"/>time_offsets : list[str]<br ALIGN="LEFT"/>time_range : str \| None<br ALIGN="LEFT"/>time_shift : str \| None<br ALIGN="LEFT"/>to_dttm : datetime \| None<br ALIGN="LEFT"/>|cache_key(): str<br ALIGN="LEFT"/>exec_post_processing(df: DataFrame): DataFrame<br ALIGN="LEFT"/>to_dict(): dict[str, Any]<br ALIGN="LEFT"/>validate(raise_exceptions: bool \| None): QueryObjectValidationError \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.common.query_object_factory.QueryObjectFactory" [color="black", fontcolor="black", label=<{QueryObjectFactory|<br ALIGN="LEFT"/>|create(parent_result_type: ChartDataResultType, datasource: DatasourceDict \| None, extras: dict[str, Any] \| None, row_limit: int \| None, time_range: str \| None, time_shift: str \| None): QueryObject<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.core.QueryObjectFilterClause" [color="black", fontcolor="black", label=<{QueryObjectFilterClause|col<br ALIGN="LEFT"/>grain : str \| None<br ALIGN="LEFT"/>isExtra : bool \| None<br ALIGN="LEFT"/>op : str<br ALIGN="LEFT"/>val : FilterValues \| None<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.QueryObjectValidationError" [color="black", fontcolor="red", label=<{QueryObjectValidationError|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.sql_lab.query.QueryPruneCommand" [color="black", fontcolor="black", label=<{QueryPruneCommand|retention_period_days : int<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.queries.api.QueryRestApi" [color="black", fontcolor="black", label=<{QueryRestApi|allow_browser_login : bool<br ALIGN="LEFT"/>allowed_distinct_fields : set<br ALIGN="LEFT"/>allowed_rel_fields : set<br ALIGN="LEFT"/>apispec_parameter_schemas : dict<br ALIGN="LEFT"/>base_filters : list<br ALIGN="LEFT"/>base_order : tuple<br ALIGN="LEFT"/>base_related_field_filters : dict<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>include_route_methods : set<br ALIGN="LEFT"/>list_columns : list<br ALIGN="LEFT"/>list_model_schema<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>openapi_spec_component_schemas : tuple<br ALIGN="LEFT"/>openapi_spec_methods<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>order_columns : list<br ALIGN="LEFT"/>related_field_filters : dict<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>search_columns : list<br ALIGN="LEFT"/>show_columns : list<br ALIGN="LEFT"/>stop_query_schema<br ALIGN="LEFT"/>|get_updated_since(): FlaskResponse<br ALIGN="LEFT"/>stop_query(): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.models.helpers.QueryResult" [color="black", fontcolor="black", label=<{QueryResult|applied_filter_columns : list<br ALIGN="LEFT"/>applied_template_filters : list<br ALIGN="LEFT"/>df : DataFrame<br ALIGN="LEFT"/>duration : timedelta<br ALIGN="LEFT"/>error_message : Optional[str]<br ALIGN="LEFT"/>errors : list<br ALIGN="LEFT"/>from_dttm : Optional[datetime]<br ALIGN="LEFT"/>query : str<br ALIGN="LEFT"/>rejected_filter_columns : list<br ALIGN="LEFT"/>sql_rowcount<br ALIGN="LEFT"/>status : str<br ALIGN="LEFT"/>to_dttm : Optional[datetime]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sqllab.schemas.QueryResultSchema" [color="black", fontcolor="black", label=<{QueryResultSchema|changed_on : DateTime<br ALIGN="LEFT"/>ctas : Boolean<br ALIGN="LEFT"/>db : String<br ALIGN="LEFT"/>dbId : Integer<br ALIGN="LEFT"/>endDttm : Float<br ALIGN="LEFT"/>errorMessage : String<br ALIGN="LEFT"/>executedSql : String<br ALIGN="LEFT"/>extra : Dict<br ALIGN="LEFT"/>id : String<br ALIGN="LEFT"/>limit : Integer<br ALIGN="LEFT"/>limitingFactor : String<br ALIGN="LEFT"/>progress : Integer<br ALIGN="LEFT"/>queryId : Integer<br ALIGN="LEFT"/>resultsKey : String<br ALIGN="LEFT"/>rows : Integer<br ALIGN="LEFT"/>schema : String<br ALIGN="LEFT"/>serverId : Integer<br ALIGN="LEFT"/>sql : String<br ALIGN="LEFT"/>sqlEditorId : String<br ALIGN="LEFT"/>startDttm : Float<br ALIGN="LEFT"/>state : String<br ALIGN="LEFT"/>tab : String<br ALIGN="LEFT"/>tempSchema : String<br ALIGN="LEFT"/>tempTable : String<br ALIGN="LEFT"/>trackingUrl : String<br ALIGN="LEFT"/>user : String<br ALIGN="LEFT"/>userId : Integer<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.queries.schemas.QuerySchema" [color="black", fontcolor="black", label=<{QuerySchema|changed_on : DateTime<br ALIGN="LEFT"/>database : Nested<br ALIGN="LEFT"/>end_time : Float<br ALIGN="LEFT"/>executed_sql : String<br ALIGN="LEFT"/>id : Integer<br ALIGN="LEFT"/>rows : Integer<br ALIGN="LEFT"/>schema : String<br ALIGN="LEFT"/>sql : String<br ALIGN="LEFT"/>sql_tables : Method<br ALIGN="LEFT"/>start_time : Float<br ALIGN="LEFT"/>status : String<br ALIGN="LEFT"/>tab_name : String<br ALIGN="LEFT"/>tmp_table_name : String<br ALIGN="LEFT"/>tracking_url : String<br ALIGN="LEFT"/>user : Nested<br ALIGN="LEFT"/>|get_sql_tables(obj: Query): list[Table]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.core.QuerySource" [color="black", fontcolor="black", label=<{QuerySource|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.common.db_query_status.QueryStatus" [color="black", fontcolor="black", label=<{QueryStatus|FAILED : str<br ALIGN="LEFT"/>FETCHING : str<br ALIGN="LEFT"/>PENDING : str<br ALIGN="LEFT"/>RUNNING : str<br ALIGN="LEFT"/>SCHEDULED : str<br ALIGN="LEFT"/>STOPPED : str<br ALIGN="LEFT"/>SUCCESS : str<br ALIGN="LEFT"/>TIMED_OUT : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.core.QueryStatus" [color="black", fontcolor="black", label=<{QueryStatus|FAILED : str<br ALIGN="LEFT"/>FETCHING : str<br ALIGN="LEFT"/>PENDING : str<br ALIGN="LEFT"/>RUNNING : str<br ALIGN="LEFT"/>SCHEDULED : str<br ALIGN="LEFT"/>STOPPED : str<br ALIGN="LEFT"/>SUCCESS : str<br ALIGN="LEFT"/>TIMED_OUT : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.helpers.QueryStringExtended" [color="black", fontcolor="black", label=<{QueryStringExtended|applied_filter_columns : list[ColumnTyping]<br ALIGN="LEFT"/>applied_template_filters : Optional[list[str]]<br ALIGN="LEFT"/>labels_expected : list[str]<br ALIGN="LEFT"/>prequeries : list[str]<br ALIGN="LEFT"/>rejected_filter_columns : list[ColumnTyping]<br ALIGN="LEFT"/>sql : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tags.models.QueryUpdater" [color="black", fontcolor="black", label=<{QueryUpdater|object_type : str<br ALIGN="LEFT"/>|get_owners_ids(target: Query): list[int]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.daos.security.RLSDAO" [color="black", fontcolor="black", label=<{RLSDAO|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.row_level_security.schemas.RLSListSchema" [color="black", fontcolor="black", label=<{RLSListSchema|changed_by : Nested<br ALIGN="LEFT"/>changed_on_delta_humanized : Function<br ALIGN="LEFT"/>clause : String<br ALIGN="LEFT"/>description : String<br ALIGN="LEFT"/>filter_type : String<br ALIGN="LEFT"/>group_key : String<br ALIGN="LEFT"/>id : Integer<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>roles : List<br ALIGN="LEFT"/>tables : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.row_level_security.schemas.RLSPostSchema" [color="black", fontcolor="black", label=<{RLSPostSchema|clause : String<br ALIGN="LEFT"/>description : String<br ALIGN="LEFT"/>filter_type : String<br ALIGN="LEFT"/>group_key : String<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>roles : List<br ALIGN="LEFT"/>tables : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.row_level_security.schemas.RLSPutSchema" [color="black", fontcolor="black", label=<{RLSPutSchema|clause : String<br ALIGN="LEFT"/>description : String<br ALIGN="LEFT"/>filter_type : String<br ALIGN="LEFT"/>group_key : String<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>roles : List<br ALIGN="LEFT"/>tables : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.row_level_security.api.RLSRestApi" [color="black", fontcolor="black", label=<{RLSRestApi|add_columns : list<br ALIGN="LEFT"/>add_model_schema<br ALIGN="LEFT"/>allow_browser_login : bool<br ALIGN="LEFT"/>allowed_rel_fields : set<br ALIGN="LEFT"/>base_related_field_filters : dict<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>edit_columns : list<br ALIGN="LEFT"/>edit_model_schema<br ALIGN="LEFT"/>include_route_methods<br ALIGN="LEFT"/>list_columns : list<br ALIGN="LEFT"/>list_model_schema<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>openapi_spec_methods<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>order_columns : list<br ALIGN="LEFT"/>related_field_filters : dict<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>search_columns : tuple<br ALIGN="LEFT"/>show_columns : list<br ALIGN="LEFT"/>show_model_schema<br ALIGN="LEFT"/>|bulk_delete(): Response<br ALIGN="LEFT"/>post(): Response<br ALIGN="LEFT"/>put(pk: int): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.security.exceptions.RLSRuleNotFoundError" [color="black", fontcolor="black", label=<{RLSRuleNotFoundError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.row_level_security.schemas.RLSShowSchema" [color="black", fontcolor="black", label=<{RLSShowSchema|clause : String<br ALIGN="LEFT"/>description : String<br ALIGN="LEFT"/>filter_type : String<br ALIGN="LEFT"/>group_key : String<br ALIGN="LEFT"/>id : Integer<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>roles : List<br ALIGN="LEFT"/>tables : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.uploaders.base.ReaderOptions" [color="black", fontcolor="black", label=<{ReaderOptions|already_exists : str<br ALIGN="LEFT"/>dataframe_index : bool<br ALIGN="LEFT"/>index_label : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.log.schemas.RecentActivityResponseSchema" [color="black", fontcolor="black", label=<{RecentActivityResponseSchema|result : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.log.schemas.RecentActivitySchema" [color="black", fontcolor="black", label=<{RecentActivitySchema|action : String<br ALIGN="LEFT"/>item_title : String<br ALIGN="LEFT"/>item_type : String<br ALIGN="LEFT"/>item_url : String<br ALIGN="LEFT"/>time : Float<br ALIGN="LEFT"/>time_delta_humanized : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.async_events.cache_backend.RedisCacheBackend" [color="black", fontcolor="black", label=<{RedisCacheBackend|MAX_EVENT_COUNT : int<br ALIGN="LEFT"/>|from_config(config: Dict[str, Any]): 'RedisCacheBackend'<br ALIGN="LEFT"/>xadd(stream_name: str, event_data: Dict[str, Any], event_id: str, maxlen: Optional[int]): str<br ALIGN="LEFT"/>xrange(stream_name: str, start: str, end: str, count: Optional[int]): List[Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.async_events.cache_backend.RedisSentinelCacheBackend" [color="black", fontcolor="black", label=<{RedisSentinelCacheBackend|MAX_EVENT_COUNT : int<br ALIGN="LEFT"/>|from_config(config: Dict[str, Any]): 'RedisSentinelCacheBackend'<br ALIGN="LEFT"/>xadd(stream_name: str, event_data: Dict[str, Any], event_id: str, maxlen: Optional[int]): str<br ALIGN="LEFT"/>xrange(stream_name: str, start: str, end: str, count: Optional[int]): List[Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.redshift.RedshiftEngineSpec" [color="black", fontcolor="black", label=<{RedshiftEngineSpec|custom_errors : dict[Pattern[str], tuple[str, SupersetErrorType, dict[str, Any]]]<br ALIGN="LEFT"/>default_driver : str<br ALIGN="LEFT"/>encryption_parameters : dict<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>max_column_name_length : int<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>|cancel_query(cursor: Any, query: Query, cancel_query_id: str): bool<br ALIGN="LEFT"/>df_to_sql(database: Database, table: Table, df: pd.DataFrame, to_sql_kwargs: dict[str, Any]): None<br ALIGN="LEFT"/>get_cancel_query_id(cursor: Any, query: Query): str \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dataset.refresh.RefreshDatasetCommand" [color="black", fontcolor="black", label=<{RefreshDatasetCommand|<br ALIGN="LEFT"/>|run(): Model<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.url_map_converters.RegexConverter" [color="black", fontcolor="black", label=<{RegexConverter|regex<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.base_api.RelatedFieldFilter" [color="black", fontcolor="black", label=<{RelatedFieldFilter|field_name : str<br ALIGN="LEFT"/>filter_class : type[BaseFilter]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.base_api.RelatedResponseSchema" [color="black", fontcolor="black", label=<{RelatedResponseSchema|count : Integer<br ALIGN="LEFT"/>result : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.base_api.RelatedResultResponseSchema" [color="black", fontcolor="black", label=<{RelatedResultResponseSchema|extra : Dict<br ALIGN="LEFT"/>text : String<br ALIGN="LEFT"/>value : Integer<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.models.ReportCreationMethod" [color="black", fontcolor="black", label=<{ReportCreationMethod|ALERTS_REPORTS : str<br ALIGN="LEFT"/>CHARTS : str<br ALIGN="LEFT"/>DASHBOARDS : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.models.ReportDataFormat" [color="black", fontcolor="black", label=<{ReportDataFormat|CSV : str<br ALIGN="LEFT"/>PDF : str<br ALIGN="LEFT"/>PNG : str<br ALIGN="LEFT"/>TEXT : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-05-03_19-39_cbe71abde154_fix_report_schedule_and_log.ReportExecutionLog" [color="black", fontcolor="black", label=<{ReportExecutionLog|id<br ALIGN="LEFT"/>state<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>value_row_json<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.models.ReportExecutionLog" [color="black", fontcolor="black", label=<{ReportExecutionLog|end_dttm<br ALIGN="LEFT"/>error_message<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>report_schedule<br ALIGN="LEFT"/>report_schedule_id<br ALIGN="LEFT"/>scheduled_dttm<br ALIGN="LEFT"/>start_dttm<br ALIGN="LEFT"/>state<br ALIGN="LEFT"/>uuid<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>value_row_json<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.logs.api.ReportExecutionLogRestApi" [color="black", fontcolor="black", label=<{ReportExecutionLogRestApi|allow_browser_login : bool<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>include_route_methods : set<br ALIGN="LEFT"/>list_columns : list<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>openapi_spec_methods<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>order_columns : list<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>show_columns : list<br ALIGN="LEFT"/>|ensure_alert_reports_enabled(): Optional[Response]<br ALIGN="LEFT"/>get(pk: int, log_id: int): Response<br ALIGN="LEFT"/>get_list(pk: int): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.report.execute.ReportNotTriggeredErrorState" [color="black", fontcolor="black", label=<{ReportNotTriggeredErrorState|current_states : list<br ALIGN="LEFT"/>initial : bool<br ALIGN="LEFT"/>|next(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.reports.schemas.ReportRecipientConfigJSONSchema" [color="black", fontcolor="black", label=<{ReportRecipientConfigJSONSchema|bccTarget : String<br ALIGN="LEFT"/>ccTarget : String<br ALIGN="LEFT"/>target : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.schemas.ReportRecipientSchema" [color="black", fontcolor="black", label=<{ReportRecipientSchema|recipient_config_json : Nested<br ALIGN="LEFT"/>type : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.models.ReportRecipientType" [color="black", fontcolor="black", label=<{ReportRecipientType|EMAIL : str<br ALIGN="LEFT"/>SLACK : str<br ALIGN="LEFT"/>SLACKV2 : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.models.ReportRecipients" [color="black", fontcolor="black", label=<{ReportRecipients|id<br ALIGN="LEFT"/>recipient_config_json<br ALIGN="LEFT"/>report_schedule<br ALIGN="LEFT"/>report_schedule_id<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2021-12-10_19-25_bb38f40aa3ff_add_force_screenshot_to_alerts_reports.ReportSchedule" [color="black", fontcolor="black", label=<{ReportSchedule|chart_id<br ALIGN="LEFT"/>force_screenshot<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-05-03_19-39_cbe71abde154_fix_report_schedule_and_log.ReportSchedule" [color="black", fontcolor="black", label=<{ReportSchedule|id<br ALIGN="LEFT"/>last_state<br ALIGN="LEFT"/>last_value<br ALIGN="LEFT"/>last_value_row_json<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.models.ReportSchedule" [color="black", fontcolor="black", label=<{ReportSchedule|active<br ALIGN="LEFT"/>chart<br ALIGN="LEFT"/>chart_id<br ALIGN="LEFT"/>context_markdown<br ALIGN="LEFT"/>creation_method<br ALIGN="LEFT"/>crontab<br ALIGN="LEFT"/>custom_height<br ALIGN="LEFT"/>custom_width<br ALIGN="LEFT"/>dashboard<br ALIGN="LEFT"/>dashboard_id<br ALIGN="LEFT"/>database<br ALIGN="LEFT"/>database_id<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>email_subject<br ALIGN="LEFT"/>extra<br ALIGN="LEFT"/>force_screenshot<br ALIGN="LEFT"/>grace_period<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>last_eval_dttm<br ALIGN="LEFT"/>last_state<br ALIGN="LEFT"/>last_value<br ALIGN="LEFT"/>last_value_row_json<br ALIGN="LEFT"/>log_retention<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>owners<br ALIGN="LEFT"/>report_format<br ALIGN="LEFT"/>sql<br ALIGN="LEFT"/>timezone<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>validator_config_json<br ALIGN="LEFT"/>validator_type<br ALIGN="LEFT"/>working_timeout<br ALIGN="LEFT"/>|crontab_humanized(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleAlertEndGracePeriodError" [color="black", fontcolor="black", label=<{ReportScheduleAlertEndGracePeriodError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleAlertGracePeriodError" [color="black", fontcolor="black", label=<{ReportScheduleAlertGracePeriodError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleAlertRequiredDatabaseValidationError" [color="black", fontcolor="black", label=<{ReportScheduleAlertRequiredDatabaseValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.filters.ReportScheduleAllTextFilter" [color="black", fontcolor="black", label=<{ReportScheduleAllTextFilter|arg_name : str<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleClientErrorsException" [color="black", fontcolor="red", label=<{ReportScheduleClientErrorsException|errors : list[SupersetError]<br ALIGN="LEFT"/>message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleCreateFailedError" [color="black", fontcolor="black", label=<{ReportScheduleCreateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleCreationMethodUniquenessValidationError" [color="black", fontcolor="black", label=<{ReportScheduleCreationMethodUniquenessValidationError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleCsvFailedError" [color="black", fontcolor="black", label=<{ReportScheduleCsvFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleCsvTimeout" [color="black", fontcolor="black", label=<{ReportScheduleCsvTimeout|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.daos.report.ReportScheduleDAO" [color="black", fontcolor="black", label=<{ReportScheduleDAO|base_filter<br ALIGN="LEFT"/>|bulk_delete_logs(model: ReportSchedule, from_date: datetime): int \| None<br ALIGN="LEFT"/>create(item: ReportSchedule \| None, attributes: dict[str, Any] \| None): ReportSchedule<br ALIGN="LEFT"/>find_active(): list[ReportSchedule]<br ALIGN="LEFT"/>find_by_chart_id(chart_id: int): list[ReportSchedule]<br ALIGN="LEFT"/>find_by_chart_ids(chart_ids: list[int]): list[ReportSchedule]<br ALIGN="LEFT"/>find_by_dashboard_id(dashboard_id: int): list[ReportSchedule]<br ALIGN="LEFT"/>find_by_dashboard_ids(dashboard_ids: list[int]): list[ReportSchedule]<br ALIGN="LEFT"/>find_by_database_id(database_id: int): list[ReportSchedule]<br ALIGN="LEFT"/>find_by_database_ids(database_ids: list[int]): list[ReportSchedule]<br ALIGN="LEFT"/>find_by_extra_metadata(slug: str): list[ReportSchedule]<br ALIGN="LEFT"/>find_last_entered_working_log(report_schedule: ReportSchedule): ReportExecutionLog \| None<br ALIGN="LEFT"/>find_last_error_notification(report_schedule: ReportSchedule): ReportExecutionLog \| None<br ALIGN="LEFT"/>find_last_success_log(report_schedule: ReportSchedule): ReportExecutionLog \| None<br ALIGN="LEFT"/>update(item: ReportSchedule \| None, attributes: dict[str, Any] \| None): ReportSchedule<br ALIGN="LEFT"/>validate_unique_creation_method(dashboard_id: int \| None, chart_id: int \| None): bool<br ALIGN="LEFT"/>validate_update_uniqueness(name: str, report_type: ReportScheduleType, expect_id: int \| None): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleDataFrameFailedError" [color="black", fontcolor="black", label=<{ReportScheduleDataFrameFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleDataFrameTimeout" [color="black", fontcolor="black", label=<{ReportScheduleDataFrameTimeout|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleDeleteFailedError" [color="black", fontcolor="black", label=<{ReportScheduleDeleteFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleEitherChartOrDashboardError" [color="black", fontcolor="black", label=<{ReportScheduleEitherChartOrDashboardError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleExecuteUnexpectedError" [color="black", fontcolor="black", label=<{ReportScheduleExecuteUnexpectedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.types.ReportScheduleExtra" [color="black", fontcolor="black", label=<{ReportScheduleExtra|dashboard<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.filters.ReportScheduleFilter" [color="black", fontcolor="black", label=<{ReportScheduleFilter|<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleForbiddenError" [color="black", fontcolor="black", label=<{ReportScheduleForbiddenError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleFrequencyNotAllowed" [color="black", fontcolor="black", label=<{ReportScheduleFrequencyNotAllowed|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleInvalidError" [color="black", fontcolor="black", label=<{ReportScheduleInvalidError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleNameUniquenessValidationError" [color="black", fontcolor="black", label=<{ReportScheduleNameUniquenessValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleNotFoundError" [color="black", fontcolor="black", label=<{ReportScheduleNotFoundError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleNotificationError" [color="black", fontcolor="black", label=<{ReportScheduleNotificationError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleOnlyChartOrDashboardError" [color="black", fontcolor="black", label=<{ReportScheduleOnlyChartOrDashboardError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportSchedulePdfFailedError" [color="black", fontcolor="black", label=<{ReportSchedulePdfFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.schemas.ReportSchedulePostSchema" [color="black", fontcolor="black", label=<{ReportSchedulePostSchema|active : Boolean<br ALIGN="LEFT"/>chart : Integer<br ALIGN="LEFT"/>context_markdown : String<br ALIGN="LEFT"/>creation_method : Enum<br ALIGN="LEFT"/>crontab : String<br ALIGN="LEFT"/>custom_width : Integer<br ALIGN="LEFT"/>dashboard : Integer<br ALIGN="LEFT"/>database : Integer<br ALIGN="LEFT"/>description : String<br ALIGN="LEFT"/>email_subject : String<br ALIGN="LEFT"/>extra : Dict<br ALIGN="LEFT"/>force_screenshot : Boolean<br ALIGN="LEFT"/>grace_period : Integer<br ALIGN="LEFT"/>log_retention : Integer<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>owners : List<br ALIGN="LEFT"/>recipients : List<br ALIGN="LEFT"/>report_format : String<br ALIGN="LEFT"/>selected_tabs : List<br ALIGN="LEFT"/>sql : String<br ALIGN="LEFT"/>timezone : String<br ALIGN="LEFT"/>type : String<br ALIGN="LEFT"/>validator_config_json : Nested<br ALIGN="LEFT"/>validator_type : String<br ALIGN="LEFT"/>working_timeout : Integer<br ALIGN="LEFT"/>|validate_custom_width(value: Optional[int]): None<br ALIGN="LEFT"/>validate_report_references(data: dict[str, Any]): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportSchedulePreviousWorkingError" [color="black", fontcolor="black", label=<{ReportSchedulePreviousWorkingError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportSchedulePruneLogError" [color="black", fontcolor="black", label=<{ReportSchedulePruneLogError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.schemas.ReportSchedulePutSchema" [color="black", fontcolor="black", label=<{ReportSchedulePutSchema|active : Boolean<br ALIGN="LEFT"/>chart : Integer<br ALIGN="LEFT"/>context_markdown : String<br ALIGN="LEFT"/>creation_method : Enum<br ALIGN="LEFT"/>crontab : String<br ALIGN="LEFT"/>custom_width : Integer<br ALIGN="LEFT"/>dashboard : Integer<br ALIGN="LEFT"/>database : Integer<br ALIGN="LEFT"/>description : String<br ALIGN="LEFT"/>email_subject : String<br ALIGN="LEFT"/>extra : Dict<br ALIGN="LEFT"/>force_screenshot : Boolean<br ALIGN="LEFT"/>grace_period : Integer<br ALIGN="LEFT"/>log_retention : Integer<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>owners : List<br ALIGN="LEFT"/>recipients : List<br ALIGN="LEFT"/>report_format : String<br ALIGN="LEFT"/>sql : String<br ALIGN="LEFT"/>timezone : String<br ALIGN="LEFT"/>type : String<br ALIGN="LEFT"/>validator_config_json : Nested<br ALIGN="LEFT"/>validator_type : String<br ALIGN="LEFT"/>working_timeout : Integer<br ALIGN="LEFT"/>|validate_custom_width(value: Optional[int]): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleRequiredTypeValidationError" [color="black", fontcolor="black", label=<{ReportScheduleRequiredTypeValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.api.ReportScheduleRestApi" [color="black", fontcolor="black", label=<{ReportScheduleRestApi|add_columns : list<br ALIGN="LEFT"/>add_model_schema<br ALIGN="LEFT"/>allow_browser_login : bool<br ALIGN="LEFT"/>allowed_rel_fields : set<br ALIGN="LEFT"/>apispec_parameter_schemas : dict<br ALIGN="LEFT"/>base_filters : list<br ALIGN="LEFT"/>base_related_field_filters : dict<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>edit_columns : list<br ALIGN="LEFT"/>edit_model_schema<br ALIGN="LEFT"/>include_route_methods<br ALIGN="LEFT"/>list_columns : list<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>openapi_spec_methods<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>order_columns : list<br ALIGN="LEFT"/>related_field_filters : dict<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>search_columns : list<br ALIGN="LEFT"/>search_filters : dict<br ALIGN="LEFT"/>show_columns : list<br ALIGN="LEFT"/>show_select_columns : list<br ALIGN="LEFT"/>text_field_rel_fields : dict<br ALIGN="LEFT"/>|bulk_delete(): Response<br ALIGN="LEFT"/>delete(pk: int): Response<br ALIGN="LEFT"/>ensure_alert_reports_enabled(): Optional[Response]<br ALIGN="LEFT"/>post(): Response<br ALIGN="LEFT"/>put(pk: int): Response<br ALIGN="LEFT"/>slack_channels(): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleScreenshotFailedError" [color="black", fontcolor="black", label=<{ReportScheduleScreenshotFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleScreenshotTimeout" [color="black", fontcolor="black", label=<{ReportScheduleScreenshotTimeout|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.execute.ReportScheduleStateMachine" [color="black", fontcolor="black", label=<{ReportScheduleStateMachine|states_cls : list<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleStateNotFoundError" [color="black", fontcolor="black", label=<{ReportScheduleStateNotFoundError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleSystemErrorsException" [color="black", fontcolor="red", label=<{ReportScheduleSystemErrorsException|errors : list[SupersetError]<br ALIGN="LEFT"/>message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.models.ReportScheduleType" [color="black", fontcolor="black", label=<{ReportScheduleType|ALERT : str<br ALIGN="LEFT"/>REPORT : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleUnexpectedError" [color="black", fontcolor="black", label=<{ReportScheduleUnexpectedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleUpdateFailedError" [color="black", fontcolor="black", label=<{ReportScheduleUpdateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.models.ReportScheduleValidatorType" [color="black", fontcolor="black", label=<{ReportScheduleValidatorType|NOT_NULL : str<br ALIGN="LEFT"/>OPERATOR : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.exceptions.ReportScheduleWorkingTimeoutError" [color="black", fontcolor="black", label=<{ReportScheduleWorkingTimeoutError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.models.ReportSourceFormat" [color="black", fontcolor="black", label=<{ReportSourceFormat|CHART : str<br ALIGN="LEFT"/>DASHBOARD : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.models.ReportState" [color="black", fontcolor="black", label=<{ReportState|ERROR : str<br ALIGN="LEFT"/>GRACE : str<br ALIGN="LEFT"/>NOOP : str<br ALIGN="LEFT"/>SUCCESS : str<br ALIGN="LEFT"/>WORKING : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.execute.ReportSuccessState" [color="black", fontcolor="black", label=<{ReportSuccessState|current_states : list<br ALIGN="LEFT"/>|next(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.views.alerts.ReportView" [color="black", fontcolor="black", label=<{ReportView|class_permission_name : str<br ALIGN="LEFT"/>route_base : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.report.execute.ReportWorkingState" [color="black", fontcolor="black", label=<{ReportWorkingState|current_states : list<br ALIGN="LEFT"/>|next(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.core.ReservedUrlParameters" [color="black", fontcolor="black", label=<{ReservedUrlParameters|EDIT_MODE : str<br ALIGN="LEFT"/>STANDALONE : str<br ALIGN="LEFT"/>|is_standalone_mode(): bool \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.security.reset.ResetSupersetCommand" [color="black", fontcolor="black", label=<{ResetSupersetCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.security.api.ResourceSchema" [color="black", fontcolor="black", label=<{ResourceSchema|id : String<br ALIGN="LEFT"/>type : Enum<br ALIGN="LEFT"/>|convert_enum_to_value(data: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.unit_tests.utils.test_decorators.ResponseValues" [color="black", fontcolor="black", label=<{ResponseValues|FAIL : str<br ALIGN="LEFT"/>OK : str<br ALIGN="LEFT"/>WARN : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2023-05-01_12-03_9c2a5681ddfd_convert_key_value_entries_to_json.RestrictedUnpickler" [color="black", fontcolor="black", label=<{RestrictedUnpickler|<br ALIGN="LEFT"/>|find_class(module, name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.superset_typing.ResultSetColumnType" [color="black", fontcolor="black", label=<{ResultSetColumnType|column_name : str<br ALIGN="LEFT"/>comment : NotRequired[Any]<br ALIGN="LEFT"/>default : NotRequired[Any]<br ALIGN="LEFT"/>is_dttm : Optional[bool]<br ALIGN="LEFT"/>max_length : NotRequired[Any]<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>nullable : NotRequired[Any]<br ALIGN="LEFT"/>precision : NotRequired[Any]<br ALIGN="LEFT"/>query_as : NotRequired[Any]<br ALIGN="LEFT"/>scale : NotRequired[Any]<br ALIGN="LEFT"/>type : Optional[Union[SQLType, str]]<br ALIGN="LEFT"/>type_generic : NotRequired[Optional['GenericDataType']]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.extensions.ResultsBackendManager" [color="black", fontcolor="black", label=<{ResultsBackendManager|results_backend<br ALIGN="LEFT"/>should_use_msgpack<br ALIGN="LEFT"/>|init_app(app: Flask): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.risingwave.RisingWaveDbEngineSpec" [color="black", fontcolor="black", label=<{RisingWaveDbEngineSpec|default_driver : str<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.security.api.RlsRuleSchema" [color="black", fontcolor="black", label=<{RlsRuleSchema|clause : String<br ALIGN="LEFT"/>dataset : Integer<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.rockset.RocksetEngineSpec" [color="black", fontcolor="black", label=<{RocksetEngineSpec|engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>|alter_new_orm_column(orm_col: 'TableColumn'): None<br ALIGN="LEFT"/>convert_dttm(target_type: str, dttm: datetime, db_extra: Optional[dict[str, Any]]): Optional[str]<br ALIGN="LEFT"/>epoch_ms_to_dttm(): str<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.migrations.shared.security_converge.Role" [color="black", fontcolor="black", label=<{Role|id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>permissions<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2020-09-24_12-04_3fbbc6e8d654_fix_data_access_permissions_for_virtual_.Role" [color="black", fontcolor="black", label=<{Role|id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>permissions<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-05-18_16-07_e786798587de_delete_none_permissions.Role" [color="black", fontcolor="black", label=<{Role|id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>permissions<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.exceptions.RolesNotFoundValidationError" [color="black", fontcolor="red", label=<{RolesNotFoundValidationError|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.RolesSchema" [color="black", fontcolor="black", label=<{RolesSchema|id : Integer<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.row_level_security.schemas.RolesSchema" [color="black", fontcolor="black", label=<{RolesSchema|id : Integer<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.viz.RoseViz" [color="black", fontcolor="black", label=<{RoseViz|is_timeseries : bool<br ALIGN="LEFT"/>sort_series : bool<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.constants.RouteMethod" [color="black", fontcolor="black", label=<{RouteMethod|ACTION : str<br ALIGN="LEFT"/>ACTION_POST : str<br ALIGN="LEFT"/>ADD : str<br ALIGN="LEFT"/>API_CREATE : str<br ALIGN="LEFT"/>API_DELETE : str<br ALIGN="LEFT"/>API_GET : str<br ALIGN="LEFT"/>API_READ : str<br ALIGN="LEFT"/>API_SET : set<br ALIGN="LEFT"/>API_UPDATE : str<br ALIGN="LEFT"/>CRUD_SET : set<br ALIGN="LEFT"/>DELETE : str<br ALIGN="LEFT"/>DISTINCT : str<br ALIGN="LEFT"/>DOWNLOAD : str<br ALIGN="LEFT"/>EDIT : str<br ALIGN="LEFT"/>EXPORT : str<br ALIGN="LEFT"/>GET : str<br ALIGN="LEFT"/>GET_LIST : str<br ALIGN="LEFT"/>IMPORT : str<br ALIGN="LEFT"/>INFO : str<br ALIGN="LEFT"/>LIST : str<br ALIGN="LEFT"/>POST : str<br ALIGN="LEFT"/>PUT : str<br ALIGN="LEFT"/>RELATED : str<br ALIGN="LEFT"/>RELATED_VIEW_SET : set<br ALIGN="LEFT"/>REST_MODEL_VIEW_CRUD_SET : set<br ALIGN="LEFT"/>SHOW : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.sql_types.presto_sql_types.Row" [color="black", fontcolor="black", label=<{Row|python_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.integration_tests.db_engine_specs.bigquery_tests.TestBigQueryDbEngineSpec.test_fetch_data.Row" [color="black", fontcolor="black", label=<{Row|<br ALIGN="LEFT"/>|values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.fixtures.pyodbcRow.Row" [color="black", fontcolor="black", label=<{Row|values<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.connectors.sqla.models.RowLevelSecurityFilter" [color="black", fontcolor="black", label=<{RowLevelSecurityFilter|clause<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>filter_type<br ALIGN="LEFT"/>group_key<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>roles<br ALIGN="LEFT"/>tables<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-06-19_16-17_f3afaf1f11f0_add_unique_name_desc_rls.RowLevelSecurityFilter" [color="black", fontcolor="black", label=<{RowLevelSecurityFilter|id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.core.RowLevelSecurityFilterType" [color="black", fontcolor="black", label=<{RowLevelSecurityFilterType|BASE : str<br ALIGN="LEFT"/>REGULAR : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.connectors.sqla.views.RowLevelSecurityView" [color="black", fontcolor="black", label=<{RowLevelSecurityView|class_permission_name : str<br ALIGN="LEFT"/>route_base : str<br ALIGN="LEFT"/>|list(): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.security.exceptions.RuleDeleteFailedError" [color="black", fontcolor="black", label=<{RuleDeleteFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.superset_typing.SQLAColumnType" [color="black", fontcolor="black", label=<{SQLAColumnType|is_dttm : bool<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>type : Optional[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.encrypt.SQLAlchemyUtilsAdapter" [color="black", fontcolor="black", label=<{SQLAlchemyUtilsAdapter|<br ALIGN="LEFT"/>|create(app_config: Optional[dict[str, Any]]): TypeDecorator<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sqllab.schemas.SQLLabBootstrapSchema" [color="black", fontcolor="black", label=<{SQLLabBootstrapSchema|active_tab : Nested<br ALIGN="LEFT"/>databases : Dict<br ALIGN="LEFT"/>queries : Dict<br ALIGN="LEFT"/>tab_state_ids : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2020-10-05_18-10_af30ca79208f_collapse_alerting_models_into_a_single_.SQLObserver" [color="black", fontcolor="black", label=<{SQLObserver|alert<br ALIGN="LEFT"/>alert_id<br ALIGN="LEFT"/>database_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>sql<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sql.parse.SQLScript" [color="black", fontcolor="black", label=<{SQLScript|engine : str<br ALIGN="LEFT"/>special_engines : dict<br ALIGN="LEFT"/>statements<br ALIGN="LEFT"/>|format(comments: bool): str<br ALIGN="LEFT"/>get_settings(): dict[str, str \| bool]<br ALIGN="LEFT"/>has_mutation(): bool<br ALIGN="LEFT"/>optimize(): SQLScript<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sql.parse.SQLStatement" [color="black", fontcolor="black", label=<{SQLStatement|<br ALIGN="LEFT"/>|format(comments: bool): str<br ALIGN="LEFT"/>get_settings(): dict[str, str \| bool]<br ALIGN="LEFT"/>is_mutating(): bool<br ALIGN="LEFT"/>optimize(): SQLStatement<br ALIGN="LEFT"/>split_script(script: str, engine: str): list[SQLStatement]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sql_validators.base.SQLValidationAnnotation" [color="black", fontcolor="black", label=<{SQLValidationAnnotation|end_column : int \| None<br ALIGN="LEFT"/>line_number : int \| None<br ALIGN="LEFT"/>message : str<br ALIGN="LEFT"/>start_column : int \| None<br ALIGN="LEFT"/>|to_dict(): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.extensions.ssh.SSHManager" [color="black", fontcolor="black", label=<{SSHManager|local_bind_address<br ALIGN="LEFT"/>|build_sqla_url(sqlalchemy_url: str, server: sshtunnel.SSHTunnelForwarder): str<br ALIGN="LEFT"/>create_tunnel(ssh_tunnel: 'SSHTunnel', sqlalchemy_database_uri: str): sshtunnel.SSHTunnelForwarder<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.extensions.ssh.SSHManagerFactory" [color="black", fontcolor="black", label=<{SSHManagerFactory|instance<br ALIGN="LEFT"/>|init_app(app: Flask): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.databases.ssh_tunnel.models.SSHTunnel" [color="black", fontcolor="black", label=<{SSHTunnel|data<br ALIGN="LEFT"/>database<br ALIGN="LEFT"/>database_id<br ALIGN="LEFT"/>export_fields : list<br ALIGN="LEFT"/>extra_import_fields : list<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>password<br ALIGN="LEFT"/>private_key<br ALIGN="LEFT"/>private_key_password<br ALIGN="LEFT"/>server_address<br ALIGN="LEFT"/>server_port<br ALIGN="LEFT"/>username<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelCreateFailedError" [color="black", fontcolor="red", label=<{SSHTunnelCreateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.daos.database.SSHTunnelDAO" [color="black", fontcolor="black", label=<{SSHTunnelDAO|<br ALIGN="LEFT"/>|update(item: SSHTunnel \| None, attributes: dict[str, Any] \| None): SSHTunnel<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelDatabasePortError" [color="black", fontcolor="red", label=<{SSHTunnelDatabasePortError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelDeleteFailedError" [color="black", fontcolor="red", label=<{SSHTunnelDeleteFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelError" [color="black", fontcolor="red", label=<{SSHTunnelError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelInvalidCredentials" [color="black", fontcolor="red", label=<{SSHTunnelInvalidCredentials|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelInvalidError" [color="black", fontcolor="red", label=<{SSHTunnelInvalidError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelMissingCredentials" [color="black", fontcolor="red", label=<{SSHTunnelMissingCredentials|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelNotFoundError" [color="black", fontcolor="red", label=<{SSHTunnelNotFoundError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelRequiredFieldValidationError" [color="black", fontcolor="red", label=<{SSHTunnelRequiredFieldValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelUpdateFailedError" [color="black", fontcolor="red", label=<{SSHTunnelUpdateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelingNotEnabledError" [color="black", fontcolor="red", label=<{SSHTunnelingNotEnabledError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.doris.STRUCT" [color="black", fontcolor="black", label=<{STRUCT|python_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.starrocks.STRUCT" [color="black", fontcolor="black", label=<{STRUCT|python_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.datasource.schemas.SamplesPayloadSchema" [color="black", fontcolor="black", label=<{SamplesPayloadSchema|extras : Nested<br ALIGN="LEFT"/>filters : List<br ALIGN="LEFT"/>granularity : String<br ALIGN="LEFT"/>time_range : String<br ALIGN="LEFT"/>|handle_none(data: dict[str, Any]): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.views.datasource.schemas.SamplesRequestSchema" [color="black", fontcolor="black", label=<{SamplesRequestSchema|datasource_id : Integer<br ALIGN="LEFT"/>datasource_type : String<br ALIGN="LEFT"/>force : Boolean<br ALIGN="LEFT"/>page : Integer<br ALIGN="LEFT"/>per_page : Integer<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.shared.catalogs.SavedQuery" [color="black", fontcolor="black", label=<{SavedQuery|catalog<br ALIGN="LEFT"/>db_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2020-10-21_21-09_96e99fb176a0_add_import_mixing_to_saved_query.SavedQuery" [color="black", fontcolor="black", label=<{SavedQuery|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-03-02_09-20_b5a422d8e252_fix_query_and_saved_query_null_schema.SavedQuery" [color="black", fontcolor="black", label=<{SavedQuery|id<br ALIGN="LEFT"/>schema<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.sql_lab.SavedQuery" [color="black", fontcolor="black", label=<{SavedQuery|catalog<br ALIGN="LEFT"/>database<br ALIGN="LEFT"/>db_id<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>export_fields : list<br ALIGN="LEFT"/>export_parent : str<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>last_run<br ALIGN="LEFT"/>last_run_humanized<br ALIGN="LEFT"/>pop_tab_link<br ALIGN="LEFT"/>rows<br ALIGN="LEFT"/>schema<br ALIGN="LEFT"/>sql<br ALIGN="LEFT"/>sqlalchemy_uri<br ALIGN="LEFT"/>tags<br ALIGN="LEFT"/>template_parameters<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_email<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|last_run_delta_humanized(): str<br ALIGN="LEFT"/>to_dict(): dict[str, Any]<br ALIGN="LEFT"/>url(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.queries.saved_queries.filters.SavedQueryAllTextFilter" [color="black", fontcolor="black", label=<{SavedQueryAllTextFilter|arg_name : str<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.daos.query.SavedQueryDAO" [color="black", fontcolor="black", label=<{SavedQueryDAO|base_filter<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.query.exceptions.SavedQueryDeleteFailedError" [color="black", fontcolor="black", label=<{SavedQueryDeleteFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.queries.saved_queries.filters.SavedQueryFavoriteFilter" [color="black", fontcolor="black", label=<{SavedQueryFavoriteFilter|arg_name : str<br ALIGN="LEFT"/>class_name : str<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.queries.saved_queries.filters.SavedQueryFilter" [color="black", fontcolor="black", label=<{SavedQueryFilter|<br ALIGN="LEFT"/>|apply(query: BaseQuery, value: Any): BaseQuery<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.query.exceptions.SavedQueryImportError" [color="black", fontcolor="black", label=<{SavedQueryImportError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.query.exceptions.SavedQueryInvalidError" [color="black", fontcolor="black", label=<{SavedQueryInvalidError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.query.exceptions.SavedQueryNotFoundError" [color="black", fontcolor="black", label=<{SavedQueryNotFoundError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.queries.saved_queries.api.SavedQueryRestApi" [color="black", fontcolor="black", label=<{SavedQueryRestApi|add_columns : list<br ALIGN="LEFT"/>allow_browser_login : bool<br ALIGN="LEFT"/>allowed_distinct_fields : set<br ALIGN="LEFT"/>allowed_rel_fields : set<br ALIGN="LEFT"/>apispec_parameter_schemas : dict<br ALIGN="LEFT"/>base_filters : list<br ALIGN="LEFT"/>base_related_field_filters : dict<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>edit_columns : list<br ALIGN="LEFT"/>include_route_methods<br ALIGN="LEFT"/>list_columns : list<br ALIGN="LEFT"/>list_select_columns : list<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>openapi_spec_methods<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>order_columns : list<br ALIGN="LEFT"/>related_field_filters : dict<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>search_columns : list<br ALIGN="LEFT"/>search_filters : dict<br ALIGN="LEFT"/>show_columns : list<br ALIGN="LEFT"/>|bulk_delete(): Response<br ALIGN="LEFT"/>export(): Response<br ALIGN="LEFT"/>import_(): Response<br ALIGN="LEFT"/>pre_add(item: SavedQuery): None<br ALIGN="LEFT"/>pre_update(item: SavedQuery): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.queries.saved_queries.filters.SavedQueryTagIdFilter" [color="black", fontcolor="black", label=<{SavedQueryTagIdFilter|arg_name : str<br ALIGN="LEFT"/>class_name : str<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.queries.saved_queries.filters.SavedQueryTagNameFilter" [color="black", fontcolor="black", label=<{SavedQueryTagNameFilter|arg_name : str<br ALIGN="LEFT"/>class_name : str<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.sql_lab.views.SavedQueryView" [color="black", fontcolor="black", label=<{SavedQueryView|class_permission_name : str<br ALIGN="LEFT"/>route_base : str<br ALIGN="LEFT"/>|list(): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.databases.schemas.SchemasResponseSchema" [color="black", fontcolor="black", label=<{SchemasResponseSchema|result : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.encrypt.SecretsMigrator" [color="black", fontcolor="black", label=<{SecretsMigrator|<br ALIGN="LEFT"/>|discover_encrypted_fields(): dict[str, dict[str, EncryptedType]]<br ALIGN="LEFT"/>run(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.security.api.SecurityRestApi" [color="black", fontcolor="black", label=<{SecurityRestApi|allow_browser_login : bool<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>|csrf_token(): Response<br ALIGN="LEFT"/>guest_token(): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.databases.schemas.SelectStarResponseSchema" [color="black", fontcolor="black", label=<{SelectStarResponseSchema|result : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.SerializationError" [color="black", fontcolor="red", label=<{SerializationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.key_value.types.SharedKey" [color="black", fontcolor="black", label=<{SharedKey|DASHBOARD_PERMALINK_SALT : str<br ALIGN="LEFT"/>EXPLORE_PERMALINK_SALT : str<br ALIGN="LEFT"/>SQLLAB_PERMALINK_SALT : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.SharedLabelsColorsField" [color="black", fontcolor="black", label=<{SharedLabelsColorsField|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.shillelagh.ShillelaghEngineSpec" [color="black", fontcolor="black", label=<{ShillelaghEngineSpec|allows_joins : bool<br ALIGN="LEFT"/>allows_subqueries : bool<br ALIGN="LEFT"/>default_driver : str<br ALIGN="LEFT"/>drivers : dict<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>|get_function_names(database: Database): list[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.core.SigalrmTimeout" [color="black", fontcolor="black", label=<{SigalrmTimeout|error_message : str<br ALIGN="LEFT"/>seconds : int<br ALIGN="LEFT"/>|handle_timeout(signum: int, frame: Any): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.slack.SlackChannelTypes" [color="black", fontcolor="black", label=<{SlackChannelTypes|PRIVATE : str<br ALIGN="LEFT"/>PUBLIC : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.slack.SlackClientError" [color="black", fontcolor="red", label=<{SlackClientError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.notifications.slack_mixin.SlackMixin" [color="black", fontcolor="black", label=<{SlackMixin|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.notifications.slack.SlackNotification" [color="black", fontcolor="black", label=<{SlackNotification|type<br ALIGN="LEFT"/>|send(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.reports.notifications.exceptions.SlackV1NotificationError" [color="black", fontcolor="black", label=<{SlackV1NotificationError|message : str<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.notifications.slackv2.SlackV2Notification" [color="black", fontcolor="black", label=<{SlackV2Notification|type<br ALIGN="LEFT"/>|send(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.migrations.shared.catalogs.Slice" [color="black", fontcolor="black", label=<{Slice|catalog_perm<br ALIGN="LEFT"/>datasource_id<br ALIGN="LEFT"/>datasource_type<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>schema_perm<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.shared.migrate_viz.base.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>query_context<br ALIGN="LEFT"/>slice_name<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2016-04-25_08-54_c3a8f8611885_materializing_permission.Slice" [color="black", fontcolor="black", label=<{Slice|druid_datasource_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>perm<br ALIGN="LEFT"/>slice_name<br ALIGN="LEFT"/>table_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2016-06-27_08-43_27ae655e4247_make_creator_owners.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>owners<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2016-09-07_23-50_33d996bcc382_update_slice_model.Slice" [color="black", fontcolor="black", label=<{Slice|datasource_id<br ALIGN="LEFT"/>datasource_type<br ALIGN="LEFT"/>druid_datasource_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>table_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2017-01-24_12-31_db0c65b146bd_update_slice_model_json.Slice" [color="black", fontcolor="black", label=<{Slice|datasource_type<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>slice_name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2017-12-08_08-19_67a6ac9b727b_update_spatial_params.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2017-12-17_11-06_21e88bc06c02_annotation_migration.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-04-10_11-19_bf706ae5eb46_cal_heatmap_metric_to_metrics.Slice" [color="black", fontcolor="black", label=<{Slice|datasource_type<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>slice_name<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-06-04_11-12_c5756bec8b47_time_grain_sqla.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-06-07_09-52_afb7730f6a9c_remove_empty_filters.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-06-13_10-20_4451805bbaa1_remove_double_percents.Slice" [color="black", fontcolor="black", label=<{Slice|datasource_id<br ALIGN="LEFT"/>datasource_type<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-06-13_14-54_bddc498dd179_adhoc_filters.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-06-14_14-31_80a67c5192fa_single_pie_chart_metric.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-05_15-19_3dda56f1c4c6_migrate_num_period_compare_and_period_.Slice" [color="black", fontcolor="black", label=<{Slice|datasource_type<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.Slice" [color="black", fontcolor="black", label=<{Slice|description<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>slice_name<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-22_11-59_bebcf3fed1fe_convert_dashboard_v1_positions.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>slice_name<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-12-11_22-03_fb13d49b72f9_better_filters.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>slice_name<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.Slice" [color="black", fontcolor="black", label=<{Slice|description<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>slice_name<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-06-28_13-17_ab8c66efdd01_resample.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-09-11_21-49_5afa9079866a_serialize_schema_permissions_py.Slice" [color="black", fontcolor="black", label=<{Slice|datasource_id<br ALIGN="LEFT"/>datasource_type<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>schema_perm<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.Slice" [color="black", fontcolor="black", label=<{Slice|description<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>slice_name<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-10-10_13-52_1495eb914ad3_time_range.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-11-06_15-23_78ee127d0d1d_reconvert_legacy_filters_into_adhoc.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2020-02-07_14-13_3325d4caccc8_dashboard_scoped_filters.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>slice_name<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2020-03-25_10-42_f9a30386bd74_cleanup_time_grainularity.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2020-04-29_09-24_620241d1153f_update_time_grain_sqla.Slice" [color="black", fontcolor="black", label=<{Slice|datasource_id<br ALIGN="LEFT"/>datasource_type<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2020-08-12_00-24_978245563a02_migrate_iframe_to_dash_markdown.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2021-01-23_16-25_260bf0649a77_migrate_x_dateunit_in_time_range.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>slice_name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2021-02-04_09-34_070c043f2fdb_add_granularity_to_charts_where_missing.Slice" [color="black", fontcolor="black", label=<{Slice|datasource_id<br ALIGN="LEFT"/>datasource_type<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2021-02-10_12-32_41ce8799acc3_rename_pie_label_type.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2021-02-14_11-46_1412ec1e5a7b_legacy_force_directed_to_echart.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2021-04-09_16-14_085f06488938_country_map_use_lowercase_country_name.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2021-08-03_15-36_143b6f2815da_migrate_pivot_table_v2_heatmaps_to_new_.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2021-09-27_11-31_60dc453f4e2e_migrate_timeseries_limit_metric_to_.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>slice_name<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2021-10-12_11-15_32646df09c64_update_time_grain_sqla.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2021-12-13_14-06_fe23025b9441_rename_big_viz_total_form_data_fields.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2021-12-17_16-56_31bb738bd1d2_move_pivot_table_v2_legacy_order_by_to_.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-03-02_16-41_7293b0ca7944_change_adhoc_filter_b_from_none_to_.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-04-04_15-04_b0d0249074e4_deprecate_time_range_endpoints_v2.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-04-18_11-20_ad07e4fdbaba_rm_time_range_endpoints_from_qc_3.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>query_context<br ALIGN="LEFT"/>slice_name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-07-05_15-48_409c7b420ab0_add_created_by_fk_as_owner.Slice" [color="black", fontcolor="black", label=<{Slice|created_by_fk<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-08-16_15-23_6d3c6f9d665d_fix_table_chart_conditional_formatting_.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2023-03-05_10-06_d0ac08bb5b83_invert_horizontal_bar_chart_order.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2023-03-17_13-24_b5ea9d343307_bar_chart_stack_options.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2023-03-27_12-30_7e67aecbf3f1_chart_ds_constraint.Slice" [color="black", fontcolor="black", label=<{Slice|datasource_type<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2023-07-18_15-30_863adcf72773_delete_obsolete_druid_nosql_slice_parameters.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>query_context<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2023-07-19_17-54_ee179a490af9_deckgl_path_width_units.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2023-08-02_15-23_0769ef90fddd_fix_schema_perm_for_datasets.Slice" [color="black", fontcolor="black", label=<{Slice|datasource_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>schema_perm<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2023-12-15_17-58_06dd9ff00fe8_add_percent_calculation_type_funnel_.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2024-01-18_15-20_214f580d09c9_migrate_filter_boxes_to_native_filters.Slice" [color="black", fontcolor="black", label=<{Slice|datasource_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>slice_name<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2024-03-01_10-47_be1b217cd8cd_big_number_kpi_single_metric.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2024-05-10_18-02_f84fde59123a_update_charts_with_old_time_comparison.Slice" [color="black", fontcolor="black", label=<{Slice|id<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.slice.Slice" [color="black", fontcolor="black", label=<{Slice|cache_timeout<br ALIGN="LEFT"/>catalog_perm<br ALIGN="LEFT"/>certification_details<br ALIGN="LEFT"/>certified_by<br ALIGN="LEFT"/>chart<br ALIGN="LEFT"/>cls_model<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>datasource<br ALIGN="LEFT"/>datasource_edit_url<br ALIGN="LEFT"/>datasource_id<br ALIGN="LEFT"/>datasource_name<br ALIGN="LEFT"/>datasource_type<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>description_markeddown<br ALIGN="LEFT"/>digest<br ALIGN="LEFT"/>edit_url<br ALIGN="LEFT"/>explore_json_url<br ALIGN="LEFT"/>export_fields : list<br ALIGN="LEFT"/>export_parent : str<br ALIGN="LEFT"/>external_url<br ALIGN="LEFT"/>extra_import_fields : list<br ALIGN="LEFT"/>form_data<br ALIGN="LEFT"/>icons<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>is_managed_externally<br ALIGN="LEFT"/>json_data<br ALIGN="LEFT"/>last_saved_at<br ALIGN="LEFT"/>last_saved_by<br ALIGN="LEFT"/>last_saved_by_fk<br ALIGN="LEFT"/>owners<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>perm<br ALIGN="LEFT"/>query_context<br ALIGN="LEFT"/>query_context_factory : QueryContextFactory \| None<br ALIGN="LEFT"/>schema_perm<br ALIGN="LEFT"/>slice_link<br ALIGN="LEFT"/>slice_name<br ALIGN="LEFT"/>slice_url<br ALIGN="LEFT"/>table<br ALIGN="LEFT"/>tags<br ALIGN="LEFT"/>thumbnail_url<br ALIGN="LEFT"/>token : str<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>viz<br ALIGN="LEFT"/>viz_type<br ALIGN="LEFT"/>|build_explore_url(id_: int, base_url: str, overrides: dict[str, Any] \| None): str<br ALIGN="LEFT"/>clone(): Slice<br ALIGN="LEFT"/>datasource_link(): Markup \| None<br ALIGN="LEFT"/>datasource_name_text(): str \| None<br ALIGN="LEFT"/>datasource_url(): str \| None<br ALIGN="LEFT"/>get(id_: int): Slice<br ALIGN="LEFT"/>get_datasource(): SqlaTable \| None<br ALIGN="LEFT"/>get_explore_url(base_url: str, overrides: dict[str, Any] \| None): str<br ALIGN="LEFT"/>get_query_context(): QueryContext \| None<br ALIGN="LEFT"/>get_query_context_factory(): QueryContextFactory<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.views.chart.filters.SliceFilter" [color="black", fontcolor="black", label=<{SliceFilter|<br ALIGN="LEFT"/>|apply(query: Query, value: Any): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.views.chart.views.SliceModelView" [color="black", fontcolor="black", label=<{SliceModelView|class_permission_name : str<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>route_base : str<br ALIGN="LEFT"/>|add(): FlaskResponse<br ALIGN="LEFT"/>list(): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.explore.schemas.SliceSchema" [color="black", fontcolor="black", label=<{SliceSchema|cache_timeout : Integer<br ALIGN="LEFT"/>certification_details : String<br ALIGN="LEFT"/>certified_by : String<br ALIGN="LEFT"/>changed_on : DateTime<br ALIGN="LEFT"/>changed_on_humanized : String<br ALIGN="LEFT"/>datasource : String<br ALIGN="LEFT"/>description : String<br ALIGN="LEFT"/>description_markeddown : String<br ALIGN="LEFT"/>edit_url : String<br ALIGN="LEFT"/>form_data : Dict<br ALIGN="LEFT"/>is_managed_externally : Boolean<br ALIGN="LEFT"/>modified : String<br ALIGN="LEFT"/>owners : List<br ALIGN="LEFT"/>query_context : Dict<br ALIGN="LEFT"/>slice_id : Integer<br ALIGN="LEFT"/>slice_name : String<br ALIGN="LEFT"/>slice_url : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-07-05_15-48_409c7b420ab0_add_created_by_fk_as_owner.SliceUser" [color="black", fontcolor="black", label=<{SliceUser|id<br ALIGN="LEFT"/>slice_id<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.snowflake.SnowflakeEngineSpec" [color="black", fontcolor="black", label=<{SnowflakeEngineSpec|custom_errors : dict[Pattern[str], tuple[str, SupersetErrorType, dict[str, Any]]]<br ALIGN="LEFT"/>default_driver : str<br ALIGN="LEFT"/>encrypted_extra_sensitive_fields : set<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>force_column_alias_quotes : bool<br ALIGN="LEFT"/>max_column_name_length : int<br ALIGN="LEFT"/>parameters_schema<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>supports_catalog : bool<br ALIGN="LEFT"/>supports_dynamic_catalog : bool<br ALIGN="LEFT"/>supports_dynamic_schema : bool<br ALIGN="LEFT"/>|adjust_engine_params(uri: URL, connect_args: dict[str, Any], catalog: Optional[str], schema: Optional[str]): tuple[URL, dict[str, Any]]<br ALIGN="LEFT"/>build_sqlalchemy_uri(parameters: SnowflakeParametersType, encrypted_extra: Optional[dict[str, Any]]): str<br ALIGN="LEFT"/>cancel_query(cursor: Any, query: Query, cancel_query_id: str): bool<br ALIGN="LEFT"/>convert_dttm(target_type: str, dttm: datetime, db_extra: Optional[dict[str, Any]]): Optional[str]<br ALIGN="LEFT"/>epoch_ms_to_dttm(): str<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>get_cancel_query_id(cursor: Any, query: Query): Optional[str]<br ALIGN="LEFT"/>get_catalog_names(database: 'Database', inspector: Inspector): set[str]<br ALIGN="LEFT"/>get_default_catalog(database: 'Database'): Optional[str]<br ALIGN="LEFT"/>get_extra_params(database: 'Database'): dict[str, Any]<br ALIGN="LEFT"/>get_parameters_from_uri(uri: str, encrypted_extra: Optional[dict[str, str]]): Any<br ALIGN="LEFT"/>get_schema_from_engine_params(sqlalchemy_uri: URL, connect_args: dict[str, Any]): Optional[str]<br ALIGN="LEFT"/>mutate_db_for_connection_test(database: 'Database'): None<br ALIGN="LEFT"/>parameters_json_schema(): Any<br ALIGN="LEFT"/>update_params_from_encrypted_extra(database: 'Database', params: dict[str, Any]): None<br ALIGN="LEFT"/>validate_parameters(properties: BasicPropertiesType): list[SupersetError]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.snowflake.SnowflakeParametersSchema" [color="black", fontcolor="black", label=<{SnowflakeParametersSchema|account : String<br ALIGN="LEFT"/>database : String<br ALIGN="LEFT"/>password : String<br ALIGN="LEFT"/>role : String<br ALIGN="LEFT"/>username : String<br ALIGN="LEFT"/>warehouse : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.snowflake.SnowflakeParametersType" [color="black", fontcolor="black", label=<{SnowflakeParametersType|account : str<br ALIGN="LEFT"/>database : str<br ALIGN="LEFT"/>password : str<br ALIGN="LEFT"/>role : str<br ALIGN="LEFT"/>username : str<br ALIGN="LEFT"/>warehouse : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.solr.SolrEngineSpec" [color="black", fontcolor="black", label=<{SolrEngineSpec|allows_joins : bool<br ALIGN="LEFT"/>allows_subqueries : bool<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>time_groupby_inline : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.integration_tests.utils.public_interfaces_test.test_class_hash.SomeClass" [color="black", fontcolor="black", label=<{SomeClass|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>|add()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.spark.SparkEngineSpec" [color="black", fontcolor="black", label=<{SparkEngineSpec|engine_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.jinja_context.SparkTemplateProcessor" [color="black", fontcolor="black", label=<{SparkTemplateProcessor|engine : str<br ALIGN="LEFT"/>|process_template(sql: str): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.exceptions.SpatialException" [color="black", fontcolor="red", label=<{SpatialException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.sql_lab.results.SqlExecutionResultsCommand" [color="black", fontcolor="black", label=<{SqlExecutionResultsCommand|<br ALIGN="LEFT"/>|run(): dict[str, Any]<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.sql_lab.export.SqlExportResult" [color="black", fontcolor="black", label=<{SqlExportResult|count : int<br ALIGN="LEFT"/>data : list[Any]<br ALIGN="LEFT"/>query<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sqllab.sqllab_execution_context.SqlJsonExecutionContext" [color="black", fontcolor="black", label=<{SqlJsonExecutionContext|async_flag : bool<br ALIGN="LEFT"/>catalog : str \| None<br ALIGN="LEFT"/>client_id : str<br ALIGN="LEFT"/>client_id_or_short_id : str<br ALIGN="LEFT"/>create_table_as_select : CreateTableAsSelect \| None<br ALIGN="LEFT"/>database : Database \| None<br ALIGN="LEFT"/>database_id : int<br ALIGN="LEFT"/>expand_data : bool<br ALIGN="LEFT"/>limit : int<br ALIGN="LEFT"/>query<br ALIGN="LEFT"/>schema : str<br ALIGN="LEFT"/>select_as_cta<br ALIGN="LEFT"/>sql : str<br ALIGN="LEFT"/>sql_editor_id : str<br ALIGN="LEFT"/>status : str<br ALIGN="LEFT"/>tab_name : str<br ALIGN="LEFT"/>template_params : dict[str, Any]<br ALIGN="LEFT"/>user_id : int \| None<br ALIGN="LEFT"/>|create_query(): Query<br ALIGN="LEFT"/>get_execution_result(): SqlResults \| None<br ALIGN="LEFT"/>get_query_details(): str<br ALIGN="LEFT"/>is_run_asynchronous(): bool<br ALIGN="LEFT"/>set_database(database: Database): None<br ALIGN="LEFT"/>set_execution_result(sql_result: SqlResults \| None): None<br ALIGN="LEFT"/>set_query(query: Query): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sqllab.command_status.SqlJsonExecutionStatus" [color="black", fontcolor="black", label=<{SqlJsonExecutionStatus|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sqllab.sql_json_executer.SqlJsonExecutor" [color="black", fontcolor="black", label=<{SqlJsonExecutor|<br ALIGN="LEFT"/>|<I>execute</I>(execution_context: SqlJsonExecutionContext, rendered_query: str, log_params: dict[str, Any] \| None): SqlJsonExecutionStatus<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sqllab.sql_json_executer.SqlJsonExecutorBase" [color="black", fontcolor="black", label=<{SqlJsonExecutorBase|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.sql_lab.schemas.SqlJsonPayloadSchema" [color="black", fontcolor="black", label=<{SqlJsonPayloadSchema|client_id : String<br ALIGN="LEFT"/>ctas_method : String<br ALIGN="LEFT"/>database_id : Integer<br ALIGN="LEFT"/>expand_data : Boolean<br ALIGN="LEFT"/>json : Boolean<br ALIGN="LEFT"/>queryLimit : Integer<br ALIGN="LEFT"/>runAsync : Boolean<br ALIGN="LEFT"/>schema : String<br ALIGN="LEFT"/>select_as_cta : Boolean<br ALIGN="LEFT"/>sql : String<br ALIGN="LEFT"/>sql_editor_id : String<br ALIGN="LEFT"/>tab : String<br ALIGN="LEFT"/>templateParams : String<br ALIGN="LEFT"/>tmp_table_name : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sql_lab.SqlLabException" [color="black", fontcolor="red", label=<{SqlLabException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sqllab.exceptions.SqlLabException" [color="black", fontcolor="red", label=<{SqlLabException|failed_reason_msg : str<br ALIGN="LEFT"/>sql_json_execution_context<br ALIGN="LEFT"/>suggestion_help_msg : str \| None<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sqllab.permalink.exceptions.SqlLabPermalinkCreateFailedError" [color="black", fontcolor="black", label=<{SqlLabPermalinkCreateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sqllab.permalink.exceptions.SqlLabPermalinkGetFailedError" [color="black", fontcolor="black", label=<{SqlLabPermalinkGetFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sqllab.permalink.exceptions.SqlLabPermalinkInvalidStateError" [color="black", fontcolor="black", label=<{SqlLabPermalinkInvalidStateError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sqllab.permalink.api.SqlLabPermalinkRestApi" [color="black", fontcolor="black", label=<{SqlLabPermalinkRestApi|add_model_schema<br ALIGN="LEFT"/>allow_browser_login : bool<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>openapi_spec_component_schemas : tuple<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>|get(key: str): Response<br ALIGN="LEFT"/>post(): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sqllab.permalink.schemas.SqlLabPermalinkSchema" [color="black", fontcolor="black", label=<{SqlLabPermalinkSchema|autorun : Boolean<br ALIGN="LEFT"/>catalog : String<br ALIGN="LEFT"/>dbId : Integer<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>schema : String<br ALIGN="LEFT"/>sql : String<br ALIGN="LEFT"/>templateParams : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sqllab.permalink.types.SqlLabPermalinkValue" [color="black", fontcolor="black", label=<{SqlLabPermalinkValue|autorun : bool<br ALIGN="LEFT"/>catalog : Optional[str]<br ALIGN="LEFT"/>dbId : int<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>schema : Optional[str]<br ALIGN="LEFT"/>sql : str<br ALIGN="LEFT"/>templateParams : Optional[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sql_lab.SqlLabQueryStoppedException" [color="black", fontcolor="red", label=<{SqlLabQueryStoppedException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sqllab.api.SqlLabRestApi" [color="black", fontcolor="black", label=<{SqlLabRestApi|allow_browser_login : bool<br ALIGN="LEFT"/>apispec_parameter_schemas : dict<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>estimate_model_schema<br ALIGN="LEFT"/>execute_model_schema<br ALIGN="LEFT"/>format_model_schema<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>openapi_spec_component_schemas : tuple<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>|estimate_query_cost(): Response<br ALIGN="LEFT"/>execute_sql_query(): FlaskResponse<br ALIGN="LEFT"/>export_csv(client_id: str): CsvResponse<br ALIGN="LEFT"/>format_sql(): FlaskResponse<br ALIGN="LEFT"/>get(): Response<br ALIGN="LEFT"/>get_results(): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sql_lab.SqlLabSecurityException" [color="black", fontcolor="red", label=<{SqlLabSecurityException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.connectors.sqla.models.SqlMetric" [color="black", fontcolor="black", label=<{SqlMetric|currency<br ALIGN="LEFT"/>currency_json<br ALIGN="LEFT"/>d3format<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>export_fields : list<br ALIGN="LEFT"/>export_parent : str<br ALIGN="LEFT"/>expression<br ALIGN="LEFT"/>extra<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>metric_name<br ALIGN="LEFT"/>metric_type<br ALIGN="LEFT"/>perm<br ALIGN="LEFT"/>table : Mapped[SqlaTable]<br ALIGN="LEFT"/>table_id<br ALIGN="LEFT"/>update_from_object_fields : list<br ALIGN="LEFT"/>verbose_name<br ALIGN="LEFT"/>warning_text<br ALIGN="LEFT"/>|get_perm(): str \| None<br ALIGN="LEFT"/>get_sqla_col(label: str \| None, template_processor: BaseTemplateProcessor \| None): Column<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2016-06-07_12-33_d8bc074f7aad_add_new_field_is_restricted_to_.SqlMetric" [color="black", fontcolor="black", label=<{SqlMetric|id<br ALIGN="LEFT"/>is_restricted<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.SqlMetric" [color="black", fontcolor="black", label=<{SqlMetric|expression<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-20_15-57_e9df189e5c7e_update_base_metrics.SqlMetric" [color="black", fontcolor="black", label=<{SqlMetric|table_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.SqlMetric" [color="black", fontcolor="black", label=<{SqlMetric|expression<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.SqlMetric" [color="black", fontcolor="black", label=<{SqlMetric|expression<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.SqlMetric" [color="black", fontcolor="black", label=<{SqlMetric|d3format<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>expression<br ALIGN="LEFT"/>extra<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>metric_name<br ALIGN="LEFT"/>metric_type<br ALIGN="LEFT"/>table_id<br ALIGN="LEFT"/>verbose_name<br ALIGN="LEFT"/>warning_text<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.sql_lab.execute.SqlQueryRender" [color="black", fontcolor="black", label=<{SqlQueryRender|<br ALIGN="LEFT"/>|<I>render</I>(execution_context: SqlJsonExecutionContext): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sqllab.query_render.SqlQueryRenderException" [color="black", fontcolor="red", label=<{SqlQueryRenderException|extra<br ALIGN="LEFT"/>|to_dict(): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sqllab.query_render.SqlQueryRenderImpl" [color="black", fontcolor="black", label=<{SqlQueryRenderImpl|<br ALIGN="LEFT"/>|render(execution_context: SqlJsonExecutionContext): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.sql_lab.export.SqlResultExportCommand" [color="black", fontcolor="black", label=<{SqlResultExportCommand|<br ALIGN="LEFT"/>|run(): SqlExportResult<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.models.sql_lab.SqlTablesMixin" [color="black", fontcolor="black", label=<{SqlTablesMixin|sql_tables<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.helpers.SqlaQuery" [color="black", fontcolor="black", label=<{SqlaQuery|applied_filter_columns : list[ColumnTyping]<br ALIGN="LEFT"/>applied_template_filters : list[str]<br ALIGN="LEFT"/>cte : Optional[str]<br ALIGN="LEFT"/>extra_cache_keys : list[Any]<br ALIGN="LEFT"/>labels_expected : list[str]<br ALIGN="LEFT"/>prequeries : list[str]<br ALIGN="LEFT"/>rejected_filter_columns : list[ColumnTyping]<br ALIGN="LEFT"/>sqla_query : Select<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.connectors.sqla.models.SqlaTable" [color="black", fontcolor="black", label=<{SqlaTable|always_filter_main_dttm<br ALIGN="LEFT"/>any_dttm_col<br ALIGN="LEFT"/>baselink : str<br ALIGN="LEFT"/>catalog<br ALIGN="LEFT"/>changed_by_name<br ALIGN="LEFT"/>column_class<br ALIGN="LEFT"/>columns : Mapped[list[TableColumn]]<br ALIGN="LEFT"/>connection<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>database<br ALIGN="LEFT"/>database_id<br ALIGN="LEFT"/>database_name<br ALIGN="LEFT"/>datasource_name<br ALIGN="LEFT"/>datasource_type<br ALIGN="LEFT"/>db_engine_spec<br ALIGN="LEFT"/>db_extra<br ALIGN="LEFT"/>description_markeddown<br ALIGN="LEFT"/>dttm_cols<br ALIGN="LEFT"/>export_children : list<br ALIGN="LEFT"/>export_fields : list<br ALIGN="LEFT"/>export_parent : str<br ALIGN="LEFT"/>extra<br ALIGN="LEFT"/>extra_dict<br ALIGN="LEFT"/>fetch_values_predicate<br ALIGN="LEFT"/>full_name<br ALIGN="LEFT"/>granularity_sqla<br ALIGN="LEFT"/>health_check_message<br ALIGN="LEFT"/>html<br ALIGN="LEFT"/>is_rls_supported : bool<br ALIGN="LEFT"/>is_sqllab_view<br ALIGN="LEFT"/>link<br ALIGN="LEFT"/>main_dttm_col<br ALIGN="LEFT"/>metric_class<br ALIGN="LEFT"/>metrics : Mapped[list[SqlMetric]]<br ALIGN="LEFT"/>normalize_columns<br ALIGN="LEFT"/>num_cols<br ALIGN="LEFT"/>owner_class<br ALIGN="LEFT"/>owners<br ALIGN="LEFT"/>query_language : str<br ALIGN="LEFT"/>quote_identifier<br ALIGN="LEFT"/>schema<br ALIGN="LEFT"/>select_star<br ALIGN="LEFT"/>sql<br ALIGN="LEFT"/>sql_url<br ALIGN="LEFT"/>sqla_aggregations : dict<br ALIGN="LEFT"/>table_name<br ALIGN="LEFT"/>template_params<br ALIGN="LEFT"/>time_column_grains<br ALIGN="LEFT"/>time_grain_sqla<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>update_from_object_fields<br ALIGN="LEFT"/>|adhoc_column_to_sqla(col: AdhocColumn, force_type_check: bool, template_processor: BaseTemplateProcessor \| None): ColumnElement<br ALIGN="LEFT"/>adhoc_metric_to_sqla(metric: AdhocMetric, columns_by_name: dict[str, TableColumn], template_processor: BaseTemplateProcessor \| None): ColumnElement<br ALIGN="LEFT"/>after_delete(mapper: Mapper, connection: Connection, sqla_table: SqlaTable): None<br ALIGN="LEFT"/>after_insert(mapper: Mapper, connection: Connection, target: SqlaTable): None<br ALIGN="LEFT"/>before_update(mapper: Mapper, connection: Connection, target: SqlaTable): None<br ALIGN="LEFT"/>default_query(qry: Query): Query<br ALIGN="LEFT"/>external_metadata(): list[ResultSetColumnType]<br ALIGN="LEFT"/>fetch_metadata(): MetadataResult<br ALIGN="LEFT"/>get_all_datasources(): list[SqlaTable]<br ALIGN="LEFT"/>get_catalog_perm(): str \| None<br ALIGN="LEFT"/>get_datasource_by_name(datasource_name: str, catalog: str \| None, schema: str \| None, database_name: str): SqlaTable \| None<br ALIGN="LEFT"/>get_eager_sqlatable_datasource(datasource_id: int): SqlaTable<br ALIGN="LEFT"/>get_extra_cache_keys(query_obj: QueryObjectDict): list[Hashable]<br ALIGN="LEFT"/>get_fetch_values_predicate(template_processor: BaseTemplateProcessor \| None): TextClause<br ALIGN="LEFT"/>get_from_clause(template_processor: BaseTemplateProcessor \| None): tuple[TableClause \| Alias, str \| None]<br ALIGN="LEFT"/>get_perm(): str<br ALIGN="LEFT"/>get_query_str(query_obj: QueryObjectDict): str<br ALIGN="LEFT"/>get_schema_perm(): str \| None<br ALIGN="LEFT"/>get_sqla_table(): TableClause<br ALIGN="LEFT"/>get_sqla_table_object(): Table<br ALIGN="LEFT"/>get_template_processor(): BaseTemplateProcessor<br ALIGN="LEFT"/>has_extra_cache_key_calls(query_obj: QueryObjectDict): bool<br ALIGN="LEFT"/>load_database(): None<br ALIGN="LEFT"/>make_orderby_compatible(select_exprs: list[ColumnElement], orderby_exprs: list[ColumnElement]): None<br ALIGN="LEFT"/>name(): str<br ALIGN="LEFT"/>query(query_obj: QueryObjectDict): QueryResult<br ALIGN="LEFT"/>query_datasources_by_name(database: Database, datasource_name: str, catalog: str \| None, schema: str \| None): list[SqlaTable]<br ALIGN="LEFT"/>query_datasources_by_permissions(database: Database, permissions: set[str], catalog_perms: set[str], schema_perms: set[str]): list[SqlaTable]<br ALIGN="LEFT"/>text(clause: str): TextClause<br ALIGN="LEFT"/>update_column(mapper: Mapper, connection: Connection, target: SqlMetric \| TableColumn): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.migrations.shared.catalogs.SqlaTable" [color="black", fontcolor="black", label=<{SqlaTable|catalog<br ALIGN="LEFT"/>catalog_perm<br ALIGN="LEFT"/>database_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>perm<br ALIGN="LEFT"/>schema<br ALIGN="LEFT"/>schema_perm<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.SqlaTable" [color="black", fontcolor="black", label=<{SqlaTable|default_endpoint<br ALIGN="LEFT"/>fetch_values_predicate<br ALIGN="LEFT"/>main_dttm_col<br ALIGN="LEFT"/>schema<br ALIGN="LEFT"/>sql<br ALIGN="LEFT"/>table_name<br ALIGN="LEFT"/>template_params<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.SqlaTable" [color="black", fontcolor="black", label=<{SqlaTable|default_endpoint<br ALIGN="LEFT"/>fetch_values_predicate<br ALIGN="LEFT"/>main_dttm_col<br ALIGN="LEFT"/>schema<br ALIGN="LEFT"/>sql<br ALIGN="LEFT"/>table_name<br ALIGN="LEFT"/>template_params<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.SqlaTable" [color="black", fontcolor="black", label=<{SqlaTable|default_endpoint<br ALIGN="LEFT"/>fetch_values_predicate<br ALIGN="LEFT"/>main_dttm_col<br ALIGN="LEFT"/>schema<br ALIGN="LEFT"/>sql<br ALIGN="LEFT"/>table_name<br ALIGN="LEFT"/>template_params<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2020-09-24_12-04_3fbbc6e8d654_fix_data_access_permissions_for_virtual_.SqlaTable" [color="black", fontcolor="black", label=<{SqlaTable|database<br ALIGN="LEFT"/>database_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>table_name<br ALIGN="LEFT"/>|get_perm(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2021-02-04_09-34_070c043f2fdb_add_granularity_to_charts_where_missing.SqlaTable" [color="black", fontcolor="black", label=<{SqlaTable|id<br ALIGN="LEFT"/>main_dttm_col<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2021-04-07_07-21_134cea61c5e7_remove_dataset_health_check_message.SqlaTable" [color="black", fontcolor="black", label=<{SqlaTable|extra<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.SqlaTable" [color="black", fontcolor="black", label=<{SqlaTable|database<br ALIGN="LEFT"/>database_id<br ALIGN="LEFT"/>external_url<br ALIGN="LEFT"/>extra<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>is_managed_externally<br ALIGN="LEFT"/>schema<br ALIGN="LEFT"/>sql<br ALIGN="LEFT"/>table_name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-07-05_15-48_409c7b420ab0_add_created_by_fk_as_owner.SqlaTable" [color="black", fontcolor="black", label=<{SqlaTable|created_by_fk<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2023-08-02_15-23_0769ef90fddd_fix_schema_perm_for_datasets.SqlaTable" [color="black", fontcolor="black", label=<{SqlaTable|database_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>schema<br ALIGN="LEFT"/>schema_perm<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2023-08-14_09-38_9f4a086c2676_add_normalize_columns_to_sqla_model.SqlaTable" [color="black", fontcolor="black", label=<{SqlaTable|id<br ALIGN="LEFT"/>normalize_columns<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2023-09-06_13-18_317970b4400c_added_time_secondary_column_to_.SqlaTable" [color="black", fontcolor="black", label=<{SqlaTable|always_filter_main_dttm<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-07-05_15-48_409c7b420ab0_add_created_by_fk_as_owner.SqlaTableUser" [color="black", fontcolor="black", label=<{SqlaTableUser|id<br ALIGN="LEFT"/>table_id<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-09-11_21-49_5afa9079866a_serialize_schema_permissions_py.Sqlatable" [color="black", fontcolor="black", label=<{Sqlatable|database<br ALIGN="LEFT"/>database_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>perm<br ALIGN="LEFT"/>schema<br ALIGN="LEFT"/>schema_perm<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.sqlite.SqliteEngineSpec" [color="black", fontcolor="black", label=<{SqliteEngineSpec|custom_errors : dict[Pattern[str], tuple[str, SupersetErrorType, dict[str, Any]]]<br ALIGN="LEFT"/>disable_ssh_tunneling : bool<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>|convert_dttm(target_type: str, dttm: datetime, db_extra: dict[str, Any] \| None): str \| None<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>get_function_names(database: Database): list[str]<br ALIGN="LEFT"/>get_table_names(database: Database, inspector: Inspector, schema: str \| None): set[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.views.sqllab.SqllabView" [color="black", fontcolor="black", label=<{SqllabView|class_permission_name : str<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>route_base : str<br ALIGN="LEFT"/>|history(): FlaskResponse<br ALIGN="LEFT"/>root(): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.starrocks.StarRocksEngineSpec" [color="black", fontcolor="black", label=<{StarRocksEngineSpec|column_type_mappings : tuple<br ALIGN="LEFT"/>custom_errors : dict[Pattern[str], tuple[str, SupersetErrorType, dict[str, Any]]]<br ALIGN="LEFT"/>default_driver : str<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>|adjust_engine_params(uri: URL, connect_args: dict[str, Any], catalog: Optional[str], schema: Optional[str]): tuple[URL, dict[str, Any]]<br ALIGN="LEFT"/>get_prequeries(database: Database, catalog: Union[str, None], schema: Union[str, None]): list[str]<br ALIGN="LEFT"/>get_schema_from_engine_params(sqlalchemy_uri: URL, connect_args: dict[str, Any]): Optional[str]<br ALIGN="LEFT"/>get_url_for_impersonation(url: URL, impersonate_user: bool, username: Union[str, None], access_token: Union[str, None]): URL<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.stats_logger.StatsdStatsLogger" [color="black", fontcolor="black", label=<{StatsdStatsLogger|client : NoneType<br ALIGN="LEFT"/>|decr(key: str): None<br ALIGN="LEFT"/>gauge(key: str, value: float): None<br ALIGN="LEFT"/>incr(key: str): None<br ALIGN="LEFT"/>timing(key: str, value: float): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.log.StdOutEventLogger" [color="black", fontcolor="black", label=<{StdOutEventLogger|<br ALIGN="LEFT"/>|log(user_id: int \| None, action: str, dashboard_id: int \| None, duration_ms: int \| None, slice_id: int \| None, referrer: str \| None, curated_payload: dict[str, Any] \| None, curated_form_data: dict[str, Any] \| None): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.queries.schemas.StopQuerySchema" [color="black", fontcolor="black", label=<{StopQuerySchema|client_id : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tasks.cache.Strategy" [color="black", fontcolor="black", label=<{Strategy|<br ALIGN="LEFT"/>|<I>get_tasks</I>(): list[CacheWarmupTask]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.example_data.data_generator.string_generator.StringGenerator" [color="black", fontcolor="black", label=<{StringGenerator|<br ALIGN="LEFT"/>|generate(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.example_data.data_generator.string_generator_factory.StringGeneratorFactory" [color="black", fontcolor="black", label=<{StringGeneratorFactory|<br ALIGN="LEFT"/>|make(seed_letters: str, min_length: int, max_length: int): StringGenerator<br ALIGN="LEFT"/>make_ascii_letters_based(min_length: int, max_length: int): StringGenerator<br ALIGN="LEFT"/>make_lowercase_based(min_length: int, max_length: int): StringGenerator<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.views.core.Superset" [color="black", fontcolor="black", label=<{Superset|logger : NoneType, RootLogger<br ALIGN="LEFT"/>|dashboard(dashboard_id_or_slug: str, add_extra_log_payload: Callable[..., None]): FlaskResponse<br ALIGN="LEFT"/>dashboard_permalink(key: str): FlaskResponse<br ALIGN="LEFT"/>explore(datasource_type: str \| None, datasource_id: int \| None, key: str \| None): FlaskResponse<br ALIGN="LEFT"/>explore_json(datasource_type: str \| None, datasource_id: int \| None): FlaskResponse<br ALIGN="LEFT"/>explore_json_data(cache_key: str): FlaskResponse<br ALIGN="LEFT"/>fetch_datasource_metadata(): FlaskResponse<br ALIGN="LEFT"/>generate_json(viz_obj: BaseViz, response_type: str \| None): FlaskResponse<br ALIGN="LEFT"/>get_query_string_response(viz_obj: BaseViz): FlaskResponse<br ALIGN="LEFT"/>get_raw_results(viz_obj: BaseViz): FlaskResponse<br ALIGN="LEFT"/>get_redirect_url(): str<br ALIGN="LEFT"/>get_samples(viz_obj: BaseViz): FlaskResponse<br ALIGN="LEFT"/>log(): FlaskResponse<br ALIGN="LEFT"/>save_or_overwrite_slice(slc: Slice \| None, slice_add_perm: bool, slice_overwrite_perm: bool, slice_download_perm: bool, datasource_id: int, datasource_type: str, datasource_name: str, query_context: str \| None): FlaskResponse<br ALIGN="LEFT"/>send_data_payload_response(viz_obj: BaseViz, payload: Any): FlaskResponse<br ALIGN="LEFT"/>slice(slice_id: int): FlaskResponse<br ALIGN="LEFT"/>sqllab_history(): FlaskResponse<br ALIGN="LEFT"/>warm_up_cache(): FlaskResponse<br ALIGN="LEFT"/>welcome(): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.extensions.metadb.SupersetAPSWDialect" [color="black", fontcolor="black", label=<{SupersetAPSWDialect|allowed_dbs : list[str] \| None<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|create_connect_args(url: URL): tuple[tuple[()], dict[str, Any]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.app.SupersetApp" [color="black", fontcolor="black", label=<{SupersetApp|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.initialization.SupersetAppInitializer" [color="black", fontcolor="black", label=<{SupersetAppInitializer|config<br ALIGN="LEFT"/>flask_app<br ALIGN="LEFT"/>manifest : dict[Any, Any]<br ALIGN="LEFT"/>superset_app<br ALIGN="LEFT"/>|check_secret_key(): None<br ALIGN="LEFT"/>configure_async_queries(): None<br ALIGN="LEFT"/>configure_auth_provider(): None<br ALIGN="LEFT"/>configure_cache(): None<br ALIGN="LEFT"/>configure_celery(): None<br ALIGN="LEFT"/>configure_data_sources(): None<br ALIGN="LEFT"/>configure_db_encrypt(): None<br ALIGN="LEFT"/>configure_fab(): None<br ALIGN="LEFT"/>configure_feature_flags(): None<br ALIGN="LEFT"/>configure_logging(): None<br ALIGN="LEFT"/>configure_middlewares(): None<br ALIGN="LEFT"/>configure_session(): None<br ALIGN="LEFT"/>configure_sqlglot_dialects(): None<br ALIGN="LEFT"/>configure_ssh_manager(): None<br ALIGN="LEFT"/>configure_stats_manager(): None<br ALIGN="LEFT"/>configure_url_map_converters(): None<br ALIGN="LEFT"/>configure_wtf(): None<br ALIGN="LEFT"/>enable_profiling(): None<br ALIGN="LEFT"/>init_app(): None<br ALIGN="LEFT"/>init_app_in_ctx(): None<br ALIGN="LEFT"/>init_views(): None<br ALIGN="LEFT"/><I>post_init</I>(): None<br ALIGN="LEFT"/>pre_init(): None<br ALIGN="LEFT"/>register_blueprints(): None<br ALIGN="LEFT"/>set_db_default_isolation(): None<br ALIGN="LEFT"/>setup_bundle_manifest(): None<br ALIGN="LEFT"/>setup_db(): None<br ALIGN="LEFT"/>setup_event_logger(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.exceptions.SupersetCancelQueryException" [color="black", fontcolor="red", label=<{SupersetCancelQueryException|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.exceptions.SupersetDBAPIConnectionError" [color="black", fontcolor="black", label=<{SupersetDBAPIConnectionError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.exceptions.SupersetDBAPIDataError" [color="black", fontcolor="black", label=<{SupersetDBAPIDataError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.exceptions.SupersetDBAPIDatabaseError" [color="black", fontcolor="black", label=<{SupersetDBAPIDatabaseError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.exceptions.SupersetDBAPIError" [color="black", fontcolor="black", label=<{SupersetDBAPIError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.exceptions.SupersetDBAPIOperationalError" [color="black", fontcolor="black", label=<{SupersetDBAPIOperationalError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.exceptions.SupersetDBAPIProgrammingError" [color="black", fontcolor="black", label=<{SupersetDBAPIProgrammingError|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.superset.SupersetEngineSpec" [color="black", fontcolor="black", label=<{SupersetEngineSpec|default_driver : str<br ALIGN="LEFT"/>drivers : dict<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>supports_file_upload : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.errors.SupersetError" [color="black", fontcolor="black", label=<{SupersetError|error_type<br ALIGN="LEFT"/>extra : Optional[dict[str, Any]]<br ALIGN="LEFT"/>level<br ALIGN="LEFT"/>message : str<br ALIGN="LEFT"/>|to_dict(): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.exceptions.SupersetErrorException" [color="black", fontcolor="red", label=<{SupersetErrorException|error<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>|to_dict(): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.exceptions.SupersetErrorFromParamsException" [color="black", fontcolor="red", label=<{SupersetErrorFromParamsException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.errors.SupersetErrorType" [color="black", fontcolor="black", label=<{SupersetErrorType|ADHOC_SUBQUERY_NOT_ALLOWED_ERROR : str<br ALIGN="LEFT"/>ASYNC_WORKERS_ERROR : str<br ALIGN="LEFT"/>BACKEND_TIMEOUT_ERROR : str<br ALIGN="LEFT"/>CHART_SECURITY_ACCESS_ERROR : str<br ALIGN="LEFT"/>COLUMN_DOES_NOT_EXIST_ERROR : str<br ALIGN="LEFT"/>CONNECTION_ACCESS_DENIED_ERROR : str<br ALIGN="LEFT"/>CONNECTION_DATABASE_PERMISSIONS_ERROR : str<br ALIGN="LEFT"/>CONNECTION_DATABASE_TIMEOUT : str<br ALIGN="LEFT"/>CONNECTION_HOST_DOWN_ERROR : str<br ALIGN="LEFT"/>CONNECTION_INVALID_HOSTNAME_ERROR : str<br ALIGN="LEFT"/>CONNECTION_INVALID_PASSWORD_ERROR : str<br ALIGN="LEFT"/>CONNECTION_INVALID_PORT_ERROR : str<br ALIGN="LEFT"/>CONNECTION_INVALID_USERNAME_ERROR : str<br ALIGN="LEFT"/>CONNECTION_MISSING_PARAMETERS_ERROR : str<br ALIGN="LEFT"/>CONNECTION_PORT_CLOSED_ERROR : str<br ALIGN="LEFT"/>CONNECTION_UNKNOWN_DATABASE_ERROR : str<br ALIGN="LEFT"/>DASHBOARD_SECURITY_ACCESS_ERROR : str<br ALIGN="LEFT"/>DATABASE_NOT_FOUND_ERROR : str<br ALIGN="LEFT"/>DATABASE_SECURITY_ACCESS_ERROR : str<br ALIGN="LEFT"/>DATASOURCE_SECURITY_ACCESS_ERROR : str<br ALIGN="LEFT"/>DML_NOT_ALLOWED_ERROR : str<br ALIGN="LEFT"/>FAILED_FETCHING_DATASOURCE_INFO_ERROR : str<br ALIGN="LEFT"/>FRONTEND_CSRF_ERROR : str<br ALIGN="LEFT"/>FRONTEND_NETWORK_ERROR : str<br ALIGN="LEFT"/>FRONTEND_TIMEOUT_ERROR : str<br ALIGN="LEFT"/>GENERIC_BACKEND_ERROR : str<br ALIGN="LEFT"/>GENERIC_COMMAND_ERROR : str<br ALIGN="LEFT"/>GENERIC_DB_ENGINE_ERROR : str<br ALIGN="LEFT"/>INVALID_CTAS_QUERY_ERROR : str<br ALIGN="LEFT"/>INVALID_CVAS_QUERY_ERROR : str<br ALIGN="LEFT"/>INVALID_PAYLOAD_FORMAT_ERROR : str<br ALIGN="LEFT"/>INVALID_PAYLOAD_SCHEMA_ERROR : str<br ALIGN="LEFT"/>INVALID_SQL_ERROR : str<br ALIGN="LEFT"/>INVALID_TEMPLATE_PARAMS_ERROR : str<br ALIGN="LEFT"/>MARSHMALLOW_ERROR : str<br ALIGN="LEFT"/>MISSING_OWNERSHIP_ERROR : str<br ALIGN="LEFT"/>MISSING_TEMPLATE_PARAMS_ERROR : str<br ALIGN="LEFT"/>OAUTH2_REDIRECT : str<br ALIGN="LEFT"/>OAUTH2_REDIRECT_ERROR : str<br ALIGN="LEFT"/>OBJECT_DOES_NOT_EXIST_ERROR : str<br ALIGN="LEFT"/>QUERY_SECURITY_ACCESS_ERROR : str<br ALIGN="LEFT"/>REPORT_NOTIFICATION_ERROR : str<br ALIGN="LEFT"/>RESULTS_BACKEND_ERROR : str<br ALIGN="LEFT"/>RESULTS_BACKEND_NOT_CONFIGURED_ERROR : str<br ALIGN="LEFT"/>RESULT_TOO_LARGE_ERROR : str<br ALIGN="LEFT"/>SCHEMA_DOES_NOT_EXIST_ERROR : str<br ALIGN="LEFT"/>SQLLAB_TIMEOUT_ERROR : str<br ALIGN="LEFT"/>SYNTAX_ERROR : str<br ALIGN="LEFT"/>TABLE_DOES_NOT_EXIST_ERROR : str<br ALIGN="LEFT"/>TABLE_NOT_FOUND_ERROR : str<br ALIGN="LEFT"/>TABLE_SECURITY_ACCESS_ERROR : str<br ALIGN="LEFT"/>UNKNOWN_DATASOURCE_TYPE_ERROR : str<br ALIGN="LEFT"/>USER_ACTIVITY_SECURITY_ACCESS_ERROR : str<br ALIGN="LEFT"/>VIZ_GET_DF_ERROR : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.SupersetErrorsException" [color="black", fontcolor="red", label=<{SupersetErrorsException|errors : list[SupersetError]<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.SupersetException" [color="black", fontcolor="red", label=<{SupersetException|error_type<br ALIGN="LEFT"/>exception<br ALIGN="LEFT"/>message : str<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|to_dict(): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.exceptions.SupersetGenericDBErrorException" [color="black", fontcolor="red", label=<{SupersetGenericDBErrorException|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.SupersetGenericErrorException" [color="black", fontcolor="red", label=<{SupersetGenericErrorException|status<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.initialization.SupersetIndexView" [color="black", fontcolor="black", label=<{SupersetIndexView|<br ALIGN="LEFT"/>|index(): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.views.base.SupersetListWidget" [color="black", fontcolor="black", label=<{SupersetListWidget|template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.SupersetMarshmallowValidationError" [color="black", fontcolor="red", label=<{SupersetMarshmallowValidationError|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.extensions.metastore_cache.SupersetMetastoreCache" [color="black", fontcolor="black", label=<{SupersetMetastoreCache|codec<br ALIGN="LEFT"/>namespace : UUID<br ALIGN="LEFT"/>|add(key: str, value: Any, timeout: Optional[int]): bool<br ALIGN="LEFT"/>delete(key: str): Any<br ALIGN="LEFT"/>factory(app: Flask, config: dict[str, Any], args: list[Any], kwargs: dict[str, Any]): BaseCache<br ALIGN="LEFT"/>get(key: str): Any<br ALIGN="LEFT"/>get_key(key: str): UUID<br ALIGN="LEFT"/>has(key: str): bool<br ALIGN="LEFT"/>set(key: str, value: Any, timeout: Optional[int]): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.views.base.SupersetModelView" [color="black", fontcolor="black", label=<{SupersetModelView|list_widget<br ALIGN="LEFT"/>page_size : int<br ALIGN="LEFT"/>|render_app_template(): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.exceptions.SupersetParseError" [color="black", fontcolor="red", label=<{SupersetParseError|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.profiler.SupersetProfiler" [color="black", fontcolor="black", label=<{SupersetProfiler|app : Callable[[Any, Any], Any]<br ALIGN="LEFT"/>interval : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.result_set.SupersetResultSet" [color="black", fontcolor="black", label=<{SupersetResultSet|columns<br ALIGN="LEFT"/>db_engine_spec : type[BaseEngineSpec]<br ALIGN="LEFT"/>pa_table<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>table<br ALIGN="LEFT"/>|convert_pa_dtype(pa_dtype: pa.DataType): Optional[str]<br ALIGN="LEFT"/>convert_table_to_df(table: pa.Table): pd.DataFrame<br ALIGN="LEFT"/>data_type(col_name: str, pa_dtype: pa.DataType): Optional[str]<br ALIGN="LEFT"/>first_nonempty(items: NDArray[Any]): Any<br ALIGN="LEFT"/>is_temporal(db_type_str: Optional[str]): bool<br ALIGN="LEFT"/>to_pandas_df(): pd.DataFrame<br ALIGN="LEFT"/>type_generic(db_type_str: Optional[str]): Optional[utils.GenericDataType]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.security.manager.SupersetRoleListWidget" [color="black", fontcolor="black", label=<{SupersetRoleListWidget|template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.SupersetSecurityException" [color="black", fontcolor="red", label=<{SupersetSecurityException|payload : Optional[dict[str, Any]]<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.security.manager.SupersetSecurityListWidget" [color="black", fontcolor="black", label=<{SupersetSecurityListWidget|template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.security.manager.SupersetSecurityManager" [color="black", fontcolor="black", label=<{SupersetSecurityManager|ACCESSIBLE_PERMS : set<br ALIGN="LEFT"/>ADMIN_ONLY_PERMISSIONS : set<br ALIGN="LEFT"/>ADMIN_ONLY_VIEW_MENUS<br ALIGN="LEFT"/>ALPHA_ONLY_PERMISSIONS : set<br ALIGN="LEFT"/>ALPHA_ONLY_PMVS : set<br ALIGN="LEFT"/>ALPHA_ONLY_VIEW_MENUS : set<br ALIGN="LEFT"/>GAMMA_READ_ONLY_MODEL_VIEWS<br ALIGN="LEFT"/>OBJECT_SPEC_PERMISSIONS : set<br ALIGN="LEFT"/>READ_ONLY_MODEL_VIEWS : set<br ALIGN="LEFT"/>READ_ONLY_PERMISSION : set<br ALIGN="LEFT"/>SQLLAB_EXTRA_PERMISSION_VIEWS : set<br ALIGN="LEFT"/>SQLLAB_ONLY_PERMISSIONS : set<br ALIGN="LEFT"/>USER_MODEL_VIEWS : set<br ALIGN="LEFT"/>data_access_permissions : tuple<br ALIGN="LEFT"/>guest_user_cls<br ALIGN="LEFT"/>pyjwt_for_guest_token : PyJWT<br ALIGN="LEFT"/>userstatschartview : NoneType<br ALIGN="LEFT"/>|can_access(permission_name: str, view_name: str): bool<br ALIGN="LEFT"/>can_access_all_databases(): bool<br ALIGN="LEFT"/>can_access_all_datasources(): bool<br ALIGN="LEFT"/>can_access_all_queries(): bool<br ALIGN="LEFT"/>can_access_catalog(database: 'Database', catalog: str): bool<br ALIGN="LEFT"/>can_access_chart(chart: 'Slice'): bool<br ALIGN="LEFT"/>can_access_dashboard(dashboard: 'Dashboard'): bool<br ALIGN="LEFT"/>can_access_database(database: 'Database'): bool<br ALIGN="LEFT"/>can_access_datasource(datasource: 'BaseDatasource'): bool<br ALIGN="LEFT"/>can_access_schema(datasource: 'BaseDatasource'): bool<br ALIGN="LEFT"/>can_access_table(database: 'Database', table: 'Table'): bool<br ALIGN="LEFT"/>clean_perms(): None<br ALIGN="LEFT"/>copy_role(role_from_name: str, role_to_name: str, merge: bool): None<br ALIGN="LEFT"/>create_custom_permissions(): None<br ALIGN="LEFT"/>create_guest_access_token(user: GuestTokenUser, resources: GuestTokenResources, rls: list[GuestTokenRlsRule]): bytes<br ALIGN="LEFT"/>create_login_manager(app: Flask): LoginManager<br ALIGN="LEFT"/>create_missing_perms(): None<br ALIGN="LEFT"/>database_after_delete(mapper: Mapper, connection: Connection, target: 'Database'): None<br ALIGN="LEFT"/>database_after_insert(mapper: Mapper, connection: Connection, target: 'Database'): None<br ALIGN="LEFT"/>database_after_update(mapper: Mapper, connection: Connection, target: 'Database'): None<br ALIGN="LEFT"/>dataset_after_delete(mapper: Mapper, connection: Connection, target: 'SqlaTable'): None<br ALIGN="LEFT"/>dataset_after_insert(mapper: Mapper, connection: Connection, target: 'SqlaTable'): None<br ALIGN="LEFT"/>dataset_before_update(mapper: Mapper, connection: Connection, target: 'SqlaTable'): None<br ALIGN="LEFT"/>find_roles_by_id(role_ids: list[int]): list[Role]<br ALIGN="LEFT"/>get_accessible_databases(): list[int]<br ALIGN="LEFT"/>get_anonymous_user(): User<br ALIGN="LEFT"/>get_catalog_perm(database: str, catalog: Optional[str]): Optional[str]<br ALIGN="LEFT"/>get_catalogs_accessible_by_user(database: 'Database', catalogs: set[str], hierarchical: bool): set[str]<br ALIGN="LEFT"/>get_chart_access_error_object(dashboard: 'Dashboard'): SupersetError<br ALIGN="LEFT"/>get_current_guest_user_if_guest(): Optional[GuestUser]<br ALIGN="LEFT"/>get_dashboard_access_error_object(dashboard: 'Dashboard'): SupersetError<br ALIGN="LEFT"/>get_database_perm(database_id: int, database_name: str): Optional[str]<br ALIGN="LEFT"/>get_dataset_perm(dataset_id: int, dataset_name: str, database_name: str): Optional[str]<br ALIGN="LEFT"/>get_datasource_access_error_msg(datasource: 'BaseDatasource'): str<br ALIGN="LEFT"/>get_datasource_access_error_object(datasource: 'BaseDatasource'): SupersetError<br ALIGN="LEFT"/>get_datasource_access_link(datasource: 'BaseDatasource'): Optional[str]<br ALIGN="LEFT"/>get_datasources_accessible_by_user(database: 'Database', datasource_names: list[DatasourceName], catalog: Optional[str], schema: Optional[str]): list[DatasourceName]<br ALIGN="LEFT"/>get_exclude_users_from_lists(): list[str]<br ALIGN="LEFT"/>get_guest_rls_filters(dataset: 'BaseDatasource'): list[GuestTokenRlsRule]<br ALIGN="LEFT"/>get_guest_rls_filters_str(table: 'BaseDatasource'): list[str]<br ALIGN="LEFT"/>get_guest_user_from_request(req: Request): Optional[GuestUser]<br ALIGN="LEFT"/>get_guest_user_from_token(token: GuestToken): GuestUser<br ALIGN="LEFT"/>get_rls_cache_key(datasource: 'BaseDatasource'): list[str]<br ALIGN="LEFT"/>get_rls_filters(table: 'BaseDatasource'): list[SqlaQuery]<br ALIGN="LEFT"/>get_rls_sorted(table: 'BaseDatasource'): list['RowLevelSecurityFilter']<br ALIGN="LEFT"/>get_schema_perm(database: str, catalog: Optional[str], schema: Optional[str]): Optional[str]<br ALIGN="LEFT"/>get_schemas_accessible_by_user(database: 'Database', catalog: Optional[str], schemas: set[str], hierarchical: bool): set[str]<br ALIGN="LEFT"/>get_table_access_error_msg(tables: set['Table']): str<br ALIGN="LEFT"/>get_table_access_error_object(tables: set['Table']): SupersetError<br ALIGN="LEFT"/>get_table_access_link(tables: set['Table']): Optional[str]<br ALIGN="LEFT"/>get_user_by_username(username: str): Optional[User]<br ALIGN="LEFT"/>get_user_datasources(): list['BaseDatasource']<br ALIGN="LEFT"/>get_user_roles(user: Optional[User]): list[Role]<br ALIGN="LEFT"/>has_guest_access(dashboard: 'Dashboard'): bool<br ALIGN="LEFT"/>is_admin(): bool<br ALIGN="LEFT"/>is_guest_user(user: Optional[Any]): bool<br ALIGN="LEFT"/>is_owner(resource: Model): bool<br ALIGN="LEFT"/>merge_perm(permission_name: str, view_menu_name: str): None<br ALIGN="LEFT"/><I>on_permission_after_insert</I>(mapper: Mapper, connection: Connection, target: Permission): None<br ALIGN="LEFT"/><I>on_permission_view_after_delete</I>(mapper: Mapper, connection: Connection, target: PermissionView): None<br ALIGN="LEFT"/><I>on_permission_view_after_insert</I>(mapper: Mapper, connection: Connection, target: PermissionView): None<br ALIGN="LEFT"/><I>on_role_after_update</I>(mapper: Mapper, connection: Connection, target: Role): None<br ALIGN="LEFT"/><I>on_view_menu_after_insert</I>(mapper: Mapper, connection: Connection, target: ViewMenu): None<br ALIGN="LEFT"/><I>on_view_menu_after_update</I>(mapper: Mapper, connection: Connection, target: ViewMenu): None<br ALIGN="LEFT"/>parse_jwt_guest_token(raw_token: str): dict[str, Any]<br ALIGN="LEFT"/>raise_for_access(dashboard: Optional['Dashboard'], chart: Optional['Slice'], database: Optional['Database'], datasource: Optional['BaseDatasource'], query: Optional['Query'], query_context: Optional['QueryContext'], table: Optional['Table'], viz: Optional['BaseViz'], sql: Optional[str], catalog: Optional[str], schema: Optional[str]): None<br ALIGN="LEFT"/>raise_for_ownership(resource: Model): None<br ALIGN="LEFT"/>request_loader(request: Request): Optional[User]<br ALIGN="LEFT"/>set_role(role_name: str, pvm_check: Callable[[PermissionView], bool], pvms: list[PermissionView]): None<br ALIGN="LEFT"/>sync_role_definitions(): None<br ALIGN="LEFT"/>user_view_menu_names(permission_name: str): set[str]<br ALIGN="LEFT"/>validate_guest_token_resources(resources: GuestTokenResources): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.extensions.metadb.SupersetShillelaghAdapter" [color="black", fontcolor="black", label=<{SupersetShillelaghAdapter|catalog : NoneType<br ALIGN="LEFT"/>columns<br ALIGN="LEFT"/>database<br ALIGN="LEFT"/>engine_context : partial<br ALIGN="LEFT"/>prefix : str<br ALIGN="LEFT"/>safe : bool<br ALIGN="LEFT"/>schema : NoneType<br ALIGN="LEFT"/>supports_limit : bool<br ALIGN="LEFT"/>supports_offset : bool<br ALIGN="LEFT"/>table<br ALIGN="LEFT"/>type_map : dict[Any, type[Field]]<br ALIGN="LEFT"/>|delete_row(row_id: int): None<br ALIGN="LEFT"/>get_columns(): dict[str, Field]<br ALIGN="LEFT"/>get_data(bounds: dict[str, Filter], order: list[tuple[str, RequestedOrder]], limit: int \| None, offset: int \| None): Iterator[Row]<br ALIGN="LEFT"/>get_field(python_type: Any): Field<br ALIGN="LEFT"/>insert_row(row: Row): int<br ALIGN="LEFT"/>parse_uri(uri: str): tuple[str]<br ALIGN="LEFT"/>supports(uri: str, fast: bool, prefix: str \| None, allowed_dbs: list[str] \| None): bool<br ALIGN="LEFT"/>update_row(row_id: int, row: Row): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.exceptions.SupersetSyntaxErrorException" [color="black", fontcolor="red", label=<{SupersetSyntaxErrorException|error_type<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.SupersetTemplateException" [color="black", fontcolor="red", label=<{SupersetTemplateException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.SupersetTemplateParamsErrorException" [color="black", fontcolor="red", label=<{SupersetTemplateParamsErrorException|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.integration_tests.base_tests.SupersetTestCase" [color="black", fontcolor="black", label=<{SupersetTestCase|default_schema_backend_map : dict<br ALIGN="LEFT"/>maxDiff : int<br ALIGN="LEFT"/>|create_app()<br ALIGN="LEFT"/>create_fake_db()<br ALIGN="LEFT"/>create_fake_db_for_macros()<br ALIGN="LEFT"/>create_user(username: str, password: str, role_name: str, first_name: str, last_name: str, email: str): Union[ab_models.User, bool]<br ALIGN="LEFT"/>create_user_with_roles(username: str, roles: list[str], should_create_roles: bool)<br ALIGN="LEFT"/>delete_assert_metric(uri: str, func_name: str): Response<br ALIGN="LEFT"/>delete_fake_db()<br ALIGN="LEFT"/>delete_fake_db_for_macros()<br ALIGN="LEFT"/>get_assert_metric(uri: str, func_name: str): Response<br ALIGN="LEFT"/>get_birth_names_dataset(): SqlaTable<br ALIGN="LEFT"/>get_dash_by_slug(dash_slug)<br ALIGN="LEFT"/>get_database_by_id(db_id: int): Database<br ALIGN="LEFT"/>get_database_by_name(database_name: str): Database<br ALIGN="LEFT"/>get_datasource_mock(): BaseDatasource<br ALIGN="LEFT"/>get_dttm()<br ALIGN="LEFT"/>get_json_resp(url, data, follow_redirects, raise_on_error, json_)<br ALIGN="LEFT"/>get_list(asset_type: str, filter: dict[str, Any], username: str): Response<br ALIGN="LEFT"/>get_nonexistent_numeric_id(model)<br ALIGN="LEFT"/>get_or_create(cls, criteria)<br ALIGN="LEFT"/>get_resp(url, data, follow_redirects, raise_on_error, json_)<br ALIGN="LEFT"/>get_role(name: str): Optional[ab_models.User]<br ALIGN="LEFT"/>get_slice(slice_name: str): Slice<br ALIGN="LEFT"/>get_table(name: str, database_id: Optional[int], schema: Optional[str]): SqlaTable<br ALIGN="LEFT"/>get_table_by_id(table_id: int): SqlaTable<br ALIGN="LEFT"/>get_user(username: str): ab_models.User<br ALIGN="LEFT"/>grant_public_access_to_table(table)<br ALIGN="LEFT"/>grant_role_access_to_table(table, role_name)<br ALIGN="LEFT"/>insert_dashboard(dashboard_title: str, slug: Optional[str], owners: list[int], roles: list[int], created_by, slices: Optional[list[Slice]], position_json: str, css: str, json_metadata: str, published: bool, certified_by: Optional[str], certification_details: Optional[str]): Dashboard<br ALIGN="LEFT"/>is_module_installed(module_name: str): bool<br ALIGN="LEFT"/>login(username, password)<br ALIGN="LEFT"/>logout()<br ALIGN="LEFT"/>post_assert_metric(uri: str, data: dict[str, Any], func_name: str): Response<br ALIGN="LEFT"/>put_assert_metric(uri: str, data: dict[str, Any], func_name: str): Response<br ALIGN="LEFT"/>revoke_public_access_to_table(table)<br ALIGN="LEFT"/>revoke_role_access_to_table(role_name, table)<br ALIGN="LEFT"/>run_sql(sql, client_id, username, raise_on_error, query_limit, database_name, sql_editor_id, select_as_cta, tmp_table_name, schema, ctas_method, template_params)<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>temporary_user(clone_user, username, extra_roles, extra_pvms, login)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.exceptions.SupersetTimeoutException" [color="black", fontcolor="red", label=<{SupersetTimeoutException|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.exceptions.SupersetVizException" [color="black", fontcolor="red", label=<{SupersetVizException|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sqllab.sql_json_executer.SynchronousSqlJsonExecutor" [color="black", fontcolor="black", label=<{SynchronousSqlJsonExecutor|<br ALIGN="LEFT"/>|execute(execution_context: SqlJsonExecutionContext, rendered_query: str, log_params: dict[str, Any] \| None): SqlJsonExecutionStatus<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.doris.TINYINT" [color="black", fontcolor="black", label=<{TINYINT|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.starrocks.TINYINT" [color="black", fontcolor="black", label=<{TINYINT|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.TabSchema" [color="black", fontcolor="black", label=<{TabSchema|children : List<br ALIGN="LEFT"/>parents : List<br ALIGN="LEFT"/>title : String<br ALIGN="LEFT"/>value : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.shared.catalogs.TabState" [color="black", fontcolor="black", label=<{TabState|catalog<br ALIGN="LEFT"/>database_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.sql_lab.TabState" [color="black", fontcolor="black", label=<{TabState|active<br ALIGN="LEFT"/>autorun<br ALIGN="LEFT"/>catalog<br ALIGN="LEFT"/>database<br ALIGN="LEFT"/>database_id<br ALIGN="LEFT"/>hide_left_bar<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>latest_query<br ALIGN="LEFT"/>latest_query_id<br ALIGN="LEFT"/>query_limit<br ALIGN="LEFT"/>saved_query<br ALIGN="LEFT"/>saved_query_id<br ALIGN="LEFT"/>schema<br ALIGN="LEFT"/>sql<br ALIGN="LEFT"/>table_schemas<br ALIGN="LEFT"/>template_params<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|to_dict(): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sqllab.schemas.TabStateSchema" [color="black", fontcolor="black", label=<{TabStateSchema|active : Boolean<br ALIGN="LEFT"/>autorun : Boolean<br ALIGN="LEFT"/>database_id : Integer<br ALIGN="LEFT"/>extra_json : Dict<br ALIGN="LEFT"/>hide_left_bar : Boolean<br ALIGN="LEFT"/>id : String<br ALIGN="LEFT"/>label : String<br ALIGN="LEFT"/>latest_query : Nested<br ALIGN="LEFT"/>query_limit : Integer<br ALIGN="LEFT"/>saved_query : Dict<br ALIGN="LEFT"/>schema : String<br ALIGN="LEFT"/>sql : String<br ALIGN="LEFT"/>table_schemas : List<br ALIGN="LEFT"/>user_id : Integer<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.sql_lab.views.TabStateView" [color="black", fontcolor="black", label=<{TabStateView|<br ALIGN="LEFT"/>|activate(tab_state_id: int): FlaskResponse<br ALIGN="LEFT"/>delete(tab_state_id: int): FlaskResponse<br ALIGN="LEFT"/>delete_query(tab_state_id: int, client_id: str): FlaskResponse<br ALIGN="LEFT"/>get(tab_state_id: int): FlaskResponse<br ALIGN="LEFT"/>migrate_query(tab_state_id: int): FlaskResponse<br ALIGN="LEFT"/>post(): FlaskResponse<br ALIGN="LEFT"/>put(tab_state_id: int): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-04-03_08-19_130915240929_is_sqllab_viz_flow.Table" [color="black", fontcolor="black", label=<{Table|id<br ALIGN="LEFT"/>is_sqllab_view<br ALIGN="LEFT"/>sql<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-06-13_10-20_4451805bbaa1_remove_double_percents.Table" [color="black", fontcolor="black", label=<{Table|database_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2020-04-29_09-24_620241d1153f_update_time_grain_sqla.Table" [color="black", fontcolor="black", label=<{Table|database_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.sql.parse.Table" [color="black", fontcolor="black", label=<{Table|catalog : str \| None<br ALIGN="LEFT"/>schema : str \| None<br ALIGN="LEFT"/>table : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.common.query_context_generator.Table" [color="black", fontcolor="black", label=<{Table|id : int<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.example_data.data_loading.data_definitions.types.Table" [color="black", fontcolor="black", label=<{Table|data : Iterable[dict[Any, Any]]<br ALIGN="LEFT"/>table_metadata<br ALIGN="LEFT"/>table_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.connectors.sqla.models.TableColumn" [color="black", fontcolor="black", label=<{TableColumn|advanced_data_type<br ALIGN="LEFT"/>column_name<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>database<br ALIGN="LEFT"/>datasource<br ALIGN="LEFT"/>db_engine_spec<br ALIGN="LEFT"/>db_extra<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>export_fields : list<br ALIGN="LEFT"/>export_parent : str<br ALIGN="LEFT"/>expression<br ALIGN="LEFT"/>extra<br ALIGN="LEFT"/>filterable<br ALIGN="LEFT"/>groupby<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>is_active<br ALIGN="LEFT"/>is_boolean<br ALIGN="LEFT"/>is_dttm<br ALIGN="LEFT"/>is_numeric<br ALIGN="LEFT"/>is_string<br ALIGN="LEFT"/>is_temporal<br ALIGN="LEFT"/>python_date_format<br ALIGN="LEFT"/>table : Mapped[SqlaTable]<br ALIGN="LEFT"/>table_id<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>type_generic<br ALIGN="LEFT"/>update_from_object_fields<br ALIGN="LEFT"/>verbose_name<br ALIGN="LEFT"/>|get_sqla_col(label: str \| None, template_processor: BaseTemplateProcessor \| None): Column<br ALIGN="LEFT"/>get_timestamp_expression(time_grain: str \| None, label: str \| None, template_processor: BaseTemplateProcessor \| None): TimestampExpression \| Label<br ALIGN="LEFT"/>init_on_load(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.TableColumn" [color="black", fontcolor="black", label=<{TableColumn|database_expression<br ALIGN="LEFT"/>expression<br ALIGN="LEFT"/>python_date_format<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-20_15-31_7f2635b51f5d_update_base_columns.TableColumn" [color="black", fontcolor="black", label=<{TableColumn|table_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.TableColumn" [color="black", fontcolor="black", label=<{TableColumn|database_expression<br ALIGN="LEFT"/>expression<br ALIGN="LEFT"/>python_date_format<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.TableColumn" [color="black", fontcolor="black", label=<{TableColumn|expression<br ALIGN="LEFT"/>python_date_format<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2021-02-04_09-34_070c043f2fdb_add_granularity_to_charts_where_missing.TableColumn" [color="black", fontcolor="black", label=<{TableColumn|column_name<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>is_dttm<br ALIGN="LEFT"/>table_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.TableColumn" [color="black", fontcolor="black", label=<{TableColumn|column_name<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>expression<br ALIGN="LEFT"/>extra<br ALIGN="LEFT"/>filterable<br ALIGN="LEFT"/>groupby<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>is_active<br ALIGN="LEFT"/>is_dttm<br ALIGN="LEFT"/>python_date_format<br ALIGN="LEFT"/>table_id<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>verbose_name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.TableExtraMetadataResponseSchema" [color="black", fontcolor="black", label=<{TableExtraMetadataResponseSchema|clustering : Dict<br ALIGN="LEFT"/>metadata : Dict<br ALIGN="LEFT"/>partitions : Dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.example_data.data_loading.data_definitions.types.TableMetaData" [color="black", fontcolor="black", label=<{TableMetaData|table_name : str<br ALIGN="LEFT"/>types : Optional[dict[str, TypeEngine]]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.example_data.data_loading.data_definitions.types.TableMetaDataFactory" [color="black", fontcolor="black", label=<{TableMetaDataFactory|<br ALIGN="LEFT"/>|<I>make</I>(): TableMetaData<br ALIGN="LEFT"/>make_table(data: Iterable[dict[Any, Any]]): Table<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.databases.schemas.TableMetadataColumnsResponse" [color="black", fontcolor="black", label=<{TableMetadataColumnsResponse|comment : str \| None<br ALIGN="LEFT"/>duplicates_constraint : str \| None<br ALIGN="LEFT"/>keys : list[str]<br ALIGN="LEFT"/>longType : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.TableMetadataColumnsResponseSchema" [color="black", fontcolor="black", label=<{TableMetadataColumnsResponseSchema|duplicates_constraint : String<br ALIGN="LEFT"/>keys : List<br ALIGN="LEFT"/>longType : String<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>type : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.TableMetadataForeignKeysIndexesResponse" [color="black", fontcolor="black", label=<{TableMetadataForeignKeysIndexesResponse|column_names : list[str]<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>options<br ALIGN="LEFT"/>referred_columns : list[str]<br ALIGN="LEFT"/>referred_schema : str<br ALIGN="LEFT"/>referred_table : str<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.TableMetadataForeignKeysIndexesResponseSchema" [color="black", fontcolor="black", label=<{TableMetadataForeignKeysIndexesResponseSchema|column_names : List<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>options : Nested<br ALIGN="LEFT"/>referred_columns : List<br ALIGN="LEFT"/>referred_schema : String<br ALIGN="LEFT"/>referred_table : String<br ALIGN="LEFT"/>type : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.TableMetadataOptionsResponse" [color="black", fontcolor="black", label=<{TableMetadataOptionsResponse|deferrable : bool<br ALIGN="LEFT"/>initially : bool<br ALIGN="LEFT"/>match : bool<br ALIGN="LEFT"/>ondelete : bool<br ALIGN="LEFT"/>onupdate : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.TableMetadataOptionsResponseSchema" [color="black", fontcolor="black", label=<{TableMetadataOptionsResponseSchema|deferrable : Boolean<br ALIGN="LEFT"/>initially : Boolean<br ALIGN="LEFT"/>match : Boolean<br ALIGN="LEFT"/>ondelete : Boolean<br ALIGN="LEFT"/>onupdate : Boolean<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.TableMetadataPrimaryKeyResponse" [color="black", fontcolor="black", label=<{TableMetadataPrimaryKeyResponse|column_names : list[str]<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.TableMetadataPrimaryKeyResponseSchema" [color="black", fontcolor="black", label=<{TableMetadataPrimaryKeyResponseSchema|column_names : List<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>type : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.TableMetadataResponse" [color="black", fontcolor="black", label=<{TableMetadataResponse|columns : list[TableMetadataColumnsResponse]<br ALIGN="LEFT"/>comment : str \| None<br ALIGN="LEFT"/>foreignKeys : list[TableMetadataForeignKeysIndexesResponse]<br ALIGN="LEFT"/>indexes : list[TableMetadataForeignKeysIndexesResponse]<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>primaryKey<br ALIGN="LEFT"/>selectStar : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.TableMetadataResponseSchema" [color="black", fontcolor="black", label=<{TableMetadataResponseSchema|columns : List<br ALIGN="LEFT"/>foreignKeys : List<br ALIGN="LEFT"/>indexes : List<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>primaryKey : Nested<br ALIGN="LEFT"/>selectStar : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.connectors.sqla.views.TableModelView" [color="black", fontcolor="black", label=<{TableModelView|class_permission_name : str<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>|list(): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.exceptions.TableNotFoundException" [color="black", fontcolor="red", label=<{TableNotFoundException|status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.TableNotFoundValidationError" [color="black", fontcolor="red", label=<{TableNotFoundValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.shared.catalogs.TableSchema" [color="black", fontcolor="black", label=<{TableSchema|catalog<br ALIGN="LEFT"/>database_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.sql_lab.TableSchema" [color="black", fontcolor="black", label=<{TableSchema|catalog<br ALIGN="LEFT"/>database<br ALIGN="LEFT"/>database_id<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>expanded<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>schema<br ALIGN="LEFT"/>tab_state_id<br ALIGN="LEFT"/>table<br ALIGN="LEFT"/>|to_dict(): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.sqllab.schemas.TableSchema" [color="black", fontcolor="black", label=<{TableSchema|database_id : Integer<br ALIGN="LEFT"/>description : String<br ALIGN="LEFT"/>expanded : Boolean<br ALIGN="LEFT"/>id : Integer<br ALIGN="LEFT"/>schema : String<br ALIGN="LEFT"/>tab_state_id : Integer<br ALIGN="LEFT"/>table : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.sql_lab.views.TableSchemaView" [color="black", fontcolor="black", label=<{TableSchemaView|<br ALIGN="LEFT"/>|delete(table_schema_id: int): FlaskResponse<br ALIGN="LEFT"/>expanded(table_schema_id: int): FlaskResponse<br ALIGN="LEFT"/>post(): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.example_data.data_loading.pandas.pandas_data_loader.TableToDfConvertor" [color="black", fontcolor="black", label=<{TableToDfConvertor|<br ALIGN="LEFT"/>|<I>convert</I>(table: Table): DataFrame<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.example_data.data_loading.pandas.table_df_convertor.TableToDfConvertorImpl" [color="black", fontcolor="black", label=<{TableToDfConvertorImpl|convert_datetime_to_str : bool<br ALIGN="LEFT"/>|convert(table: Table): DataFrame<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.database.tables.TablesDatabaseCommand" [color="black", fontcolor="black", label=<{TablesDatabaseCommand|<br ALIGN="LEFT"/>|run(): dict[str, Any]<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.row_level_security.schemas.TablesSchema" [color="black", fontcolor="black", label=<{TablesSchema|id : Integer<br ALIGN="LEFT"/>schema : String<br ALIGN="LEFT"/>table_name : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.TabsPayloadSchema" [color="black", fontcolor="black", label=<{TabsPayloadSchema|all_tabs : Dict<br ALIGN="LEFT"/>tab_tree : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-26_11-10_c82ee8a39623_add_implicit_tags.Tag" [color="black", fontcolor="black", label=<{Tag|id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tags.models.Tag" [color="black", fontcolor="black", label=<{Tag|description<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>users_favorited<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.tag.exceptions.TagCreateFailedError" [color="black", fontcolor="black", label=<{TagCreateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.daos.tag.TagDAO" [color="black", fontcolor="black", label=<{TagDAO|<br ALIGN="LEFT"/>|create_custom_tagged_objects(object_type: ObjectType, object_id: int, tag_names: list[str]): None<br ALIGN="LEFT"/>create_tag_relationship(objects_to_tag: list[tuple[ObjectType, int]], tag: Tag, bulk_create: bool): None<br ALIGN="LEFT"/>delete_tagged_object(object_type: ObjectType, object_id: int, tag_name: str): None<br ALIGN="LEFT"/>delete_tags(tag_names: list[str]): None<br ALIGN="LEFT"/>favorite_tag_by_id_for_current_user(tag_id: int): None<br ALIGN="LEFT"/>favorited_ids(tags: list[Tag]): list[int]<br ALIGN="LEFT"/>find_by_name(name: str): Tag<br ALIGN="LEFT"/>find_tagged_object(object_type: ObjectType, object_id: int, tag_id: int): TaggedObject<br ALIGN="LEFT"/>get_by_name(name: str, type_: TagType): Tag<br ALIGN="LEFT"/>get_tagged_objects_by_tag_id(tag_ids: Optional[list[int]], obj_types: Optional[list[str]]): list[dict[str, Any]]<br ALIGN="LEFT"/>get_tagged_objects_for_tags(tags: Optional[list[str]], obj_types: Optional[list[str]]): list[dict[str, Any]]<br ALIGN="LEFT"/>remove_user_favorite_tag(tag_id: int): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.tag.exceptions.TagDeleteFailedError" [color="black", fontcolor="black", label=<{TagDeleteFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.exceptions.TagForbiddenError" [color="black", fontcolor="red", label=<{TagForbiddenError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tags.schemas.TagGetResponseSchema" [color="black", fontcolor="black", label=<{TagGetResponseSchema|id : Integer<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>type : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.tag.exceptions.TagInvalidError" [color="black", fontcolor="black", label=<{TagInvalidError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.tags.TagModelView" [color="black", fontcolor="black", label=<{TagModelView|class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>include_route_methods : set<br ALIGN="LEFT"/>route_base : str<br ALIGN="LEFT"/>|list(): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.tag.exceptions.TagNotFoundError" [color="black", fontcolor="black", label=<{TagNotFoundError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tags.exceptions.TagNotFoundError" [color="black", fontcolor="black", label=<{TagNotFoundError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.exceptions.TagNotFoundValidationError" [color="black", fontcolor="red", label=<{TagNotFoundValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tags.schemas.TagObjectSchema" [color="black", fontcolor="black", label=<{TagObjectSchema|description : String<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>objects_to_tag : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tags.schemas.TagPostBulkResponseObjectSchema" [color="black", fontcolor="black", label=<{TagPostBulkResponseObjectSchema|objects_skipped : List<br ALIGN="LEFT"/>objects_tagged : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tags.schemas.TagPostBulkResponseSchema" [color="black", fontcolor="black", label=<{TagPostBulkResponseSchema|result : Nested<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tags.schemas.TagPostBulkSchema" [color="black", fontcolor="black", label=<{TagPostBulkSchema|tags : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tags.schemas.TagPostSchema" [color="black", fontcolor="black", label=<{TagPostSchema|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tags.schemas.TagPutSchema" [color="black", fontcolor="black", label=<{TagPutSchema|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tags.api.TagRestApi" [color="black", fontcolor="black", label=<{TagRestApi|add_model_schema<br ALIGN="LEFT"/>allow_browser_login : bool<br ALIGN="LEFT"/>allowed_rel_fields : set<br ALIGN="LEFT"/>apispec_parameter_schemas : dict<br ALIGN="LEFT"/>base_related_field_filters : dict<br ALIGN="LEFT"/>class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>edit_model_schema<br ALIGN="LEFT"/>include_route_methods<br ALIGN="LEFT"/>list_columns : list<br ALIGN="LEFT"/>list_select_columns : list<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>object_entity_response_schema<br ALIGN="LEFT"/>openapi_spec_component_schemas : tuple<br ALIGN="LEFT"/>openapi_spec_methods<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>related_field_filters : dict<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>search_filters : dict<br ALIGN="LEFT"/>show_columns : list<br ALIGN="LEFT"/>tag_get_response_schema<br ALIGN="LEFT"/>|add_favorite(pk: int): Response<br ALIGN="LEFT"/>add_objects(object_type: ObjectType, object_id: int): Response<br ALIGN="LEFT"/>bulk_create(): Response<br ALIGN="LEFT"/>bulk_delete(): Response<br ALIGN="LEFT"/>delete_object(object_type: ObjectType, object_id: int, tag: str): Response<br ALIGN="LEFT"/>favorite_status(): Response<br ALIGN="LEFT"/>get_objects(): Response<br ALIGN="LEFT"/>post(): Response<br ALIGN="LEFT"/>put(pk: int): Response<br ALIGN="LEFT"/>remove_favorite(pk: int): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.TagSchema" [color="black", fontcolor="black", label=<{TagSchema|id : Integer<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>type : Enum<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tags.models.TagType" [color="black", fontcolor="black", label=<{TagType|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.tag.exceptions.TagUpdateFailedError" [color="black", fontcolor="black", label=<{TagUpdateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tags.exceptions.TagUpdateFailedError" [color="black", fontcolor="black", label=<{TagUpdateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.tags.TagView" [color="black", fontcolor="black", label=<{TagView|<br ALIGN="LEFT"/>|ensure_enabled(): None<br ALIGN="LEFT"/>is_enabled(): bool<br ALIGN="LEFT"/>tags(): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-26_11-10_c82ee8a39623_add_implicit_tags.TaggedObject" [color="black", fontcolor="black", label=<{TaggedObject|id<br ALIGN="LEFT"/>object_id<br ALIGN="LEFT"/>object_type<br ALIGN="LEFT"/>tag_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tags.models.TaggedObject" [color="black", fontcolor="black", label=<{TaggedObject|id<br ALIGN="LEFT"/>object_id<br ALIGN="LEFT"/>object_type<br ALIGN="LEFT"/>tag<br ALIGN="LEFT"/>tag_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.tag.exceptions.TaggedObjectDeleteFailedError" [color="black", fontcolor="black", label=<{TaggedObjectDeleteFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tags.schemas.TaggedObjectEntityResponseSchema" [color="black", fontcolor="black", label=<{TaggedObjectEntityResponseSchema|changed_on : DateTime<br ALIGN="LEFT"/>created_by : Nested<br ALIGN="LEFT"/>creator : String<br ALIGN="LEFT"/>id : Integer<br ALIGN="LEFT"/>name : String<br ALIGN="LEFT"/>owners : List<br ALIGN="LEFT"/>tags : List<br ALIGN="LEFT"/>type : String<br ALIGN="LEFT"/>url : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.tag.exceptions.TaggedObjectNotFoundError" [color="black", fontcolor="black", label=<{TaggedObjectNotFoundError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.all_entities.TaggedObjectsModelView" [color="black", fontcolor="black", label=<{TaggedObjectsModelView|class_permission_name : str<br ALIGN="LEFT"/>datamodel : SQLAInterface<br ALIGN="LEFT"/>include_route_methods : set<br ALIGN="LEFT"/>route_base : str<br ALIGN="LEFT"/>|list(): FlaskResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.temporary_cache.exceptions.TemporaryCacheAccessDeniedError" [color="black", fontcolor="black", label=<{TemporaryCacheAccessDeniedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.temporary_cache.exceptions.TemporaryCacheCreateFailedError" [color="black", fontcolor="black", label=<{TemporaryCacheCreateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.temporary_cache.exceptions.TemporaryCacheDeleteFailedError" [color="black", fontcolor="black", label=<{TemporaryCacheDeleteFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.temporary_cache.exceptions.TemporaryCacheGetFailedError" [color="black", fontcolor="black", label=<{TemporaryCacheGetFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.temporary_cache.schemas.TemporaryCachePostSchema" [color="black", fontcolor="black", label=<{TemporaryCachePostSchema|value : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.temporary_cache.schemas.TemporaryCachePutSchema" [color="black", fontcolor="black", label=<{TemporaryCachePutSchema|value : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.temporary_cache.exceptions.TemporaryCacheResourceNotFoundError" [color="black", fontcolor="black", label=<{TemporaryCacheResourceNotFoundError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.temporary_cache.api.TemporaryCacheRestApi" [color="black", fontcolor="black", label=<{TemporaryCacheRestApi|add_model_schema<br ALIGN="LEFT"/>allow_browser_login : bool<br ALIGN="LEFT"/>edit_model_schema<br ALIGN="LEFT"/>include_route_methods : set<br ALIGN="LEFT"/>method_permission_name<br ALIGN="LEFT"/>|add_apispec_components(api_spec: APISpec): None<br ALIGN="LEFT"/>delete(pk: int, key: str): Response<br ALIGN="LEFT"/>get(pk: int, key: str): Response<br ALIGN="LEFT"/><I>get_create_command</I>(): Any<br ALIGN="LEFT"/><I>get_delete_command</I>(): Any<br ALIGN="LEFT"/><I>get_get_command</I>(): Any<br ALIGN="LEFT"/><I>get_update_command</I>(): Any<br ALIGN="LEFT"/>post(pk: int): Response<br ALIGN="LEFT"/>put(pk: int, key: str): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.temporary_cache.exceptions.TemporaryCacheUpdateFailedError" [color="black", fontcolor="black", label=<{TemporaryCacheUpdateFailedError|message : LazyString<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.explore.form_data.state.TemporaryExploreState" [color="black", fontcolor="black", label=<{TemporaryExploreState|chart_id : Optional[int]<br ALIGN="LEFT"/>datasource_id : int<br ALIGN="LEFT"/>datasource_type<br ALIGN="LEFT"/>form_data : str<br ALIGN="LEFT"/>owner : Optional[int]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.teradata.TeradataEngineSpec" [color="black", fontcolor="black", label=<{TeradataEngineSpec|allow_limit_clause : bool<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>limit_method<br ALIGN="LEFT"/>max_column_name_length : int<br ALIGN="LEFT"/>select_keywords : set<br ALIGN="LEFT"/>top_keywords : set<br ALIGN="LEFT"/>|epoch_to_dttm(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.annotation_layers.api_tests.TestAnnotationLayerApi" [color="black", fontcolor="black", label=<{TestAnnotationLayerApi|<br ALIGN="LEFT"/>|get_layer_with_annotation(): AnnotationLayer<br ALIGN="LEFT"/>test_bulk_delete_annotation()<br ALIGN="LEFT"/>test_bulk_delete_annotation_layer()<br ALIGN="LEFT"/>test_bulk_delete_annotation_layer_not_found()<br ALIGN="LEFT"/>test_bulk_delete_annotation_not_found()<br ALIGN="LEFT"/>test_create_annotation()<br ALIGN="LEFT"/>test_create_annotation_layer()<br ALIGN="LEFT"/>test_create_annotation_layer_uniqueness()<br ALIGN="LEFT"/>test_create_annotation_uniqueness()<br ALIGN="LEFT"/>test_create_incorrect_annotation()<br ALIGN="LEFT"/>test_create_incorrect_annotation_layer()<br ALIGN="LEFT"/>test_delete_annotation()<br ALIGN="LEFT"/>test_delete_annotation_layer()<br ALIGN="LEFT"/>test_delete_annotation_layer_integrity()<br ALIGN="LEFT"/>test_delete_annotation_layer_not_found()<br ALIGN="LEFT"/>test_delete_annotation_not_found()<br ALIGN="LEFT"/>test_get_annotation()<br ALIGN="LEFT"/>test_get_annotation_layer()<br ALIGN="LEFT"/>test_get_annotation_layer_not_found()<br ALIGN="LEFT"/>test_get_annotation_not_found()<br ALIGN="LEFT"/>test_get_list_annotation()<br ALIGN="LEFT"/>test_get_list_annotation_filter()<br ALIGN="LEFT"/>test_get_list_annotation_layer()<br ALIGN="LEFT"/>test_get_list_annotation_layer_filter()<br ALIGN="LEFT"/>test_get_list_annotation_layer_sorting()<br ALIGN="LEFT"/>test_get_list_annotation_sorting()<br ALIGN="LEFT"/>test_info_annotation()<br ALIGN="LEFT"/>test_info_security_query()<br ALIGN="LEFT"/>test_update_annotation()<br ALIGN="LEFT"/>test_update_annotation_layer()<br ALIGN="LEFT"/>test_update_annotation_layer_not_found()<br ALIGN="LEFT"/>test_update_annotation_layer_uniqueness()<br ALIGN="LEFT"/>test_update_annotation_not_found()<br ALIGN="LEFT"/>test_update_annotation_null_datetime()<br ALIGN="LEFT"/>test_update_annotation_uniqueness()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.db_engine_specs.ascend_tests.TestAscendDbEngineSpec" [color="black", fontcolor="black", label=<{TestAscendDbEngineSpec|<br ALIGN="LEFT"/>|test_convert_dttm()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.async_events.api_tests.TestAsyncEventApi" [color="black", fontcolor="black", label=<{TestAsyncEventApi|UUID : str<br ALIGN="LEFT"/>|fetch_events(last_id: Optional[str])<br ALIGN="LEFT"/>run_test_with_cache_backend(cache_backend_cls: Type[Any], test_func)<br ALIGN="LEFT"/>test_events_no_login()<br ALIGN="LEFT"/>test_events_no_token()<br ALIGN="LEFT"/>test_events_redis_cache_backend(mock_uuid4)<br ALIGN="LEFT"/>test_events_redis_sentinel_cache_backend(mock_uuid4)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.tasks.async_queries_tests.TestAsyncQueries" [color="black", fontcolor="black", label=<{TestAsyncQueries|<br ALIGN="LEFT"/>|test_load_chart_data_into_cache(cache_type, cache_backend, mock_update_job, mock_set_form_data)<br ALIGN="LEFT"/>test_load_chart_data_into_cache_error(cache_type, cache_backend, mock_update_job, mock_run_command)<br ALIGN="LEFT"/>test_load_explore_json_into_cache(cache_type, cache_backend, mock_update_job)<br ALIGN="LEFT"/>test_load_explore_json_into_cache_error(cache_type, cache_backend, mock_set_form_data, mock_update_job)<br ALIGN="LEFT"/>test_soft_timeout_load_chart_data_into_cache(cache_type, cache_backend, mock_update_job, mock_run_command)<br ALIGN="LEFT"/>test_soft_timeout_load_explore_json_into_cache(cache_type, cache_backend, mock_update_job, mock_run_command)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.viz_tests.TestBaseDeckGLViz" [color="black", fontcolor="black", label=<{TestBaseDeckGLViz|<br ALIGN="LEFT"/>|test_filter_nulls()<br ALIGN="LEFT"/>test_geojson_query_obj()<br ALIGN="LEFT"/>test_get_js_columns()<br ALIGN="LEFT"/>test_get_metrics()<br ALIGN="LEFT"/>test_get_properties()<br ALIGN="LEFT"/>test_parse_coordinates()<br ALIGN="LEFT"/>test_parse_coordinates_raises()<br ALIGN="LEFT"/>test_process_spatial_query_obj()<br ALIGN="LEFT"/>test_scatterviz_get_metrics()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.base_api_tests.TestBaseModelRestApi" [color="black", fontcolor="black", label=<{TestBaseModelRestApi|<br ALIGN="LEFT"/>|test_default_missing_declaration_get()<br ALIGN="LEFT"/>test_default_missing_declaration_post()<br ALIGN="LEFT"/>test_default_missing_declaration_put()<br ALIGN="LEFT"/>test_default_missing_declaration_put_spec()<br ALIGN="LEFT"/>test_refuse_invalid_format_request()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.viz_tests.TestBaseViz" [color="black", fontcolor="black", label=<{TestBaseViz|<br ALIGN="LEFT"/>|test_cache_timeout()<br ALIGN="LEFT"/>test_constructor_exception_no_datasource()<br ALIGN="LEFT"/>test_get_df_handles_dttm_col()<br ALIGN="LEFT"/>test_get_df_returns_empty_df()<br ALIGN="LEFT"/>test_process_metrics()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.db_engine_specs.bigquery_tests.TestBigQueryDbEngineSpec" [color="black", fontcolor="black", label=<{TestBigQueryDbEngineSpec|<br ALIGN="LEFT"/>|test_bigquery_sqla_column_label()<br ALIGN="LEFT"/>test_calculated_column_in_order_by()<br ALIGN="LEFT"/>test_custom_minute_timegrain_expressions()<br ALIGN="LEFT"/>test_df_to_sql(mock_service_account, mock_pandas_gbq, mock_get_engine)<br ALIGN="LEFT"/>test_extract_errors()<br ALIGN="LEFT"/>test_fetch_data()<br ALIGN="LEFT"/>test_get_extra_table_metadata()<br ALIGN="LEFT"/>test_get_indexes()<br ALIGN="LEFT"/>test_timegrain_expressions()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.cache_tests.TestCache" [color="black", fontcolor="black", label=<{TestCache|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_no_data_cache()<br ALIGN="LEFT"/>test_slice_data_cache()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.strategy_tests.TestCacheWarmUp" [color="black", fontcolor="black", label=<{TestCacheWarmUp|<br ALIGN="LEFT"/>|reset_tag(tag)<br ALIGN="LEFT"/>test_dashboard_tags_strategy()<br ALIGN="LEFT"/>test_top_n_dashboards_strategy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.charts.api_tests.TestChartApi" [color="black", fontcolor="black", label=<{TestChartApi|chart<br ALIGN="LEFT"/>new_dashboard<br ALIGN="LEFT"/>original_dashboard<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>|add_dashboard_to_chart()<br ALIGN="LEFT"/>clear_data_cache()<br ALIGN="LEFT"/>create_certified_charts()<br ALIGN="LEFT"/>create_chart_import()<br ALIGN="LEFT"/>create_chart_with_report()<br ALIGN="LEFT"/>create_chart_with_tag(create_custom_tags)<br ALIGN="LEFT"/>create_charts()<br ALIGN="LEFT"/>create_charts_created_by_gamma()<br ALIGN="LEFT"/>create_charts_some_with_tags(create_custom_tags)<br ALIGN="LEFT"/>load_energy_charts()<br ALIGN="LEFT"/>test_add_favorite()<br ALIGN="LEFT"/>test_admin_gets_filtered_energy_slices()<br ALIGN="LEFT"/>test_bulk_delete_chart_with_report()<br ALIGN="LEFT"/>test_chart_get_list_no_username()<br ALIGN="LEFT"/>test_chart_get_no_username()<br ALIGN="LEFT"/>test_create_chart()<br ALIGN="LEFT"/>test_create_chart_validate_datasource()<br ALIGN="LEFT"/>test_create_chart_validate_owners()<br ALIGN="LEFT"/>test_create_chart_validate_params()<br ALIGN="LEFT"/>test_create_chart_validate_user_is_dashboard_owner()<br ALIGN="LEFT"/>test_create_simple_chart()<br ALIGN="LEFT"/>test_delete_bulk_chart_admin_not_owned()<br ALIGN="LEFT"/>test_delete_bulk_chart_bad_request()<br ALIGN="LEFT"/>test_delete_bulk_chart_not_owned()<br ALIGN="LEFT"/>test_delete_bulk_charts()<br ALIGN="LEFT"/>test_delete_bulk_charts_not_found()<br ALIGN="LEFT"/>test_delete_chart()<br ALIGN="LEFT"/>test_delete_chart_admin_not_owned()<br ALIGN="LEFT"/>test_delete_chart_not_owned()<br ALIGN="LEFT"/>test_delete_chart_with_report()<br ALIGN="LEFT"/>test_delete_not_found_chart()<br ALIGN="LEFT"/>test_export_chart()<br ALIGN="LEFT"/>test_export_chart_gamma()<br ALIGN="LEFT"/>test_export_chart_not_found()<br ALIGN="LEFT"/>test_get_chart()<br ALIGN="LEFT"/>test_get_chart_data_as_guest_user(is_guest_user, has_guest_access)<br ALIGN="LEFT"/>test_get_chart_no_data_access()<br ALIGN="LEFT"/>test_get_chart_not_found()<br ALIGN="LEFT"/>test_get_charts()<br ALIGN="LEFT"/>test_get_charts_changed_on()<br ALIGN="LEFT"/>test_get_charts_created_by_me_filter()<br ALIGN="LEFT"/>test_get_charts_custom_filter()<br ALIGN="LEFT"/>test_get_charts_dashboard_filter()<br ALIGN="LEFT"/>test_get_charts_dashboards()<br ALIGN="LEFT"/>test_get_charts_favorite_filter()<br ALIGN="LEFT"/>test_get_charts_filter()<br ALIGN="LEFT"/>test_get_charts_no_data_access()<br ALIGN="LEFT"/>test_get_charts_page()<br ALIGN="LEFT"/>test_get_charts_tag_filters()<br ALIGN="LEFT"/>test_get_current_user_favorite_status()<br ALIGN="LEFT"/>test_get_time_range()<br ALIGN="LEFT"/>test_gets_certified_charts_filter()<br ALIGN="LEFT"/>test_gets_created_by_user_charts_filter()<br ALIGN="LEFT"/>test_gets_not_certified_charts_filter()<br ALIGN="LEFT"/>test_gets_not_created_by_user_charts_filter()<br ALIGN="LEFT"/>test_gets_owned_created_favorited_by_me_filter()<br ALIGN="LEFT"/>test_import_chart(mock_add_permissions)<br ALIGN="LEFT"/>test_import_chart_invalid(mock_add_permissions)<br ALIGN="LEFT"/>test_import_chart_overwrite(mock_add_permissions)<br ALIGN="LEFT"/>test_info_security_chart()<br ALIGN="LEFT"/>test_not_update_chart_none_dashboards()<br ALIGN="LEFT"/>test_query_form_data()<br ALIGN="LEFT"/>test_remove_favorite()<br ALIGN="LEFT"/>test_update_chart()<br ALIGN="LEFT"/>test_update_chart_add_tags_can_tag_on_chart()<br ALIGN="LEFT"/>test_update_chart_add_tags_can_write_on_tag()<br ALIGN="LEFT"/>test_update_chart_add_tags_missing_permission()<br ALIGN="LEFT"/>test_update_chart_clear_owner_list()<br ALIGN="LEFT"/>test_update_chart_linked_with_not_owned_dashboard()<br ALIGN="LEFT"/>test_update_chart_new_dashboards()<br ALIGN="LEFT"/>test_update_chart_new_owner_admin()<br ALIGN="LEFT"/>test_update_chart_new_owner_not_admin()<br ALIGN="LEFT"/>test_update_chart_no_tag_changes()<br ALIGN="LEFT"/>test_update_chart_not_owned()<br ALIGN="LEFT"/>test_update_chart_populate_owner()<br ALIGN="LEFT"/>test_update_chart_preserve_ownership()<br ALIGN="LEFT"/>test_update_chart_remove_tags_can_tag_on_chart()<br ALIGN="LEFT"/>test_update_chart_remove_tags_can_write_on_tag()<br ALIGN="LEFT"/>test_update_chart_remove_tags_missing_permission()<br ALIGN="LEFT"/>test_update_chart_validate_datasource()<br ALIGN="LEFT"/>test_update_chart_validate_owners()<br ALIGN="LEFT"/>test_user_gets_all_charts()<br ALIGN="LEFT"/>test_user_gets_none_filtered_energy_slices()<br ALIGN="LEFT"/>test_warm_up_cache(slice_name)<br ALIGN="LEFT"/>test_warm_up_cache_chart_id_required()<br ALIGN="LEFT"/>test_warm_up_cache_chart_not_found()<br ALIGN="LEFT"/>test_warm_up_cache_error(): None<br ALIGN="LEFT"/>test_warm_up_cache_no_datasource(): None<br ALIGN="LEFT"/>test_warm_up_cache_no_query_context(): None<br ALIGN="LEFT"/>test_warm_up_cache_payload_validation()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.charts.commands_tests.TestChartWarmUpCacheCommand" [color="black", fontcolor="black", label=<{TestChartWarmUpCacheCommand|<br ALIGN="LEFT"/>|test_warm_up_cache()<br ALIGN="LEFT"/>test_warm_up_cache_command_chart_not_found()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.charts.commands_tests.TestChartsCreateCommand" [color="black", fontcolor="black", label=<{TestChartsCreateCommand|<br ALIGN="LEFT"/>|test_create_v1_response(mock_sm_g, mock_c_g, mock_u_g)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.charts.commands_tests.TestChartsUpdateCommand" [color="black", fontcolor="black", label=<{TestChartsUpdateCommand|<br ALIGN="LEFT"/>|test_query_context_update_command(mock_sm_g, mock_g)<br ALIGN="LEFT"/>test_update_v1_response(mock_sm_g, mock_c_g, mock_u_g)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.commands_test.TestCommandsExceptions" [color="black", fontcolor="black", label=<{TestCommandsExceptions|<br ALIGN="LEFT"/>|test_command_invalid_error()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.database.test_connection.TestConnectionDatabaseCommand" [color="black", fontcolor="black", label=<{TestConnectionDatabaseCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.dashboards.commands_tests.TestCopyDashboardCommand" [color="black", fontcolor="black", label=<{TestCopyDashboardCommand|<br ALIGN="LEFT"/>|test_copy_dashboard_command()<br ALIGN="LEFT"/>test_copy_dashboard_command_invalid_data()<br ALIGN="LEFT"/>test_copy_dashboard_command_no_access()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.core_tests.TestCore" [color="black", fontcolor="black", label=<{TestCore|original_unsafe_db_setting<br ALIGN="LEFT"/>table_ids<br ALIGN="LEFT"/>|create_sample_csvfile(filename: str, content: list[str]): None<br ALIGN="LEFT"/>create_sample_excelfile(filename: str, content: dict[str, str]): None<br ALIGN="LEFT"/>enable_csv_upload(database: models.Database): None<br ALIGN="LEFT"/>insert_dashboard_created_by(username: str): Dashboard<br ALIGN="LEFT"/>insert_dashboard_created_by_gamma()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_add_slice()<br ALIGN="LEFT"/>test_admin_only_menu_views()<br ALIGN="LEFT"/>test_comments_in_sqlatable_query()<br ALIGN="LEFT"/>test_custom_password_store()<br ALIGN="LEFT"/>test_dashboard_endpoint()<br ALIGN="LEFT"/>test_dashboard_injected_exceptions(mock_db_connection_mutator)<br ALIGN="LEFT"/>test_dashboard_permalink(get_dashboard_permalink_mock, request_mock)<br ALIGN="LEFT"/>test_data_preview_visibility()<br ALIGN="LEFT"/>test_dataframe_timezone()<br ALIGN="LEFT"/>test_disable_drill_to_detail()<br ALIGN="LEFT"/>test_doctests()<br ALIGN="LEFT"/>test_explore_database_id()<br ALIGN="LEFT"/>test_explore_injected_exceptions(mock_db_connection_mutator)<br ALIGN="LEFT"/>test_explore_json_data_invalid_cache_key()<br ALIGN="LEFT"/>test_explore_redirect(mock_command: mock.Mock)<br ALIGN="LEFT"/>test_feature_flag_serialization()<br ALIGN="LEFT"/>test_fetch_datasource_metadata()<br ALIGN="LEFT"/>test_gamma()<br ALIGN="LEFT"/>test_get_column_names_from_metric()<br ALIGN="LEFT"/>test_has_table()<br ALIGN="LEFT"/>test_login()<br ALIGN="LEFT"/>test_misc()<br ALIGN="LEFT"/>test_mssql_engine_spec_pymssql()<br ALIGN="LEFT"/>test_results_default_deserialization()<br ALIGN="LEFT"/>test_results_msgpack_deserialization()<br ALIGN="LEFT"/>test_save_slice()<br ALIGN="LEFT"/>test_slice_data()<br ALIGN="LEFT"/>test_slice_endpoint()<br ALIGN="LEFT"/>test_slice_id_is_always_logged_correctly_on_web_request()<br ALIGN="LEFT"/>test_slice_payload_no_datasource()<br ALIGN="LEFT"/>test_slices()<br ALIGN="LEFT"/>test_slices_V2()<br ALIGN="LEFT"/>test_tabstate_update()<br ALIGN="LEFT"/>test_tabstate_with_name()<br ALIGN="LEFT"/>test_templated_sql_json()<br ALIGN="LEFT"/>test_virtual_table_explore_visibility()<br ALIGN="LEFT"/>test_viz_cache_key()<br ALIGN="LEFT"/>test_warm_up_cache_error(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.tags.commands_tests.TestCreateCustomTagCommand" [color="black", fontcolor="black", label=<{TestCreateCustomTagCommand|<br ALIGN="LEFT"/>|test_create_custom_tag_command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.databases.commands_tests.TestCreateDatabaseCommand" [color="black", fontcolor="black", label=<{TestCreateDatabaseCommand|<br ALIGN="LEFT"/>|test_create_duplicate_error(mock_g, mock_logger)<br ALIGN="LEFT"/>test_multiple_error_logging(mock_g, mock_logger)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.datasets.commands_tests.TestCreateDatasetCommand" [color="black", fontcolor="black", label=<{TestCreateDatasetCommand|<br ALIGN="LEFT"/>|test_create_dataset_command()<br ALIGN="LEFT"/>test_create_dataset_command_not_allowed()<br ALIGN="LEFT"/>test_database_not_found(mock_g)<br ALIGN="LEFT"/>test_get_table_from_database_error(get_table_mock, mock_g)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.explore.form_data.commands_tests.TestCreateFormDataCommand" [color="black", fontcolor="black", label=<{TestCreateFormDataCommand|<br ALIGN="LEFT"/>|create_dataset()<br ALIGN="LEFT"/>create_query()<br ALIGN="LEFT"/>create_slice()<br ALIGN="LEFT"/>test_create_form_data_command(mock_g)<br ALIGN="LEFT"/>test_create_form_data_command_invalid_type(mock_g)<br ALIGN="LEFT"/>test_create_form_data_command_type_as_string(mock_g)<br ALIGN="LEFT"/>test_delete_form_data_command(mock_g)<br ALIGN="LEFT"/>test_delete_form_data_command_key_expired(mock_g)<br ALIGN="LEFT"/>test_get_form_data_command(mock_g)<br ALIGN="LEFT"/>test_update_form_data_command(mock_g)<br ALIGN="LEFT"/>test_update_form_data_command_same_form_data(mock_g)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.explore.permalink.commands_tests.TestCreatePermalinkDataCommand" [color="black", fontcolor="black", label=<{TestCreatePermalinkDataCommand|<br ALIGN="LEFT"/>|create_dataset()<br ALIGN="LEFT"/>create_query()<br ALIGN="LEFT"/>create_slice()<br ALIGN="LEFT"/>test_create_permalink_command(mock_g)<br ALIGN="LEFT"/>test_get_permalink_command(mock_g)<br ALIGN="LEFT"/>test_get_permalink_command_with_old_dataset_key(decode_id_mock, kv_get_value_mock, mock_g)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.css_templates.api_tests.TestCssTemplateApi" [color="black", fontcolor="black", label=<{TestCssTemplateApi|<br ALIGN="LEFT"/>|create_css_templates()<br ALIGN="LEFT"/>insert_css_template(template_name: str, css: str, created_by_username: str): CssTemplate<br ALIGN="LEFT"/>test_create_css_template()<br ALIGN="LEFT"/>test_delete_bulk_css_template_bad_request()<br ALIGN="LEFT"/>test_delete_bulk_css_template_not_found()<br ALIGN="LEFT"/>test_delete_bulk_css_templates()<br ALIGN="LEFT"/>test_delete_css_template()<br ALIGN="LEFT"/>test_delete_css_template_not_found()<br ALIGN="LEFT"/>test_delete_one_bulk_css_templates()<br ALIGN="LEFT"/>test_get_css_template()<br ALIGN="LEFT"/>test_get_css_template_not_found()<br ALIGN="LEFT"/>test_get_list_css_template()<br ALIGN="LEFT"/>test_get_list_custom_filter_css_template()<br ALIGN="LEFT"/>test_get_list_sort_css_template()<br ALIGN="LEFT"/>test_info_css_template()<br ALIGN="LEFT"/>test_info_security_css_template()<br ALIGN="LEFT"/>test_update_css_template()<br ALIGN="LEFT"/>test_update_css_template_not_found()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.users.api_tests.TestCurrentUserApi" [color="black", fontcolor="black", label=<{TestCurrentUserApi|<br ALIGN="LEFT"/>|test_get_me_anonymous(mock_g)<br ALIGN="LEFT"/>test_get_me_logged_in()<br ALIGN="LEFT"/>test_get_me_unauthorized()<br ALIGN="LEFT"/>test_get_me_with_roles()<br ALIGN="LEFT"/>test_get_my_roles_anonymous(mock_g)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.dashboard_tests.TestDashboard" [color="black", fontcolor="black", label=<{TestDashboard|<br ALIGN="LEFT"/>|get_mock_positions(dash)<br ALIGN="LEFT"/>load_dashboard()<br ALIGN="LEFT"/>test_dashboard_with_created_by_can_be_accessed_by_public_users()<br ALIGN="LEFT"/>test_get_dashboard()<br ALIGN="LEFT"/>test_new_dashboard()<br ALIGN="LEFT"/>test_public_user_dashboard_access()<br ALIGN="LEFT"/>test_superset_dashboard_url()<br ALIGN="LEFT"/>test_user_can_not_view_unpublished_dash()<br ALIGN="LEFT"/>test_users_can_list_published_dashboard()<br ALIGN="LEFT"/>test_users_can_view_own_dashboard()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.dashboards.api_tests.TestDashboardApi" [color="black", fontcolor="black", label=<{TestDashboardApi|dashboard_data : dict<br ALIGN="LEFT"/>dashboard_put_filters_data : dict<br ALIGN="LEFT"/>dashboards : list[Dashboard]<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>|create_created_by_gamma_dashboards()<br ALIGN="LEFT"/>create_dashboard_import()<br ALIGN="LEFT"/>create_dashboard_with_report()<br ALIGN="LEFT"/>create_dashboard_with_tag(create_custom_tags)<br ALIGN="LEFT"/>create_dashboards()<br ALIGN="LEFT"/>create_dashboards_some_with_tags(create_custom_tags)<br ALIGN="LEFT"/>create_invalid_dashboard_import()<br ALIGN="LEFT"/>get_dashboard_by_bad_slug()<br ALIGN="LEFT"/>get_dashboard_by_slug()<br ALIGN="LEFT"/>get_draft_dashboard_by_slug()<br ALIGN="LEFT"/>test_add_dashboard_filters()<br ALIGN="LEFT"/>test_add_favorite()<br ALIGN="LEFT"/>test_cache_dashboard_screenshot_dashboard_not_found()<br ALIGN="LEFT"/>test_cache_dashboard_screenshot_dashboard_validation()<br ALIGN="LEFT"/>test_cache_dashboard_screenshot_feature_both_ff_disabled()<br ALIGN="LEFT"/>test_cache_dashboard_screenshot_feature_screenshot_ff_disabled()<br ALIGN="LEFT"/>test_cache_dashboard_screenshot_feature_thumbnails_ff_disabled()<br ALIGN="LEFT"/>test_cache_dashboard_screenshot_success()<br ALIGN="LEFT"/>test_copy_dashboard()<br ALIGN="LEFT"/>test_copy_dashboard_duplicate_slices()<br ALIGN="LEFT"/>test_create_dashboard()<br ALIGN="LEFT"/>test_create_dashboard_empty()<br ALIGN="LEFT"/>test_create_dashboard_validate_json()<br ALIGN="LEFT"/>test_create_dashboard_validate_owners()<br ALIGN="LEFT"/>test_create_dashboard_validate_roles()<br ALIGN="LEFT"/>test_create_dashboard_validate_slug()<br ALIGN="LEFT"/>test_create_dashboard_validate_title()<br ALIGN="LEFT"/>test_create_simple_dashboard()<br ALIGN="LEFT"/>test_dashboard_filters_deleted()<br ALIGN="LEFT"/>test_dashboard_get_list_no_username()<br ALIGN="LEFT"/>test_dashboard_get_no_username()<br ALIGN="LEFT"/>test_delete_bulk_dashboard_admin_not_owned()<br ALIGN="LEFT"/>test_delete_bulk_dashboard_not_owned()<br ALIGN="LEFT"/>test_delete_bulk_dashboard_with_report()<br ALIGN="LEFT"/>test_delete_bulk_dashboards()<br ALIGN="LEFT"/>test_delete_bulk_dashboards_bad_request()<br ALIGN="LEFT"/>test_delete_bulk_dashboards_not_found()<br ALIGN="LEFT"/>test_delete_bulk_embedded_dashboards()<br ALIGN="LEFT"/>test_delete_dashboard()<br ALIGN="LEFT"/>test_delete_dashboard_admin_not_owned()<br ALIGN="LEFT"/>test_delete_dashboard_not_owned()<br ALIGN="LEFT"/>test_delete_dashboard_with_report()<br ALIGN="LEFT"/>test_delete_not_found_dashboard()<br ALIGN="LEFT"/>test_embedded_dashboards()<br ALIGN="LEFT"/>test_export()<br ALIGN="LEFT"/>test_export_bundle()<br ALIGN="LEFT"/>test_export_bundle_not_allowed()<br ALIGN="LEFT"/>test_export_bundle_not_found()<br ALIGN="LEFT"/>test_export_not_allowed()<br ALIGN="LEFT"/>test_export_not_found()<br ALIGN="LEFT"/>test_get_all_related_roles()<br ALIGN="LEFT"/>test_get_all_related_roles_with_with_extra_filters()<br ALIGN="LEFT"/>test_get_current_user_favorite_status()<br ALIGN="LEFT"/>test_get_dashboard()<br ALIGN="LEFT"/>test_get_dashboard_as_guest(is_guest_user, has_guest_access)<br ALIGN="LEFT"/>test_get_dashboard_charts()<br ALIGN="LEFT"/>test_get_dashboard_charts_by_slug()<br ALIGN="LEFT"/>test_get_dashboard_charts_empty()<br ALIGN="LEFT"/>test_get_dashboard_charts_not_found()<br ALIGN="LEFT"/>test_get_dashboard_datasets(logger_mock)<br ALIGN="LEFT"/>test_get_dashboard_datasets_as_guest(is_guest_user, has_guest_access)<br ALIGN="LEFT"/>test_get_dashboard_datasets_invalid_schema(dashboard_datasets_mock, logger_mock)<br ALIGN="LEFT"/>test_get_dashboard_datasets_not_allowed()<br ALIGN="LEFT"/>test_get_dashboard_datasets_not_found(logger_mock)<br ALIGN="LEFT"/>test_get_dashboard_no_data_access()<br ALIGN="LEFT"/>test_get_dashboard_not_found()<br ALIGN="LEFT"/>test_get_dashboard_tabs()<br ALIGN="LEFT"/>test_get_dashboard_tabs_not_found()<br ALIGN="LEFT"/>test_get_dashboards_changed_on()<br ALIGN="LEFT"/>test_get_dashboards_created_by_me()<br ALIGN="LEFT"/>test_get_dashboards_favorite_filter()<br ALIGN="LEFT"/>test_get_dashboards_filter()<br ALIGN="LEFT"/>test_get_dashboards_not_favorite_filter()<br ALIGN="LEFT"/>test_get_dashboards_tag_filters()<br ALIGN="LEFT"/>test_get_dashboards_title_or_slug_filter()<br ALIGN="LEFT"/>test_get_filter_related_roles()<br ALIGN="LEFT"/>test_get_gamma_dashboard_charts()<br ALIGN="LEFT"/>test_get_gamma_dashboard_datasets()<br ALIGN="LEFT"/>test_gets_certified_dashboards_filter()<br ALIGN="LEFT"/>test_gets_created_by_user_dashboards_filter()<br ALIGN="LEFT"/>test_gets_not_certified_dashboards_filter()<br ALIGN="LEFT"/>test_gets_not_created_by_user_dashboards_filter()<br ALIGN="LEFT"/>test_import_dashboard(mock_add_permissions)<br ALIGN="LEFT"/>test_import_dashboard_invalid()<br ALIGN="LEFT"/>test_import_dashboard_invalid_file()<br ALIGN="LEFT"/>test_import_dashboard_overwrite(mock_add_permissions)<br ALIGN="LEFT"/>test_import_dashboard_v0_export()<br ALIGN="LEFT"/>test_info_dashboard()<br ALIGN="LEFT"/>test_info_security_dashboard()<br ALIGN="LEFT"/>test_modfify_dashboard_filters_order()<br ALIGN="LEFT"/>test_modify_dashboard_filters_invalid_data()<br ALIGN="LEFT"/>test_modify_dashboard_filters_values()<br ALIGN="LEFT"/>test_put_dashboard_colors()<br ALIGN="LEFT"/>test_put_dashboard_colors_invalid()<br ALIGN="LEFT"/>test_put_dashboard_colors_no_mark_updated()<br ALIGN="LEFT"/>test_put_dashboard_colors_not_authorized()<br ALIGN="LEFT"/>test_put_dashboard_colors_not_found()<br ALIGN="LEFT"/>test_remove_favorite()<br ALIGN="LEFT"/>test_screenshot_dashboard_not_found()<br ALIGN="LEFT"/>test_screenshot_invalid_download_format(mock_get_cache, mock_cache_task)<br ALIGN="LEFT"/>test_screenshot_not_in_cache(mock_get_cache, mock_cache_task)<br ALIGN="LEFT"/>test_screenshot_success_pdf(mock_get_from_cache, mock_build_pdf, mock_cache_task)<br ALIGN="LEFT"/>test_screenshot_success_png(mock_get_cache, mock_cache_task)<br ALIGN="LEFT"/>test_update_dashboard()<br ALIGN="LEFT"/>test_update_dashboard_add_tags_can_tag_on_dashboard()<br ALIGN="LEFT"/>test_update_dashboard_add_tags_can_write_on_tag()<br ALIGN="LEFT"/>test_update_dashboard_add_tags_missing_permission()<br ALIGN="LEFT"/>test_update_dashboard_chart_owners_propagation()<br ALIGN="LEFT"/>test_update_dashboard_clear_owner_list()<br ALIGN="LEFT"/>test_update_dashboard_new_owner_admin()<br ALIGN="LEFT"/>test_update_dashboard_new_owner_not_admin()<br ALIGN="LEFT"/>test_update_dashboard_no_tag_changes()<br ALIGN="LEFT"/>test_update_dashboard_not_owned()<br ALIGN="LEFT"/>test_update_dashboard_populate_owner()<br ALIGN="LEFT"/>test_update_dashboard_remove_tags_can_tag_on_dashboard()<br ALIGN="LEFT"/>test_update_dashboard_remove_tags_can_write_on_tag()<br ALIGN="LEFT"/>test_update_dashboard_remove_tags_missing_permission()<br ALIGN="LEFT"/>test_update_dashboard_slug_formatting()<br ALIGN="LEFT"/>test_update_dashboard_validate_slug()<br ALIGN="LEFT"/>test_update_partial_dashboard()<br ALIGN="LEFT"/>test_update_published()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.dashboards.dao_tests.TestDashboardDAO" [color="black", fontcolor="black", label=<{TestDashboardDAO|<br ALIGN="LEFT"/>|test_copy_dashboard(mock_g)<br ALIGN="LEFT"/>test_copy_dashboard_copies_native_filters(mock_g)<br ALIGN="LEFT"/>test_copy_dashboard_duplicate_slices(mock_g)<br ALIGN="LEFT"/>test_get_dashboard_changed_on(mock_sm_g, mock_g)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.dashboards.security.security_dataset_tests.TestDashboardDatasetSecurity" [color="black", fontcolor="black", label=<{TestDashboardDatasetSecurity|<br ALIGN="LEFT"/>|load_dashboard()<br ALIGN="LEFT"/>test_dashboard_access__admin_can_access_all()<br ALIGN="LEFT"/>test_get_dashboards__owners_can_view_empty_dashboard()<br ALIGN="LEFT"/>test_get_dashboards__user_can_not_view_unpublished_dash()<br ALIGN="LEFT"/>test_get_dashboards__users_are_dashboards_owners()<br ALIGN="LEFT"/>test_get_dashboards__users_can_view_permitted_dashboard()<br ALIGN="LEFT"/>test_get_dashboards_api_no_data_access()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.dashboards.security.security_rbac_tests.TestDashboardRoleBasedSecurity" [color="black", fontcolor="black", label=<{TestDashboardRoleBasedSecurity|<br ALIGN="LEFT"/>|test_cannot_get_draft_dashboard_with_roles_by_uuid()<br ALIGN="LEFT"/>test_cannot_get_draft_dashboard_without_roles_by_uuid()<br ALIGN="LEFT"/>test_copy_dashboard_via_api()<br ALIGN="LEFT"/>test_copy_dashboard_via_dao()<br ALIGN="LEFT"/>test_get_dashboard_view__admin_can_access()<br ALIGN="LEFT"/>test_get_dashboard_view__owner_can_access()<br ALIGN="LEFT"/>test_get_dashboard_view__public_user_access_with_dashboard_permission()<br ALIGN="LEFT"/>test_get_dashboard_view__public_user_can_not_access_without_permission()<br ALIGN="LEFT"/>test_get_dashboard_view__public_user_with_dashboard_permission_can_not_access_draft()<br ALIGN="LEFT"/>test_get_dashboard_view__user_access_regular_rbac()<br ALIGN="LEFT"/>test_get_dashboard_view__user_access_with_dashboard_permission()<br ALIGN="LEFT"/>test_get_dashboard_view__user_can_not_access_without_permission()<br ALIGN="LEFT"/>test_get_dashboard_view__user_no_access_regular_rbac()<br ALIGN="LEFT"/>test_get_dashboard_view__user_with_dashboard_permission_can_not_access_draft()<br ALIGN="LEFT"/>test_get_dashboards_api__admin_get_all_dashboards()<br ALIGN="LEFT"/>test_get_dashboards_api__owner_get_all_owned_dashboards()<br ALIGN="LEFT"/>test_get_dashboards_api__public_user_get_only_published_permitted_dashboards()<br ALIGN="LEFT"/>test_get_dashboards_api__public_user_without_any_permissions_get_empty_list()<br ALIGN="LEFT"/>test_get_dashboards_api__user_get_only_published_permitted_dashboards()<br ALIGN="LEFT"/>test_get_dashboards_api__user_without_any_permissions_get_empty_list()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.databases.api_tests.TestDatabaseApi" [color="black", fontcolor="black", label=<{TestDatabaseApi|<br ALIGN="LEFT"/>|create_database_import()<br ALIGN="LEFT"/>create_database_with_dataset()<br ALIGN="LEFT"/>create_database_with_report()<br ALIGN="LEFT"/>insert_database(database_name: str, sqlalchemy_uri: str, extra: str, encrypted_extra: str, server_cert: str, expose_in_sqllab: bool, allow_file_upload: bool): Database<br ALIGN="LEFT"/>mock_csv_function(user)<br ALIGN="LEFT"/>test_available(app, get_available_engine_specs)<br ALIGN="LEFT"/>test_available_no_default(app, get_available_engine_specs)<br ALIGN="LEFT"/>test_cascade_delete_ssh_tunnel(mock_create_is_feature_enabled, mock_get_all_schema_names, mock_get_all_catalog_names, mock_test_connection_database_command_run)<br ALIGN="LEFT"/>test_create_database()<br ALIGN="LEFT"/>test_create_database_conn_fail()<br ALIGN="LEFT"/>test_create_database_extra_metadata_validate()<br ALIGN="LEFT"/>test_create_database_fail_sqlite()<br ALIGN="LEFT"/>test_create_database_invalid_configuration_method()<br ALIGN="LEFT"/>test_create_database_json_validate()<br ALIGN="LEFT"/>test_create_database_no_configuration_method()<br ALIGN="LEFT"/>test_create_database_server_cert_validate()<br ALIGN="LEFT"/>test_create_database_unique_validate()<br ALIGN="LEFT"/>test_create_database_uri_validate()<br ALIGN="LEFT"/>test_create_database_with_missing_port_raises_error(mock_get_all_schema_names, mock_get_all_catalog_names, mock_create_is_feature_enabled, mock_test_connection_database_command_run)<br ALIGN="LEFT"/>test_create_database_with_ssh_tunnel(mock_get_all_schema_names, mock_get_all_catalog_names, mock_create_is_feature_enabled, mock_test_connection_database_command_run)<br ALIGN="LEFT"/>test_database_schemas()<br ALIGN="LEFT"/>test_database_schemas_invalid_query()<br ALIGN="LEFT"/>test_database_schemas_not_found()<br ALIGN="LEFT"/>test_database_tables()<br ALIGN="LEFT"/>test_database_tables_invalid_query()<br ALIGN="LEFT"/>test_database_tables_not_found(logger_mock)<br ALIGN="LEFT"/>test_database_tables_unexpected_error(mock_get_all_table_names_in_schema, mock_can_access_database, logger_mock)<br ALIGN="LEFT"/>test_delete_database()<br ALIGN="LEFT"/>test_delete_database_not_found()<br ALIGN="LEFT"/>test_delete_database_with_datasets()<br ALIGN="LEFT"/>test_delete_database_with_report()<br ALIGN="LEFT"/>test_delete_ssh_tunnel(mock_get_all_schema_names, mock_get_all_catalog_names, mock_delete_is_feature_enabled, mock_update_is_feature_enabled, mock_create_is_feature_enabled, mock_test_connection_database_command_run)<br ALIGN="LEFT"/>test_do_not_create_database_if_ssh_tunnel_creation_fails(mock_get_all_schema_names, mock_get_all_catalog_names, mock_create_is_feature_enabled, mock_test_connection_database_command_run, mock_rollback)<br ALIGN="LEFT"/>test_export_database()<br ALIGN="LEFT"/>test_export_database_non_existing()<br ALIGN="LEFT"/>test_export_database_not_allowed()<br ALIGN="LEFT"/>test_function_names(mock_get_function_names)<br ALIGN="LEFT"/>test_function_names_sqlite()<br ALIGN="LEFT"/>test_get_allow_file_upload_false()<br ALIGN="LEFT"/>test_get_allow_file_upload_false_no_extra()<br ALIGN="LEFT"/>test_get_allow_file_upload_filter()<br ALIGN="LEFT"/>test_get_allow_file_upload_filter_allow_file_false()<br ALIGN="LEFT"/>test_get_allow_file_upload_filter_no_permission()<br ALIGN="LEFT"/>test_get_allow_file_upload_filter_no_schema()<br ALIGN="LEFT"/>test_get_allow_file_upload_filter_with_permission()<br ALIGN="LEFT"/>test_get_allow_file_upload_true_csv()<br ALIGN="LEFT"/>test_get_database_related_objects()<br ALIGN="LEFT"/>test_get_database_related_objects_not_found()<br ALIGN="LEFT"/>test_get_database_returns_related_ssh_tunnel(mock_get_all_schema_names, mock_get_all_catalog_names, mock_create_is_feature_enabled, mock_test_connection_database_command_run)<br ALIGN="LEFT"/>test_get_databases_with_extra_filters()<br ALIGN="LEFT"/>test_get_invalid_database_table_extra_metadata_deprecated()<br ALIGN="LEFT"/>test_get_invalid_database_table_metadata()<br ALIGN="LEFT"/>test_get_invalid_table_table_extra_metadata_deprecated()<br ALIGN="LEFT"/>test_get_invalid_table_table_metadata()<br ALIGN="LEFT"/>test_get_items()<br ALIGN="LEFT"/>test_get_items_filter()<br ALIGN="LEFT"/>test_get_items_not_allowed()<br ALIGN="LEFT"/>test_get_related_objects()<br ALIGN="LEFT"/>test_get_select_star()<br ALIGN="LEFT"/>test_get_select_star_not_allowed()<br ALIGN="LEFT"/>test_get_select_star_not_found_database()<br ALIGN="LEFT"/>test_get_select_star_not_found_table()<br ALIGN="LEFT"/>test_get_table_details_with_slash_in_table_name()<br ALIGN="LEFT"/>test_get_table_extra_metadata_deprecated()<br ALIGN="LEFT"/>test_get_table_metadata()<br ALIGN="LEFT"/>test_get_table_metadata_no_db_permission()<br ALIGN="LEFT"/>test_if_ssh_tunneling_flag_is_not_active_it_raises_new_exception(mock_get_all_schema_names, mock_get_all_catalog_names)<br ALIGN="LEFT"/>test_import_database(mock_add_permissions)<br ALIGN="LEFT"/>test_import_database_invalid(mock_add_permissions)<br ALIGN="LEFT"/>test_import_database_masked_password(mock_add_permissions)<br ALIGN="LEFT"/>test_import_database_masked_password_provided(mock_add_permissions)<br ALIGN="LEFT"/>test_import_database_masked_ssh_tunnel_feature_flag_disabled(mock_add_permissions)<br ALIGN="LEFT"/>test_import_database_masked_ssh_tunnel_feature_mix_credentials(mock_add_permissions, mock_schema_is_feature_enabled)<br ALIGN="LEFT"/>test_import_database_masked_ssh_tunnel_feature_no_credentials(mock_add_permissions, mock_schema_is_feature_enabled)<br ALIGN="LEFT"/>test_import_database_masked_ssh_tunnel_feature_only_pk_passwd(mock_add_permissions, mock_schema_is_feature_enabled)<br ALIGN="LEFT"/>test_import_database_masked_ssh_tunnel_password(mock_add_permissions, mock_schema_is_feature_enabled)<br ALIGN="LEFT"/>test_import_database_masked_ssh_tunnel_password_provided(mock_add_permissions, mock_schema_is_feature_enabled)<br ALIGN="LEFT"/>test_import_database_masked_ssh_tunnel_private_key_and_password(mock_add_permissions, mock_schema_is_feature_enabled)<br ALIGN="LEFT"/>test_import_database_masked_ssh_tunnel_private_key_and_password_provided(mock_add_permissions, mock_schema_is_feature_enabled)<br ALIGN="LEFT"/>test_import_database_overwrite(mock_add_permissions)<br ALIGN="LEFT"/>test_info_security_database()<br ALIGN="LEFT"/>test_test_connection()<br ALIGN="LEFT"/>test_test_connection_failed()<br ALIGN="LEFT"/>test_test_connection_failed_invalid_hostname(mock_event_logger, mock_build_db)<br ALIGN="LEFT"/>test_test_connection_unsafe_uri()<br ALIGN="LEFT"/>test_update_database()<br ALIGN="LEFT"/>test_update_database_conn_fail()<br ALIGN="LEFT"/>test_update_database_invalid()<br ALIGN="LEFT"/>test_update_database_uniqueness()<br ALIGN="LEFT"/>test_update_database_uri_validate()<br ALIGN="LEFT"/>test_update_database_with_invalid_configuration_method()<br ALIGN="LEFT"/>test_update_database_with_missing_port_raises_error(mock_get_all_schema_names, mock_get_all_catalog_names, mock_update_is_feature_enabled, mock_create_is_feature_enabled, mock_test_connection_database_command_run)<br ALIGN="LEFT"/>test_update_database_with_no_configuration_method()<br ALIGN="LEFT"/>test_update_database_with_ssh_tunnel(mock_get_all_schema_names, mock_get_all_catalog_names, mock_update_is_feature_enabled, mock_create_is_feature_enabled, mock_test_connection_database_command_run)<br ALIGN="LEFT"/>test_update_ssh_tunnel_via_database_api(mock_get_all_schema_names, mock_get_all_catalog_names, mock_update_is_feature_enabled, mock_create_is_feature_enabled, mock_test_connection_database_command_run)<br ALIGN="LEFT"/>test_validate_parameters_invalid_host(is_hostname_valid)<br ALIGN="LEFT"/>test_validate_parameters_invalid_payload_format()<br ALIGN="LEFT"/>test_validate_parameters_invalid_payload_schema()<br ALIGN="LEFT"/>test_validate_parameters_invalid_port()<br ALIGN="LEFT"/>test_validate_parameters_invalid_port_range(is_hostname_valid)<br ALIGN="LEFT"/>test_validate_parameters_missing_fields()<br ALIGN="LEFT"/>test_validate_parameters_valid_payload(ValidateDatabaseParametersCommand, is_port_open, is_hostname_valid)<br ALIGN="LEFT"/>test_validate_sql()<br ALIGN="LEFT"/>test_validate_sql_endpoint_failure(get_validator_by_name)<br ALIGN="LEFT"/>test_validate_sql_endpoint_noconfig()<br ALIGN="LEFT"/>test_validate_sql_errors()<br ALIGN="LEFT"/>test_validate_sql_not_found()<br ALIGN="LEFT"/>test_validate_sql_validation_fails()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.model_tests.TestDatabaseModel" [color="black", fontcolor="black", label=<{TestDatabaseModel|<br ALIGN="LEFT"/>|test_adjust_engine_params_mysql(mocked_create_engine)<br ALIGN="LEFT"/>test_database_impersonate_user()<br ALIGN="LEFT"/>test_database_schema_hive()<br ALIGN="LEFT"/>test_database_schema_mysql()<br ALIGN="LEFT"/>test_database_schema_postgres()<br ALIGN="LEFT"/>test_database_schema_presto()<br ALIGN="LEFT"/>test_get_sqla_engine(mocked_create_engine)<br ALIGN="LEFT"/>test_impersonate_user_hive(mocked_create_engine)<br ALIGN="LEFT"/>test_impersonate_user_presto(mocked_create_engine)<br ALIGN="LEFT"/>test_impersonate_user_trino(mocked_create_engine)<br ALIGN="LEFT"/>test_multi_statement()<br ALIGN="LEFT"/>test_select_star()<br ALIGN="LEFT"/>test_select_star_fully_qualified_names()<br ALIGN="LEFT"/>test_single_statement()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.sqla_models_tests.TestDatabaseModel" [color="black", fontcolor="black", label=<{TestDatabaseModel|<br ALIGN="LEFT"/>|test_adhoc_metrics_and_calc_columns()<br ALIGN="LEFT"/>test_boolean_type_where_operators()<br ALIGN="LEFT"/>test_db_column_types()<br ALIGN="LEFT"/>test_dml_statement_raises_exception()<br ALIGN="LEFT"/>test_fetch_metadata_for_updated_virtual_table()<br ALIGN="LEFT"/>test_incorrect_jinja_syntax_raises_correct_exception()<br ALIGN="LEFT"/>test_is_time_druid_time_col()<br ALIGN="LEFT"/>test_jinja_metric_macro(mock_dataset_id_from_context)<br ALIGN="LEFT"/>test_jinja_metrics_and_calc_columns(mock_username)<br ALIGN="LEFT"/>test_labels_expected_on_mutated_query()<br ALIGN="LEFT"/>test_multiple_sql_statements_raises_exception()<br ALIGN="LEFT"/>test_query_format_strip_trailing_semicolon()<br ALIGN="LEFT"/>test_temporal_varchar()<br ALIGN="LEFT"/>test_where_operators()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.db_engine_specs.databricks_tests.TestDatabricksDbEngineSpec" [color="black", fontcolor="black", label=<{TestDatabricksDbEngineSpec|<br ALIGN="LEFT"/>|test_extras_with_ssl_custom()<br ALIGN="LEFT"/>test_extras_without_ssl()<br ALIGN="LEFT"/>test_get_engine_spec()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.datasets.api_tests.TestDatasetApi" [color="black", fontcolor="black", label=<{TestDatasetApi|fixture_tables_names : tuple<br ALIGN="LEFT"/>fixture_virtual_table_names : tuple<br ALIGN="LEFT"/>|create_dataset_import(): BytesIO<br ALIGN="LEFT"/>create_datasets()<br ALIGN="LEFT"/>create_virtual_datasets()<br ALIGN="LEFT"/>get_energy_usage_dataset()<br ALIGN="LEFT"/>get_fixture_datasets(): list[SqlaTable]<br ALIGN="LEFT"/>get_fixture_virtual_datasets(): list[SqlaTable]<br ALIGN="LEFT"/>insert_dataset(table_name: str, owners: list[int], database: Database, sql: Optional[str], schema: Optional[str]): SqlaTable<br ALIGN="LEFT"/>insert_default_dataset()<br ALIGN="LEFT"/>test_bulk_delete_dataset_item_incorrect()<br ALIGN="LEFT"/>test_bulk_delete_dataset_item_not_authorized()<br ALIGN="LEFT"/>test_bulk_delete_dataset_items()<br ALIGN="LEFT"/>test_bulk_delete_item_dataset_not_owned()<br ALIGN="LEFT"/>test_bulk_delete_item_not_found()<br ALIGN="LEFT"/>test_create_dataset_item()<br ALIGN="LEFT"/>test_create_dataset_item_gamma()<br ALIGN="LEFT"/>test_create_dataset_item_normalize()<br ALIGN="LEFT"/>test_create_dataset_item_owner()<br ALIGN="LEFT"/>test_create_dataset_item_owners_invalid()<br ALIGN="LEFT"/>test_create_dataset_same_name_different_schema()<br ALIGN="LEFT"/>test_create_dataset_sqlalchemy_error(mock_dao_create)<br ALIGN="LEFT"/>test_create_dataset_validate_database()<br ALIGN="LEFT"/>test_create_dataset_validate_tables_exists()<br ALIGN="LEFT"/>test_create_dataset_validate_view_exists(mock_get_table, mock_has_table, mock_has_view, mock_get_columns)<br ALIGN="LEFT"/>test_create_dataset_with_sql()<br ALIGN="LEFT"/>test_dataset_get_list_no_username()<br ALIGN="LEFT"/>test_dataset_get_no_username()<br ALIGN="LEFT"/>test_dataset_item_refresh()<br ALIGN="LEFT"/>test_dataset_item_refresh_not_found()<br ALIGN="LEFT"/>test_dataset_item_refresh_not_owned()<br ALIGN="LEFT"/>test_delete_dataset_column()<br ALIGN="LEFT"/>test_delete_dataset_column_fail(mock_dao_delete)<br ALIGN="LEFT"/>test_delete_dataset_column_not_found()<br ALIGN="LEFT"/>test_delete_dataset_column_not_owned()<br ALIGN="LEFT"/>test_delete_dataset_item()<br ALIGN="LEFT"/>test_delete_dataset_item_not_authorized()<br ALIGN="LEFT"/>test_delete_dataset_metric()<br ALIGN="LEFT"/>test_delete_dataset_metric_fail(mock_dao_delete)<br ALIGN="LEFT"/>test_delete_dataset_metric_not_found()<br ALIGN="LEFT"/>test_delete_dataset_metric_not_owned()<br ALIGN="LEFT"/>test_delete_dataset_sqlalchemy_error(mock_dao_delete)<br ALIGN="LEFT"/>test_delete_item_dataset_not_owned()<br ALIGN="LEFT"/>test_duplicate_existing_dataset()<br ALIGN="LEFT"/>test_duplicate_invalid_dataset()<br ALIGN="LEFT"/>test_duplicate_physical_dataset()<br ALIGN="LEFT"/>test_duplicate_virtual_dataset()<br ALIGN="LEFT"/>test_export_dataset()<br ALIGN="LEFT"/>test_export_dataset_bundle()<br ALIGN="LEFT"/>test_export_dataset_bundle_gamma()<br ALIGN="LEFT"/>test_export_dataset_bundle_not_found()<br ALIGN="LEFT"/>test_export_dataset_gamma()<br ALIGN="LEFT"/>test_export_dataset_not_found()<br ALIGN="LEFT"/>test_get_dataset_distinct_gamma()<br ALIGN="LEFT"/>test_get_dataset_distinct_not_allowed()<br ALIGN="LEFT"/>test_get_dataset_distinct_schema()<br ALIGN="LEFT"/>test_get_dataset_info()<br ALIGN="LEFT"/>test_get_dataset_item()<br ALIGN="LEFT"/>test_get_dataset_list()<br ALIGN="LEFT"/>test_get_dataset_list_gamma()<br ALIGN="LEFT"/>test_get_dataset_list_gamma_has_database_access()<br ALIGN="LEFT"/>test_get_dataset_related_database_gamma()<br ALIGN="LEFT"/>test_get_dataset_related_objects()<br ALIGN="LEFT"/>test_get_dataset_related_objects_not_found()<br ALIGN="LEFT"/>test_get_dataset_render_jinja()<br ALIGN="LEFT"/>test_get_dataset_render_jinja_exceptions()<br ALIGN="LEFT"/>test_get_datasets_custom_filter_sql()<br ALIGN="LEFT"/>test_get_datasets_is_certified_filter()<br ALIGN="LEFT"/>test_get_or_create_dataset_already_exists()<br ALIGN="LEFT"/>test_get_or_create_dataset_create_fails(command_run_mock)<br ALIGN="LEFT"/>test_get_or_create_dataset_creates_table()<br ALIGN="LEFT"/>test_get_or_create_dataset_database_not_found()<br ALIGN="LEFT"/>test_import_dataset(mock_add_permissions)<br ALIGN="LEFT"/>test_import_dataset_invalid()<br ALIGN="LEFT"/>test_import_dataset_invalid_v0_validation()<br ALIGN="LEFT"/>test_import_dataset_overwrite(mock_add_permissions)<br ALIGN="LEFT"/>test_import_dataset_v0_export()<br ALIGN="LEFT"/>test_info_security_dataset()<br ALIGN="LEFT"/>test_update_dataset_clear_owner_list()<br ALIGN="LEFT"/>test_update_dataset_create_column_and_metric()<br ALIGN="LEFT"/>test_update_dataset_delete_column()<br ALIGN="LEFT"/>test_update_dataset_delete_metric()<br ALIGN="LEFT"/>test_update_dataset_item()<br ALIGN="LEFT"/>test_update_dataset_item_gamma()<br ALIGN="LEFT"/>test_update_dataset_item_not_owned()<br ALIGN="LEFT"/>test_update_dataset_item_owners_invalid()<br ALIGN="LEFT"/>test_update_dataset_item_w_override_columns()<br ALIGN="LEFT"/>test_update_dataset_item_w_override_columns_same_columns()<br ALIGN="LEFT"/>test_update_dataset_populate_owner()<br ALIGN="LEFT"/>test_update_dataset_preserve_ownership()<br ALIGN="LEFT"/>test_update_dataset_sqlalchemy_error(mock_dao_update)<br ALIGN="LEFT"/>test_update_dataset_update_column()<br ALIGN="LEFT"/>test_update_dataset_update_column_duplicate()<br ALIGN="LEFT"/>test_update_dataset_update_column_uniqueness()<br ALIGN="LEFT"/>test_update_dataset_update_metric_duplicate()<br ALIGN="LEFT"/>test_update_dataset_update_metric_uniqueness()<br ALIGN="LEFT"/>test_user_gets_all_datasets()<br ALIGN="LEFT"/>test_warm_up_cache()<br ALIGN="LEFT"/>test_warm_up_cache_db_and_table_name_required()<br ALIGN="LEFT"/>test_warm_up_cache_table_not_found()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.datasets.commands_tests.TestDatasetWarmUpCacheCommand" [color="black", fontcolor="black", label=<{TestDatasetWarmUpCacheCommand|<br ALIGN="LEFT"/>|test_warm_up_cache()<br ALIGN="LEFT"/>test_warm_up_cache_command_table_not_found()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.datasource_tests.TestDatasource" [color="black", fontcolor="black", label=<{TestDatasource|<br ALIGN="LEFT"/>|compare_lists(l1, l2, key)<br ALIGN="LEFT"/>save_datasource_from_dict(datasource_post)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_always_filter_main_dttm()<br ALIGN="LEFT"/>test_change_database()<br ALIGN="LEFT"/>test_external_metadata_by_name_for_physical_table()<br ALIGN="LEFT"/>test_external_metadata_by_name_for_virtual_table()<br ALIGN="LEFT"/>test_external_metadata_by_name_for_virtual_table_uses_mutator()<br ALIGN="LEFT"/>test_external_metadata_by_name_from_sqla_inspector()<br ALIGN="LEFT"/>test_external_metadata_error_return_400(mock_get_datasource)<br ALIGN="LEFT"/>test_external_metadata_for_malicious_virtual_table()<br ALIGN="LEFT"/>test_external_metadata_for_multistatement_virtual_table()<br ALIGN="LEFT"/>test_external_metadata_for_physical_table()<br ALIGN="LEFT"/>test_external_metadata_for_virtual_table()<br ALIGN="LEFT"/>test_external_metadata_for_virtual_table_template_params()<br ALIGN="LEFT"/>test_get_datasource()<br ALIGN="LEFT"/>test_get_datasource_failed()<br ALIGN="LEFT"/>test_get_datasource_invalid_datasource_failed()<br ALIGN="LEFT"/>test_get_datasource_with_health_check()<br ALIGN="LEFT"/>test_save()<br ALIGN="LEFT"/>test_save_default_endpoint_validation_success()<br ALIGN="LEFT"/>test_save_duplicate_key()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.datasource.api_tests.TestDatasourceApi" [color="black", fontcolor="black", label=<{TestDatasourceApi|<br ALIGN="LEFT"/>|get_virtual_dataset()<br ALIGN="LEFT"/>test_get_column_values_datasource_not_found()<br ALIGN="LEFT"/>test_get_column_values_datasource_type_not_supported(get_datasource_mock)<br ALIGN="LEFT"/>test_get_column_values_denormalize_column(denormalize_name_mock)<br ALIGN="LEFT"/>test_get_column_values_floats()<br ALIGN="LEFT"/>test_get_column_values_integers_with_nulls()<br ALIGN="LEFT"/>test_get_column_values_ints()<br ALIGN="LEFT"/>test_get_column_values_invalid_datasource_type()<br ALIGN="LEFT"/>test_get_column_values_no_datasource_access()<br ALIGN="LEFT"/>test_get_column_values_normalize_columns_disabled(values_for_column_mock)<br ALIGN="LEFT"/>test_get_column_values_normalize_columns_enabled(values_for_column_mock)<br ALIGN="LEFT"/>test_get_column_values_not_denormalize_column(denormalize_name_mock)<br ALIGN="LEFT"/>test_get_column_values_nulls()<br ALIGN="LEFT"/>test_get_column_values_strs()<br ALIGN="LEFT"/>test_get_column_values_with_rls()<br ALIGN="LEFT"/>test_get_column_values_with_rls_no_values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.security_tests.TestDatasources" [color="black", fontcolor="black", label=<{TestDatasources|<br ALIGN="LEFT"/>|test_get_user_datasources_admin(mock_get_session, mock_can_access_database)<br ALIGN="LEFT"/>test_get_user_datasources_gamma(mock_get_session, mock_can_access_database)<br ALIGN="LEFT"/>test_get_user_datasources_gamma_with_schema(mock_get_session, mock_can_access_database)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.db_engine_specs.base_tests.TestDbEngineSpec" [color="black", fontcolor="black", label=<{TestDbEngineSpec|<br ALIGN="LEFT"/>|sql_limit_regex(sql, expected_sql, engine_spec_class, limit, force)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.db_engine_specs.base_engine_spec_tests.TestDbEngineSpecs" [color="black", fontcolor="black", label=<{TestDbEngineSpecs|<br ALIGN="LEFT"/>|test_calculated_column_in_order_by_base_engine_spec()<br ALIGN="LEFT"/>test_column_datatype_to_string()<br ALIGN="LEFT"/>test_convert_dttm()<br ALIGN="LEFT"/>test_engine_time_grain_validity()<br ALIGN="LEFT"/>test_extract_limit_from_query(engine_spec_class)<br ALIGN="LEFT"/>test_get_datatype()<br ALIGN="LEFT"/>test_get_table_names()<br ALIGN="LEFT"/>test_get_time_grain_expressions()<br ALIGN="LEFT"/>test_limit_expr_and_semicolon()<br ALIGN="LEFT"/>test_limit_query_with_force()<br ALIGN="LEFT"/>test_limit_query_with_limit_subquery()<br ALIGN="LEFT"/>test_limit_query_without_force()<br ALIGN="LEFT"/>test_limit_with_explicit_offset()<br ALIGN="LEFT"/>test_limit_with_expr()<br ALIGN="LEFT"/>test_limit_with_fetch_many()<br ALIGN="LEFT"/>test_limit_with_implicit_offset()<br ALIGN="LEFT"/>test_limit_with_non_token_limit()<br ALIGN="LEFT"/>test_modify_limit_query()<br ALIGN="LEFT"/>test_pyodbc_rows_to_tuples()<br ALIGN="LEFT"/>test_pyodbc_rows_to_tuples_passthrough()<br ALIGN="LEFT"/>test_simple_limit_query()<br ALIGN="LEFT"/>test_wrapped_semi_tabs()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.dashboards.commands_tests.TestDeleteEmbeddedDashboardCommand" [color="black", fontcolor="black", label=<{TestDeleteEmbeddedDashboardCommand|<br ALIGN="LEFT"/>|test_delete_embedded_dashboard_command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.databases.ssh_tunnel.commands.commands_tests.TestDeleteSSHTunnelCommand" [color="black", fontcolor="black", label=<{TestDeleteSSHTunnelCommand|<br ALIGN="LEFT"/>|test_delete_ssh_tunnel_not_found(mock_g, mock_delete_is_feature_enabled)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.tags.commands_tests.TestDeleteTaggedObjectCommand" [color="black", fontcolor="black", label=<{TestDeleteTaggedObjectCommand|<br ALIGN="LEFT"/>|test_delete_tags_command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.tags.commands_tests.TestDeleteTagsCommand" [color="black", fontcolor="black", label=<{TestDeleteTagsCommand|<br ALIGN="LEFT"/>|test_delete_tags_command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.dict_import_export_tests.TestDictImportExport" [color="black", fontcolor="black", label=<{TestDictImportExport|<br ALIGN="LEFT"/>|assert_datasource_equals(expected_ds, actual_ds)<br ALIGN="LEFT"/>assert_table_equals(expected_ds, actual_ds)<br ALIGN="LEFT"/>create_table(name, schema, id, cols_names, cols_uuids, metric_names)<br ALIGN="LEFT"/>delete_imports()<br ALIGN="LEFT"/>setUpClass()<br ALIGN="LEFT"/>tearDownClass()<br ALIGN="LEFT"/>test_import_table_1_col_1_met()<br ALIGN="LEFT"/>test_import_table_2_col_2_met()<br ALIGN="LEFT"/>test_import_table_no_metadata()<br ALIGN="LEFT"/>test_import_table_override_append()<br ALIGN="LEFT"/>test_import_table_override_identical()<br ALIGN="LEFT"/>test_import_table_override_sync()<br ALIGN="LEFT"/>yaml_compare(obj_1, obj_2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.dynamic_plugins_tests.TestDynamicPlugins" [color="black", fontcolor="black", label=<{TestDynamicPlugins|<br ALIGN="LEFT"/>|test_dynamic_plugins_disabled()<br ALIGN="LEFT"/>test_dynamic_plugins_enabled()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.db_engine_specs.elasticsearch_tests.TestElasticsearchDbEngineSpec" [color="black", fontcolor="black", label=<{TestElasticsearchDbEngineSpec|<br ALIGN="LEFT"/>|test_time_grain_expressions(time_grain, expected_time_grain_expression)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.email_tests.TestEmailSmtp" [color="black", fontcolor="black", label=<{TestEmailSmtp|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_send_bcc_smtp(mock_send_mime)<br ALIGN="LEFT"/>test_send_mime(mock_smtp, mock_smtp_ssl)<br ALIGN="LEFT"/>test_send_mime_dryrun(mock_smtp, mock_smtp_ssl)<br ALIGN="LEFT"/>test_send_mime_noauth(mock_smtp, mock_smtp_ssl)<br ALIGN="LEFT"/>test_send_mime_ssl(mock_smtp, mock_smtp_ssl)<br ALIGN="LEFT"/>test_send_mime_ssl_server_auth(mock_smtp, mock_smtp_ssl)<br ALIGN="LEFT"/>test_send_mime_tls_server_auth(mock_smtp)<br ALIGN="LEFT"/>test_send_smtp(mock_send_mime)<br ALIGN="LEFT"/>test_send_smtp_data(mock_send_mime)<br ALIGN="LEFT"/>test_send_smtp_inline_images(mock_send_mime)<br ALIGN="LEFT"/>test_send_smtp_with_email_mutator(mock_send_mime)<br ALIGN="LEFT"/>test_send_smtp_with_email_mutator_changing_recipients(mock_send_mime)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.embedded.api_tests.TestEmbeddedDashboardApi" [color="black", fontcolor="black", label=<{TestEmbeddedDashboardApi|dash<br ALIGN="LEFT"/>embedded<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>|test_get_embedded_dashboard()<br ALIGN="LEFT"/>test_get_embedded_dashboard_non_found()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.embedded.dao_tests.TestEmbeddedDashboardDAO" [color="black", fontcolor="black", label=<{TestEmbeddedDashboardDAO|<br ALIGN="LEFT"/>|test_get_by_uuid()<br ALIGN="LEFT"/>test_upsert()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.event_logger_tests.TestEventLogger" [color="black", fontcolor="black", label=<{TestEventLogger|<br ALIGN="LEFT"/>|test_config_class_deprecation()<br ALIGN="LEFT"/>test_context_manager_log(mock_g)<br ALIGN="LEFT"/>test_context_manager_log_with_context(mock_g)<br ALIGN="LEFT"/>test_correct_config_object()<br ALIGN="LEFT"/>test_log_this(mock_log)<br ALIGN="LEFT"/>test_log_this_with_extra_payload(mock_log)<br ALIGN="LEFT"/>test_log_with_context_user_null(mock_g)<br ALIGN="LEFT"/>test_raises_typeerror_if_not_abc()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.charts.commands_tests.TestExportChartsCommand" [color="black", fontcolor="black", label=<{TestExportChartsCommand|<br ALIGN="LEFT"/>|test_export_chart_command(mock_g)<br ALIGN="LEFT"/>test_export_chart_command_invalid_dataset(mock_g)<br ALIGN="LEFT"/>test_export_chart_command_key_order(mock_g)<br ALIGN="LEFT"/>test_export_chart_command_no_access(mock_g)<br ALIGN="LEFT"/>test_export_chart_command_no_related(mock_g)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.dashboards.commands_tests.TestExportDashboardsCommand" [color="black", fontcolor="black", label=<{TestExportDashboardsCommand|<br ALIGN="LEFT"/>|test_append_charts(mock_suffix)<br ALIGN="LEFT"/>test_export_dashboard_command(mock_g1, mock_g2)<br ALIGN="LEFT"/>test_export_dashboard_command_dataset_references(mock_g1, mock_g2)<br ALIGN="LEFT"/>test_export_dashboard_command_invalid_dataset(mock_g1, mock_g2)<br ALIGN="LEFT"/>test_export_dashboard_command_key_order(mock_g1, mock_g2)<br ALIGN="LEFT"/>test_export_dashboard_command_no_access(mock_g1, mock_g2)<br ALIGN="LEFT"/>test_export_dashboard_command_no_related(mock_g1, mock_g2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.databases.commands_tests.TestExportDatabasesCommand" [color="black", fontcolor="black", label=<{TestExportDatabasesCommand|<br ALIGN="LEFT"/>|test_export_database_command(mock_g)<br ALIGN="LEFT"/>test_export_database_command_invalid_database(mock_g)<br ALIGN="LEFT"/>test_export_database_command_key_order(mock_g)<br ALIGN="LEFT"/>test_export_database_command_no_access(mock_g)<br ALIGN="LEFT"/>test_export_database_command_no_related(mock_g)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.datasets.commands_tests.TestExportDatasetsCommand" [color="black", fontcolor="black", label=<{TestExportDatasetsCommand|<br ALIGN="LEFT"/>|test_export_dataset_command(mock_g)<br ALIGN="LEFT"/>test_export_dataset_command_invalid_dataset(mock_g)<br ALIGN="LEFT"/>test_export_dataset_command_key_order(mock_g)<br ALIGN="LEFT"/>test_export_dataset_command_no_access(mock_g)<br ALIGN="LEFT"/>test_export_dataset_command_no_related(mock_g)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.importexport.commands_tests.TestExportModelsCommand" [color="black", fontcolor="black", label=<{TestExportModelsCommand|<br ALIGN="LEFT"/>|test_export_models_command(mock_g)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.queries.saved_queries.commands_tests.TestExportSavedQueriesCommand" [color="black", fontcolor="black", label=<{TestExportSavedQueriesCommand|example_database<br ALIGN="LEFT"/>example_query<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_export_query_command(mock_g)<br ALIGN="LEFT"/>test_export_query_command_invalid_dataset(mock_g)<br ALIGN="LEFT"/>test_export_query_command_key_order(mock_g)<br ALIGN="LEFT"/>test_export_query_command_no_access(mock_g)<br ALIGN="LEFT"/>test_export_query_command_no_related(mock_g)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.charts.commands_tests.TestFavoriteChartCommand" [color="black", fontcolor="black", label=<{TestFavoriteChartCommand|<br ALIGN="LEFT"/>|test_fave_unfave_chart_command()<br ALIGN="LEFT"/>test_fave_unfave_chart_command_forbidden(mock_find_by_id)<br ALIGN="LEFT"/>test_fave_unfave_chart_command_not_found()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.dashboards.commands_tests.TestFavoriteDashboardCommand" [color="black", fontcolor="black", label=<{TestFavoriteDashboardCommand|<br ALIGN="LEFT"/>|test_fave_unfave_dashboard_command()<br ALIGN="LEFT"/>test_fave_unfave_dashboard_command_forbidden(mock_get)<br ALIGN="LEFT"/>test_fave_unfave_dashboard_command_not_found()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.form_tests.TestForm" [color="black", fontcolor="black", label=<{TestForm|<br ALIGN="LEFT"/>|test_comma_separated_list_field()<br ALIGN="LEFT"/>test_filter_not_empty_values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.unit_tests.utils.slack_test.TestGetChannelsWithSearch" [color="black", fontcolor="black", label=<{TestGetChannelsWithSearch|<br ALIGN="LEFT"/>|test_fetch_all_channels_no_search_string(mocker)<br ALIGN="LEFT"/>test_filter_channels_by_specified_types(mocker)<br ALIGN="LEFT"/>test_handle_empty_search_string(mocker)<br ALIGN="LEFT"/>test_handle_exact_match_search_string_multiple_channels(mocker)<br ALIGN="LEFT"/>test_handle_exact_match_search_string_single_channel(mocker)<br ALIGN="LEFT"/>test_handle_loose_match_search_string_multiple_channels(mocker)<br ALIGN="LEFT"/>test_handle_pagination_multiple_pages(mocker)<br ALIGN="LEFT"/>test_handle_slack_client_error_listing_channels(mocker)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.charts.data.api_tests.TestGetChartDataApi" [color="black", fontcolor="black", label=<{TestGetChartDataApi|<br ALIGN="LEFT"/>|test_chart_data_cache(cache_loader)<br ALIGN="LEFT"/>test_chart_data_cache_key_error()<br ALIGN="LEFT"/>test_chart_data_cache_no_login(cache_loader)<br ALIGN="LEFT"/>test_chart_data_cache_run_failed(cache_loader)<br ALIGN="LEFT"/>test_chart_data_get()<br ALIGN="LEFT"/>test_chart_data_get_forced()<br ALIGN="LEFT"/>test_chart_data_get_with_x_axis_using_custom_sql()<br ALIGN="LEFT"/>test_chart_data_with_adhoc_column()<br ALIGN="LEFT"/>test_chart_data_with_incompatible_adhoc_column()<br ALIGN="LEFT"/>test_get_data_when_query_context_is_null()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.db_engine_specs.gsheets_tests.TestGsheetsDbEngineSpec" [color="black", fontcolor="black", label=<{TestGsheetsDbEngineSpec|<br ALIGN="LEFT"/>|test_extract_errors()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.security_tests.TestGuestTokens" [color="black", fontcolor="black", label=<{TestGuestTokens|<br ALIGN="LEFT"/>|create_guest_token()<br ALIGN="LEFT"/>test_create_guest_access_token(get_time_mock)<br ALIGN="LEFT"/>test_create_guest_access_token_callable_audience(get_time_mock)<br ALIGN="LEFT"/>test_get_guest_user()<br ALIGN="LEFT"/>test_get_guest_user_bad_audience()<br ALIGN="LEFT"/>test_get_guest_user_expired_token(get_time_mock)<br ALIGN="LEFT"/>test_get_guest_user_no_resource()<br ALIGN="LEFT"/>test_get_guest_user_no_user()<br ALIGN="LEFT"/>test_get_guest_user_not_guest_type()<br ALIGN="LEFT"/>test_get_guest_user_with_request_form()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.security.guest_token_security_tests.TestGuestUserDashboardAccess" [color="black", fontcolor="black", label=<{TestGuestUserDashboardAccess|authorized_guest<br ALIGN="LEFT"/>dash<br ALIGN="LEFT"/>embedded<br ALIGN="LEFT"/>unauthorized_guest<br ALIGN="LEFT"/>|setUp(): None<br ALIGN="LEFT"/>test_has_guest_access__anonymous_user()<br ALIGN="LEFT"/>test_has_guest_access__authorized_guest_user()<br ALIGN="LEFT"/>test_has_guest_access__authorized_guest_user__non_zero_resource_index()<br ALIGN="LEFT"/>test_has_guest_access__regular_user()<br ALIGN="LEFT"/>test_has_guest_access__unauthorized_guest_user__different_resource_id()<br ALIGN="LEFT"/>test_has_guest_access__unauthorized_guest_user__different_resource_type()<br ALIGN="LEFT"/>test_raise_for_access_dashboard_as_guest_no_rbac()<br ALIGN="LEFT"/>test_raise_for_access_dashboard_as_unauthorized_guest()<br ALIGN="LEFT"/>test_raise_for_dashboard_access_as_guest()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.security.guest_token_security_tests.TestGuestUserDatasourceAccess" [color="black", fontcolor="black", label=<{TestGuestUserDatasourceAccess|authorized_guest<br ALIGN="LEFT"/>chart<br ALIGN="LEFT"/>dash<br ALIGN="LEFT"/>datasource<br ALIGN="LEFT"/>embedded<br ALIGN="LEFT"/>native_filter_datasource<br ALIGN="LEFT"/>other_chart<br ALIGN="LEFT"/>other_dash<br ALIGN="LEFT"/>other_datasource<br ALIGN="LEFT"/>unauthorized_guest<br ALIGN="LEFT"/>|create_dataset()<br ALIGN="LEFT"/>setUp(): None<br ALIGN="LEFT"/>test_raise_for_access__chart_doesnt_belong_to_datasource()<br ALIGN="LEFT"/>test_raise_for_access__chart_not_on_dashboard()<br ALIGN="LEFT"/>test_raise_for_access__embedded_feature_flag_off()<br ALIGN="LEFT"/>test_raise_for_access__happy_path()<br ALIGN="LEFT"/>test_raise_for_access__native_filter_datasource_not_associated()<br ALIGN="LEFT"/>test_raise_for_access__native_filter_happy_path()<br ALIGN="LEFT"/>test_raise_for_access__native_filter_no_id_in_form_data()<br ALIGN="LEFT"/>test_raise_for_access__no_chart_in_form_data()<br ALIGN="LEFT"/>test_raise_for_access__no_dashboard_in_form_data()<br ALIGN="LEFT"/>test_raise_for_access__unauthorized_guest_user()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.security.guest_token_security_tests.TestGuestUserSecurity" [color="black", fontcolor="black", label=<{TestGuestUserSecurity|<br ALIGN="LEFT"/>|authorized_guest()<br ALIGN="LEFT"/>test_get_guest_user__anonymous_user()<br ALIGN="LEFT"/>test_get_guest_user__guest_user()<br ALIGN="LEFT"/>test_get_guest_user__regular_user()<br ALIGN="LEFT"/>test_get_guest_user_roles_explicit()<br ALIGN="LEFT"/>test_get_guest_user_roles_implicit()<br ALIGN="LEFT"/>test_is_guest_user__anonymous()<br ALIGN="LEFT"/>test_is_guest_user__flag_off()<br ALIGN="LEFT"/>test_is_guest_user__guest_user()<br ALIGN="LEFT"/>test_is_guest_user__regular_user()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.commands_test.TestImportAssetsCommand" [color="black", fontcolor="black", label=<{TestImportAssetsCommand|user<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_import_assets(mock_add_permissions)<br ALIGN="LEFT"/>test_import_v1_dashboard_overwrite(mock_add_permissions)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.charts.commands_tests.TestImportChartsCommand" [color="black", fontcolor="black", label=<{TestImportChartsCommand|<br ALIGN="LEFT"/>|test_import_v1_chart(mock_add_permissions, sm_g, utils_g): None<br ALIGN="LEFT"/>test_import_v1_chart_multiple(mock_add_permissions, sm_g)<br ALIGN="LEFT"/>test_import_v1_chart_validation(mock_add_permissions)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.dashboards.commands_tests.TestImportDashboardsCommand" [color="black", fontcolor="black", label=<{TestImportDashboardsCommand|<br ALIGN="LEFT"/>|test_import_v0_dashboard_cli_export()<br ALIGN="LEFT"/>test_import_v1_dashboard(mock_add_permissions, sm_g, utils_g)<br ALIGN="LEFT"/>test_import_v1_dashboard_multiple(mock_add_permissions, mock_g)<br ALIGN="LEFT"/>test_import_v1_dashboard_validation()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.databases.commands_tests.TestImportDatabasesCommand" [color="black", fontcolor="black", label=<{TestImportDatabasesCommand|<br ALIGN="LEFT"/>|test_import_v1_database(mock_add_permissions, mock_g)<br ALIGN="LEFT"/>test_import_v1_database_broken_csv_fields(mock_add_permissions, mock_g)<br ALIGN="LEFT"/>test_import_v1_database_masked_password(mock_add_permissions)<br ALIGN="LEFT"/>test_import_v1_database_masked_ssh_tunnel_multiple_credentials(mock_add_permissions, mock_schema_is_feature_enabled)<br ALIGN="LEFT"/>test_import_v1_database_masked_ssh_tunnel_no_credentials(mock_add_permissions, mock_schema_is_feature_enabled)<br ALIGN="LEFT"/>test_import_v1_database_masked_ssh_tunnel_only_priv_key_psswd(mock_add_permissions, mock_schema_is_feature_enabled)<br ALIGN="LEFT"/>test_import_v1_database_masked_ssh_tunnel_password(mock_add_permissions, mock_schema_is_feature_enabled)<br ALIGN="LEFT"/>test_import_v1_database_masked_ssh_tunnel_private_key_and_password(mock_add_permissions, mock_schema_is_feature_enabled)<br ALIGN="LEFT"/>test_import_v1_database_multiple(mock_add_permissions, mock_g)<br ALIGN="LEFT"/>test_import_v1_database_validation(mock_add_permissions)<br ALIGN="LEFT"/>test_import_v1_database_with_dataset(mock_add_permissions, mock_g)<br ALIGN="LEFT"/>test_import_v1_database_with_dataset_multiple(mock_add_permissions, mock_g)<br ALIGN="LEFT"/>test_import_v1_database_with_ssh_tunnel_password(mock_add_permissions, mock_g, mock_schema_is_feature_enabled)<br ALIGN="LEFT"/>test_import_v1_database_with_ssh_tunnel_private_key_and_password(mock_add_permissions, mock_g, mock_schema_is_feature_enabled)<br ALIGN="LEFT"/>test_import_v1_rollback(mock_add_permissions, mock_import_dataset)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.datasets.commands_tests.TestImportDatasetsCommand" [color="black", fontcolor="black", label=<{TestImportDatasetsCommand|<br ALIGN="LEFT"/>|test_import_v0_dataset_cli_export()<br ALIGN="LEFT"/>test_import_v0_dataset_ui_export()<br ALIGN="LEFT"/>test_import_v1_dataset(mock_add_permissions, sm_g, utils_g)<br ALIGN="LEFT"/>test_import_v1_dataset_existing_database(mock_add_permissions, mock_g)<br ALIGN="LEFT"/>test_import_v1_dataset_multiple(mock_add_permissions, mock_g)<br ALIGN="LEFT"/>test_import_v1_dataset_validation(mock_add_permissions)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.import_export_tests.TestImportExport" [color="black", fontcolor="black", label=<{TestImportExport|<br ALIGN="LEFT"/>|assert_dash_equals(expected_dash, actual_dash, check_position, check_slugs)<br ALIGN="LEFT"/>assert_datasource_equals(expected_ds, actual_ds)<br ALIGN="LEFT"/>assert_only_exported_slc_fields(expected_dash, actual_dash)<br ALIGN="LEFT"/>assert_slice_equals(expected_slc, actual_slc)<br ALIGN="LEFT"/>assert_table_equals(expected_ds, actual_ds)<br ALIGN="LEFT"/>create_dashboard(title, id, slcs)<br ALIGN="LEFT"/>create_slice(name, ds_id, id, db_name, table_name, schema)<br ALIGN="LEFT"/>create_table(name, schema, id, cols_names, metric_names)<br ALIGN="LEFT"/>get_dash(dash_id)<br ALIGN="LEFT"/>get_slice(slc_id)<br ALIGN="LEFT"/>get_slice_by_name(name)<br ALIGN="LEFT"/>test_export_1_dashboard()<br ALIGN="LEFT"/>test_export_2_dashboards()<br ALIGN="LEFT"/>test_import_1_slice()<br ALIGN="LEFT"/>test_import_2_slices_for_same_table()<br ALIGN="LEFT"/>test_import_dashboard_1_slice()<br ALIGN="LEFT"/>test_import_dashboard_2_slices()<br ALIGN="LEFT"/>test_import_empty_dashboard()<br ALIGN="LEFT"/>test_import_new_dashboard_slice_reset_ownership()<br ALIGN="LEFT"/>test_import_override_dashboard_2_slices()<br ALIGN="LEFT"/>test_import_override_dashboard_slice_reset_ownership()<br ALIGN="LEFT"/>test_import_slices_override()<br ALIGN="LEFT"/>test_import_table_1_col_1_met()<br ALIGN="LEFT"/>test_import_table_2_col_2_met()<br ALIGN="LEFT"/>test_import_table_no_metadata()<br ALIGN="LEFT"/>test_import_table_override()<br ALIGN="LEFT"/>test_import_table_override_identical()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.queries.saved_queries.commands_tests.TestImportSavedQueriesCommand" [color="black", fontcolor="black", label=<{TestImportSavedQueriesCommand|<br ALIGN="LEFT"/>|test_import_v1_saved_queries(mock_add_permissions, mock_g)<br ALIGN="LEFT"/>test_import_v1_saved_queries_multiple(mock_add_permissions, mock_g)<br ALIGN="LEFT"/>test_import_v1_saved_queries_validation()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.commands_test.TestImportersV1Utils" [color="black", fontcolor="black", label=<{TestImportersV1Utils|<br ALIGN="LEFT"/>|test_is_valid_config()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.log_api_tests.TestLogApi" [color="black", fontcolor="black", label=<{TestLogApi|<br ALIGN="LEFT"/>|insert_log(action: str, user: 'User', dashboard_id: Optional[int], slice_id: Optional[int], json: Optional[str], duration_ms: Optional[int])<br ALIGN="LEFT"/>test_delete_log()<br ALIGN="LEFT"/>test_get_item()<br ALIGN="LEFT"/>test_get_list()<br ALIGN="LEFT"/>test_get_list_not_allowed()<br ALIGN="LEFT"/>test_get_recent_activity()<br ALIGN="LEFT"/>test_get_recent_activity_actions_filter()<br ALIGN="LEFT"/>test_get_recent_activity_distinct_false()<br ALIGN="LEFT"/>test_get_recent_activity_pagination()<br ALIGN="LEFT"/>test_not_enabled()<br ALIGN="LEFT"/>test_update_log()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.log_model_view_tests.TestLogModelView" [color="black", fontcolor="black", label=<{TestLogModelView|<br ALIGN="LEFT"/>|test_disabled()<br ALIGN="LEFT"/>test_enabled()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.logging_configurator_tests.TestLoggingConfigurator" [color="black", fontcolor="black", label=<{TestLoggingConfigurator|<br ALIGN="LEFT"/>|reset_logging()<br ALIGN="LEFT"/>test_configurator_adding_handler()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.db_engine_specs.mysql_tests.TestMySQLEngineSpecsDbEngineSpec" [color="black", fontcolor="black", label=<{TestMySQLEngineSpecsDbEngineSpec|<br ALIGN="LEFT"/>|test_column_datatype_to_string()<br ALIGN="LEFT"/>test_extract_error_message()<br ALIGN="LEFT"/>test_extract_errors()<br ALIGN="LEFT"/>test_get_datatype_mysql()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.base_api_tests.TestOpenApiSpec" [color="black", fontcolor="black", label=<{TestOpenApiSpec|<br ALIGN="LEFT"/>|test_open_api_spec()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.viz_tests.TestPairedTTest" [color="black", fontcolor="black", label=<{TestPairedTTest|<br ALIGN="LEFT"/>|test_get_data_empty_null_keys()<br ALIGN="LEFT"/>test_get_data_transforms_dataframe()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.viz_tests.TestPartitionViz" [color="black", fontcolor="black", label=<{TestPartitionViz|<br ALIGN="LEFT"/>|test_get_data_calls_correct_method()<br ALIGN="LEFT"/>test_levels_for_computes_levels()<br ALIGN="LEFT"/>test_levels_for_diff_computes_difference()<br ALIGN="LEFT"/>test_levels_for_time_calls_process_data_and_drops_cols()<br ALIGN="LEFT"/>test_nest_procs_returns_hierarchy()<br ALIGN="LEFT"/>test_nest_values_returns_hierarchy()<br ALIGN="LEFT"/>test_query_obj_time_series_option(super_query_obj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.db_engine_specs.pinot_tests.TestPinotDbEngineSpec" [color="black", fontcolor="black", label=<{TestPinotDbEngineSpec|<br ALIGN="LEFT"/>|test_invalid_get_time_expression_arguments()<br ALIGN="LEFT"/>test_pinot_time_expression_millisec_one_1m_grain()<br ALIGN="LEFT"/>test_pinot_time_expression_sec_one_1d_grain()<br ALIGN="LEFT"/>test_pinot_time_expression_sec_one_1m_grain()<br ALIGN="LEFT"/>test_pinot_time_expression_simple_date_format_10m_grain()<br ALIGN="LEFT"/>test_pinot_time_expression_simple_date_format_1d_grain()<br ALIGN="LEFT"/>test_pinot_time_expression_simple_date_format_1w_grain()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.charts.data.api_tests.TestPostChartDataApi" [color="black", fontcolor="black", label=<{TestPostChartDataApi|maxDiff : NoneType<br ALIGN="LEFT"/>|assert_row_count(rv: Response, expected_row_count: int)<br ALIGN="LEFT"/>test__map_form_data_datasource_to_dataset_id()<br ALIGN="LEFT"/>test_as_samples_with_row_limit_bigger_then_sql_max_row_rowcount_as_sql_max_row()<br ALIGN="LEFT"/>test_as_samples_without_row_limit__row_count_as_default_samples_row_limit()<br ALIGN="LEFT"/>test_chart_data_applied_time_extras()<br ALIGN="LEFT"/>test_chart_data_async()<br ALIGN="LEFT"/>test_chart_data_async_cached_sync_response()<br ALIGN="LEFT"/>test_chart_data_async_invalid_token()<br ALIGN="LEFT"/>test_chart_data_async_results_type()<br ALIGN="LEFT"/>test_chart_data_dttm_filter()<br ALIGN="LEFT"/>test_chart_data_invalid_post_processing()<br ALIGN="LEFT"/>test_chart_data_prophet()<br ALIGN="LEFT"/>test_chart_data_rowcount()<br ALIGN="LEFT"/>test_empty_request_with_csv_result_format()<br ALIGN="LEFT"/>test_empty_request_with_excel_result_format()<br ALIGN="LEFT"/>test_when_where_parameter_is_template_and_query_result_type__query_is_templated()<br ALIGN="LEFT"/>test_with_adhoc_column_without_metrics()<br ALIGN="LEFT"/>test_with_annotations_layers__annotations_data_returned()<br ALIGN="LEFT"/>test_with_csv_result_format()<br ALIGN="LEFT"/>test_with_csv_result_format_when_actor_not_permitted_for_csv__403()<br ALIGN="LEFT"/>test_with_excel_result_format()<br ALIGN="LEFT"/>test_with_excel_result_format_when_actor_not_permitted_for_excel__403()<br ALIGN="LEFT"/>test_with_filter_suppose_to_return_empty_data__no_data_returned()<br ALIGN="LEFT"/>test_with_in_op_filter__data_is_returned()<br ALIGN="LEFT"/>test_with_incorrect_result_format__400()<br ALIGN="LEFT"/>test_with_incorrect_result_type__400()<br ALIGN="LEFT"/>test_with_invalid_datasource__400()<br ALIGN="LEFT"/>test_with_invalid_having_parameter_closing_and_comment__400()<br ALIGN="LEFT"/>test_with_invalid_payload__400()<br ALIGN="LEFT"/>test_with_invalid_where_parameter__400()<br ALIGN="LEFT"/>test_with_invalid_where_parameter_closing_unclosed__400()<br ALIGN="LEFT"/>test_with_multi_query_csv_result_format()<br ALIGN="LEFT"/>test_with_multi_query_excel_result_format()<br ALIGN="LEFT"/>test_with_not_permitted_actor__403()<br ALIGN="LEFT"/>test_with_orderby_parameter_with_second_query__400()<br ALIGN="LEFT"/>test_with_query_result_type__200()<br ALIGN="LEFT"/>test_with_query_result_type_and_non_existent_filter__filter_omitted()<br ALIGN="LEFT"/>test_with_row_limit_and_offset__row_limit_and_offset_were_applied()<br ALIGN="LEFT"/>test_with_row_limit_as_samples__rowcount_as_row_limit()<br ALIGN="LEFT"/>test_with_row_limit_bigger_then_sql_max_row__rowcount_as_sql_max_row()<br ALIGN="LEFT"/>test_with_series_limit()<br ALIGN="LEFT"/>test_with_table_columns_without_metrics()<br ALIGN="LEFT"/>test_with_timegrains_and_columns_result_types()<br ALIGN="LEFT"/>test_with_valid_qc__data_is_returned(mock_g)<br ALIGN="LEFT"/>test_with_virtual_table_with_colons_as_datasource()<br ALIGN="LEFT"/>test_with_where_parameter_including_comment___200()<br ALIGN="LEFT"/>test_without_row_limit__row_count_as_default_row_limit()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.sql_validator_tests.TestPostgreSQLValidator" [color="black", fontcolor="black", label=<{TestPostgreSQLValidator|<br ALIGN="LEFT"/>|test_invalid_syntax()<br ALIGN="LEFT"/>test_valid_syntax()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.db_engine_specs.postgres_tests.TestPostgresDbEngineSpec" [color="black", fontcolor="black", label=<{TestPostgresDbEngineSpec|<br ALIGN="LEFT"/>|test_cancel_query(engine_mock)<br ALIGN="LEFT"/>test_cancel_query_failed(engine_mock)<br ALIGN="LEFT"/>test_empty_dbapi_cursor_description()<br ALIGN="LEFT"/>test_engine_alias_name()<br ALIGN="LEFT"/>test_estimate_statement_cost_select_star()<br ALIGN="LEFT"/>test_estimate_statement_invalid_syntax()<br ALIGN="LEFT"/>test_extract_errors()<br ALIGN="LEFT"/>test_extras_with_ssl_custom()<br ALIGN="LEFT"/>test_extras_with_ssl_default()<br ALIGN="LEFT"/>test_extras_without_ssl()<br ALIGN="LEFT"/>test_get_cancel_query_id(engine_mock)<br ALIGN="LEFT"/>test_get_table_names()<br ALIGN="LEFT"/>test_query_cost_formatter_example_costs()<br ALIGN="LEFT"/>test_time_ex_lowr_col_no_grain()<br ALIGN="LEFT"/>test_time_exp_literal_1y_grain()<br ALIGN="LEFT"/>test_time_exp_literal_no_grain()<br ALIGN="LEFT"/>test_time_exp_lowr_col_sec_1y()<br ALIGN="LEFT"/>test_time_exp_mixed_case_col_1y()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.db_engine_specs.presto_tests.TestPrestoDbEngineSpec" [color="black", fontcolor="black", label=<{TestPrestoDbEngineSpec|<br ALIGN="LEFT"/>|test_estimate_statement_cost()<br ALIGN="LEFT"/>test_estimate_statement_cost_invalid_syntax()<br ALIGN="LEFT"/>test_extract_error_message_db_error()<br ALIGN="LEFT"/>test_extract_error_message_general_exception()<br ALIGN="LEFT"/>test_extract_error_message_orig()<br ALIGN="LEFT"/>test_extract_errors()<br ALIGN="LEFT"/>test_get_create_view()<br ALIGN="LEFT"/>test_get_create_view_database_error()<br ALIGN="LEFT"/>test_get_create_view_exception()<br ALIGN="LEFT"/>test_get_datatype_presto()<br ALIGN="LEFT"/>test_get_full_name()<br ALIGN="LEFT"/>test_get_full_name_empty_tuple()<br ALIGN="LEFT"/>test_get_table_names(mock_get_view_names, mock_get_table_names)<br ALIGN="LEFT"/>test_get_view_names_with_schema()<br ALIGN="LEFT"/>test_get_view_names_without_schema()<br ALIGN="LEFT"/>test_is_column_name_quoted()<br ALIGN="LEFT"/>test_presto_expand_data_array()<br ALIGN="LEFT"/>test_presto_expand_data_with_complex_array_columns()<br ALIGN="LEFT"/>test_presto_expand_data_with_complex_row_columns()<br ALIGN="LEFT"/>test_presto_expand_data_with_complex_row_columns_and_null_values()<br ALIGN="LEFT"/>test_presto_expand_data_with_simple_structural_columns()<br ALIGN="LEFT"/>test_presto_get_array_within_row_within_array_column()<br ALIGN="LEFT"/>test_presto_get_column()<br ALIGN="LEFT"/>test_presto_get_extra_table_metadata()<br ALIGN="LEFT"/>test_presto_get_fields()<br ALIGN="LEFT"/>test_presto_get_row_within_array_within_row_column()<br ALIGN="LEFT"/>test_presto_get_simple_array_column()<br ALIGN="LEFT"/>test_presto_get_simple_row_column()<br ALIGN="LEFT"/>test_presto_get_simple_row_column_with_name_containing_whitespace()<br ALIGN="LEFT"/>test_presto_get_simple_row_column_with_tricky_nested_field_name()<br ALIGN="LEFT"/>test_presto_where_latest_partition()<br ALIGN="LEFT"/>test_query_cost_formatter()<br ALIGN="LEFT"/>test_select_star_no_presto_expand_data(mock_select_star)<br ALIGN="LEFT"/>test_select_star_presto_expand_data(mock_select_star, mock_is_feature_enabled)<br ALIGN="LEFT"/>test_show_columns()<br ALIGN="LEFT"/>test_show_columns_with_schema()<br ALIGN="LEFT"/>test_split_data_type()<br ALIGN="LEFT"/>verify_presto_column(column, expected_results)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.sql_validator_tests.TestPrestoValidator" [color="black", fontcolor="black", label=<{TestPrestoValidator|PRESTO_ERROR_TEMPLATE : dict<br ALIGN="LEFT"/>database : MagicMock<br ALIGN="LEFT"/>database_conn<br ALIGN="LEFT"/>database_cursor<br ALIGN="LEFT"/>database_engine<br ALIGN="LEFT"/>validator<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_validator_db_error(flask_g)<br ALIGN="LEFT"/>test_validator_query_error(flask_g)<br ALIGN="LEFT"/>test_validator_success(flask_g)<br ALIGN="LEFT"/>test_validator_unexpected_error(flask_g)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.queries.api_tests.TestQueryApi" [color="black", fontcolor="black", label=<{TestQueryApi|<br ALIGN="LEFT"/>|create_queries()<br ALIGN="LEFT"/>get_random_string(length: int)<br ALIGN="LEFT"/>insert_query(database_id: int, user_id: int, client_id: str, sql: str, select_sql: str, executed_sql: str, limit: int, progress: int, rows: int, tab_name: str, status: str, changed_on: datetime): Query<br ALIGN="LEFT"/>test_get_list_query()<br ALIGN="LEFT"/>test_get_list_query_filter_changed_on()<br ALIGN="LEFT"/>test_get_list_query_filter_database()<br ALIGN="LEFT"/>test_get_list_query_filter_sql()<br ALIGN="LEFT"/>test_get_list_query_filter_user()<br ALIGN="LEFT"/>test_get_list_query_no_data_access()<br ALIGN="LEFT"/>test_get_list_query_order()<br ALIGN="LEFT"/>test_get_query()<br ALIGN="LEFT"/>test_get_query_no_data_access()<br ALIGN="LEFT"/>test_get_query_not_found()<br ALIGN="LEFT"/>test_get_updated_since()<br ALIGN="LEFT"/>test_stop_query(mock_superset_db_session, mock_sql_lab_cancel_query)<br ALIGN="LEFT"/>test_stop_query_not_found(mock_superset_db_session, mock_sql_lab_cancel_query)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.query_context_tests.TestQueryContext" [color="black", fontcolor="black", label=<{TestQueryContext|<br ALIGN="LEFT"/>|test_cache()<br ALIGN="LEFT"/>test_convert_deprecated_fields()<br ALIGN="LEFT"/>test_csv_response_format()<br ALIGN="LEFT"/>test_fetch_values_predicate()<br ALIGN="LEFT"/>test_handle_metrics_field()<br ALIGN="LEFT"/>test_handle_sort_by_metrics()<br ALIGN="LEFT"/>test_processing_time_offsets_cache()<br ALIGN="LEFT"/>test_query_cache_key_changes_when_datasource_is_updated()<br ALIGN="LEFT"/>test_query_cache_key_changes_when_metric_is_updated()<br ALIGN="LEFT"/>test_query_cache_key_changes_when_post_processing_is_updated()<br ALIGN="LEFT"/>test_query_cache_key_changes_when_time_offsets_is_updated()<br ALIGN="LEFT"/>test_query_cache_key_does_not_change_for_non_existent_or_null()<br ALIGN="LEFT"/>test_query_object_unknown_fields()<br ALIGN="LEFT"/>test_query_response_type()<br ALIGN="LEFT"/>test_samples_response_type()<br ALIGN="LEFT"/>test_schema_deserialization()<br ALIGN="LEFT"/>test_sql_injection_via_columns()<br ALIGN="LEFT"/>test_sql_injection_via_groupby()<br ALIGN="LEFT"/>test_sql_injection_via_metrics()<br ALIGN="LEFT"/>test_time_offsets_accuracy()<br ALIGN="LEFT"/>test_time_offsets_in_query_object()<br ALIGN="LEFT"/>test_time_offsets_in_query_object_no_limit(query_result_mock)<br ALIGN="LEFT"/>test_time_offsets_sql()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.sql_lab.commands_tests.TestQueryEstimationCommand" [color="black", fontcolor="black", label=<{TestQueryEstimationCommand|<br ALIGN="LEFT"/>|test_run_success(): None<br ALIGN="LEFT"/>test_run_timeout(is_feature_enabled): None<br ALIGN="LEFT"/>test_validation_no_database(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.unit_tests.common.test_query_object_factory.TestQueryObjectFactory" [color="black", fontcolor="black", label=<{TestQueryObjectFactory|<br ALIGN="LEFT"/>|test_query_context_limit(query_object_factory: QueryObjectFactory, raw_query_context: dict[str, Any])<br ALIGN="LEFT"/>test_query_context_limit_and_offset_defaults(query_object_factory: QueryObjectFactory, raw_query_context: dict[str, Any])<br ALIGN="LEFT"/>test_query_context_null_post_processing_op(query_object_factory: QueryObjectFactory, raw_query_context: dict[str, Any])<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.db_engine_specs.redshift_tests.TestRedshiftDbEngineSpec" [color="black", fontcolor="black", label=<{TestRedshiftDbEngineSpec|<br ALIGN="LEFT"/>|test_df_to_sql_no_dtype()<br ALIGN="LEFT"/>test_df_to_sql_with_string_dtype()<br ALIGN="LEFT"/>test_extract_errors()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.cli.test_db.TestRegistry" [color="black", fontcolor="black", label=<{TestRegistry|tests : dict[str, Any]<br ALIGN="LEFT"/>|add(): Callable[[TestType], TestType]<br ALIGN="LEFT"/>get_tests(dialect: str): list[TestType]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.reports.api_tests.TestReportSchedulesApi" [color="black", fontcolor="black", label=<{TestReportSchedulesApi|<br ALIGN="LEFT"/>|create_alpha_users()<br ALIGN="LEFT"/>create_report_schedules()<br ALIGN="LEFT"/>create_working_admin_report_schedule()<br ALIGN="LEFT"/>create_working_gamma_report_schedule(gamma_user_with_alerts_role)<br ALIGN="LEFT"/>create_working_shared_report_schedule(gamma_user_with_alerts_role)<br ALIGN="LEFT"/>gamma_user_with_alerts_role()<br ALIGN="LEFT"/>test_bulk_delete_report_not_owned()<br ALIGN="LEFT"/>test_bulk_delete_report_schedule()<br ALIGN="LEFT"/>test_bulk_delete_report_schedule_not_found()<br ALIGN="LEFT"/>test_create_multiple_creation_method_report_schedule_charts()<br ALIGN="LEFT"/>test_create_multiple_creation_method_report_schedule_dashboards()<br ALIGN="LEFT"/>test_create_report_schedule()<br ALIGN="LEFT"/>test_create_report_schedule_chart_dash_validation()<br ALIGN="LEFT"/>test_create_report_schedule_chart_db_validation()<br ALIGN="LEFT"/>test_create_report_schedule_invalid_creation_method()<br ALIGN="LEFT"/>test_create_report_schedule_invalid_schedule()<br ALIGN="LEFT"/>test_create_report_schedule_relations_exist()<br ALIGN="LEFT"/>test_create_report_schedule_schema()<br ALIGN="LEFT"/>test_create_report_schedule_uniqueness()<br ALIGN="LEFT"/>test_create_report_schedule_valid_schedule()<br ALIGN="LEFT"/>test_create_report_schedule_with_invalid_anchors()<br ALIGN="LEFT"/>test_create_report_schedule_with_multiple_anchors()<br ALIGN="LEFT"/>test_delete_report_not_owned()<br ALIGN="LEFT"/>test_delete_report_schedule()<br ALIGN="LEFT"/>test_delete_report_schedule_not_found()<br ALIGN="LEFT"/>test_get_list_report_schedule()<br ALIGN="LEFT"/>test_get_list_report_schedule_filter_active()<br ALIGN="LEFT"/>test_get_list_report_schedule_filter_custom()<br ALIGN="LEFT"/>test_get_list_report_schedule_filter_name()<br ALIGN="LEFT"/>test_get_list_report_schedule_filter_type()<br ALIGN="LEFT"/>test_get_list_report_schedule_gamma()<br ALIGN="LEFT"/>test_get_list_report_schedule_logs()<br ALIGN="LEFT"/>test_get_list_report_schedule_logs_filters()<br ALIGN="LEFT"/>test_get_list_report_schedule_logs_sorting()<br ALIGN="LEFT"/>test_get_list_report_schedule_perms(username, report_names)<br ALIGN="LEFT"/>test_get_list_report_schedule_sorting()<br ALIGN="LEFT"/>test_get_related_report_schedule()<br ALIGN="LEFT"/>test_get_report_schedule()<br ALIGN="LEFT"/>test_get_report_schedule_disabled()<br ALIGN="LEFT"/>test_get_report_schedule_not_found()<br ALIGN="LEFT"/>test_info_report_schedule()<br ALIGN="LEFT"/>test_info_security_report()<br ALIGN="LEFT"/>test_no_dashboard_report_schedule_schema()<br ALIGN="LEFT"/>test_report_schedule_logs_no_mutations()<br ALIGN="LEFT"/>test_unsaved_report_schedule_schema()<br ALIGN="LEFT"/>test_update_report_clear_owner_list()<br ALIGN="LEFT"/>test_update_report_not_owned()<br ALIGN="LEFT"/>test_update_report_populate_owner()<br ALIGN="LEFT"/>test_update_report_preserve_ownership()<br ALIGN="LEFT"/>test_update_report_schedule()<br ALIGN="LEFT"/>test_update_report_schedule_chart_dash_validation()<br ALIGN="LEFT"/>test_update_report_schedule_invalid_schedule(): None<br ALIGN="LEFT"/>test_update_report_schedule_not_found()<br ALIGN="LEFT"/>test_update_report_schedule_relations_exist()<br ALIGN="LEFT"/>test_update_report_schedule_state_working()<br ALIGN="LEFT"/>test_update_report_schedule_uniqueness()<br ALIGN="LEFT"/>test_update_report_schedule_valid_schedule(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.security_tests.TestRolePermission" [color="black", fontcolor="black", label=<{TestRolePermission|<br ALIGN="LEFT"/>|assert_can_admin(perm_set)<br ALIGN="LEFT"/>assert_can_all(view_menu, permissions_set)<br ALIGN="LEFT"/>assert_can_alpha(perm_set)<br ALIGN="LEFT"/>assert_can_gamma(perm_set)<br ALIGN="LEFT"/>assert_can_menu(view_menu, permissions_set)<br ALIGN="LEFT"/>assert_can_read(view_menu, permissions_set)<br ALIGN="LEFT"/>assert_can_write(view_menu, permissions_set)<br ALIGN="LEFT"/>assert_cannot_alpha(perm_set)<br ALIGN="LEFT"/>assert_cannot_gamma(perm_set)<br ALIGN="LEFT"/>assert_cannot_menu(view_menu, permissions_set)<br ALIGN="LEFT"/>assert_cannot_write(view_menu, permissions_set)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_admin_permissions()<br ALIGN="LEFT"/>test_after_delete_database()<br ALIGN="LEFT"/>test_after_delete_database_rollback()<br ALIGN="LEFT"/>test_after_delete_dataset()<br ALIGN="LEFT"/>test_after_delete_dataset_rollback()<br ALIGN="LEFT"/>test_after_insert_database()<br ALIGN="LEFT"/>test_after_insert_database_rollback()<br ALIGN="LEFT"/>test_after_insert_dataset()<br ALIGN="LEFT"/>test_after_insert_dataset_rollback()<br ALIGN="LEFT"/>test_after_insert_dataset_table_none()<br ALIGN="LEFT"/>test_after_update_database__perm_database_access()<br ALIGN="LEFT"/>test_after_update_database__perm_database_access_exists()<br ALIGN="LEFT"/>test_after_update_database__perm_datasource_access()<br ALIGN="LEFT"/>test_after_update_database_rollback()<br ALIGN="LEFT"/>test_after_update_dataset__db_changes()<br ALIGN="LEFT"/>test_after_update_dataset__name_changes()<br ALIGN="LEFT"/>test_after_update_dataset__name_db_changes()<br ALIGN="LEFT"/>test_after_update_dataset__schema_changes()<br ALIGN="LEFT"/>test_after_update_dataset__schema_none()<br ALIGN="LEFT"/>test_after_update_dataset_rollback()<br ALIGN="LEFT"/>test_alpha_permissions()<br ALIGN="LEFT"/>test_gamma_permissions()<br ALIGN="LEFT"/>test_gamma_permissions_basic()<br ALIGN="LEFT"/>test_gamma_user_schema_access_to_dashboards()<br ALIGN="LEFT"/>test_hybrid_perm_database()<br ALIGN="LEFT"/>test_is_admin_only()<br ALIGN="LEFT"/>test_is_alpha_only()<br ALIGN="LEFT"/>test_is_gamma_pvm()<br ALIGN="LEFT"/>test_public_permissions_basic()<br ALIGN="LEFT"/>test_public_sync_role_builtin_perms()<br ALIGN="LEFT"/>test_public_sync_role_data_perms()<br ALIGN="LEFT"/>test_schemas_accessible_by_user_admin(mock_sm_g, mock_g)<br ALIGN="LEFT"/>test_schemas_accessible_by_user_datasource_access()<br ALIGN="LEFT"/>test_schemas_accessible_by_user_datasource_and_schema_access()<br ALIGN="LEFT"/>test_schemas_accessible_by_user_schema_access(mock_sm_g, mock_g)<br ALIGN="LEFT"/>test_set_perm_slice()<br ALIGN="LEFT"/>test_sql_lab_permissions()<br ALIGN="LEFT"/>test_sqllab_gamma_user_schema_access_to_sqllab()<br ALIGN="LEFT"/>test_views_are_secured()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.viz_tests.TestRoseVis" [color="black", fontcolor="black", label=<{TestRoseVis|<br ALIGN="LEFT"/>|test_rose_vis_get_data()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.security.row_level_security_tests.TestRowLevelSecurity" [color="black", fontcolor="black", label=<{TestRowLevelSecurity|BASE_FILTER_REGEX<br ALIGN="LEFT"/>NAMES_A_REGEX<br ALIGN="LEFT"/>NAMES_B_REGEX<br ALIGN="LEFT"/>NAMES_Q_REGEX<br ALIGN="LEFT"/>NAME_AB_ROLE : str<br ALIGN="LEFT"/>NAME_Q_ROLE : str<br ALIGN="LEFT"/>query_obj : dict[str, Any]<br ALIGN="LEFT"/>rls_entry : NoneType<br ALIGN="LEFT"/>rls_entry1<br ALIGN="LEFT"/>rls_entry2<br ALIGN="LEFT"/>rls_entry3<br ALIGN="LEFT"/>rls_entry4<br ALIGN="LEFT"/>role_ab<br ALIGN="LEFT"/>role_q<br ALIGN="LEFT"/>|create_dataset()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_get_rls_cache_key()<br ALIGN="LEFT"/>test_model_view_rls_add_name_unique()<br ALIGN="LEFT"/>test_model_view_rls_add_success()<br ALIGN="LEFT"/>test_model_view_rls_add_tables_required()<br ALIGN="LEFT"/>test_multiple_table_filter_alters_another_tables_query()<br ALIGN="LEFT"/>test_rls_filter_alters_energy_query()<br ALIGN="LEFT"/>test_rls_filter_alters_gamma_birth_names_query()<br ALIGN="LEFT"/>test_rls_filter_alters_no_role_user_birth_names_query()<br ALIGN="LEFT"/>test_rls_filter_doesnt_alter_admin_birth_names_query()<br ALIGN="LEFT"/>test_rls_filter_doesnt_alter_energy_query()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.security.row_level_security_tests.TestRowLevelSecurityCreateAPI" [color="black", fontcolor="black", label=<{TestRowLevelSecurityCreateAPI|<br ALIGN="LEFT"/>|test_invalid_role_failure()<br ALIGN="LEFT"/>test_invalid_table_failure()<br ALIGN="LEFT"/>test_post_success()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.security.row_level_security_tests.TestRowLevelSecurityDeleteAPI" [color="black", fontcolor="black", label=<{TestRowLevelSecurityDeleteAPI|<br ALIGN="LEFT"/>|test_bulk_delete_success()<br ALIGN="LEFT"/>test_invalid_id_failure()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.security.row_level_security_tests.TestRowLevelSecurityUpdateAPI" [color="black", fontcolor="black", label=<{TestRowLevelSecurityUpdateAPI|<br ALIGN="LEFT"/>|test_invalid_id_failure()<br ALIGN="LEFT"/>test_invalid_role_failure()<br ALIGN="LEFT"/>test_invalid_table_failure()<br ALIGN="LEFT"/>test_put_success()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.security.row_level_security_tests.TestRowLevelSecurityWithRelatedAPI" [color="black", fontcolor="black", label=<{TestRowLevelSecurityWithRelatedAPI|<br ALIGN="LEFT"/>|test_get_all_related_roles_with_with_extra_filters()<br ALIGN="LEFT"/>test_rls_roles_related_api()<br ALIGN="LEFT"/>test_rls_tables_related_api()<br ALIGN="LEFT"/>test_table_related_filter()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.queries.saved_queries.api_tests.TestSavedQueryApi" [color="black", fontcolor="black", label=<{TestSavedQueryApi|<br ALIGN="LEFT"/>|create_saved_queries()<br ALIGN="LEFT"/>create_saved_queries_some_with_tags(create_custom_tags)<br ALIGN="LEFT"/>create_saved_query_import()<br ALIGN="LEFT"/>insert_default_saved_query(label: str, schema: str, username: str): SavedQuery<br ALIGN="LEFT"/>insert_saved_query(label: str, sql: str, db_id: Optional[int], created_by, schema: Optional[str], description: Optional[str]): SavedQuery<br ALIGN="LEFT"/>test_create_saved_query()<br ALIGN="LEFT"/>test_delete_bulk_saved_queries()<br ALIGN="LEFT"/>test_delete_bulk_saved_query_bad_request()<br ALIGN="LEFT"/>test_delete_bulk_saved_query_not_found()<br ALIGN="LEFT"/>test_delete_one_bulk_saved_queries()<br ALIGN="LEFT"/>test_delete_saved_query()<br ALIGN="LEFT"/>test_delete_saved_query_not_found()<br ALIGN="LEFT"/>test_distinct_saved_query()<br ALIGN="LEFT"/>test_export()<br ALIGN="LEFT"/>test_export_not_allowed()<br ALIGN="LEFT"/>test_export_not_found()<br ALIGN="LEFT"/>test_get_list_custom_filter_description_saved_query()<br ALIGN="LEFT"/>test_get_list_custom_filter_label_saved_query()<br ALIGN="LEFT"/>test_get_list_custom_filter_schema_saved_query()<br ALIGN="LEFT"/>test_get_list_custom_filter_sql_saved_query()<br ALIGN="LEFT"/>test_get_list_filter_database_saved_query()<br ALIGN="LEFT"/>test_get_list_filter_saved_query()<br ALIGN="LEFT"/>test_get_list_filter_schema_saved_query()<br ALIGN="LEFT"/>test_get_list_saved_query()<br ALIGN="LEFT"/>test_get_list_saved_query_gamma()<br ALIGN="LEFT"/>test_get_list_sort_saved_query()<br ALIGN="LEFT"/>test_get_saved_queries_tag_filters()<br ALIGN="LEFT"/>test_get_saved_query()<br ALIGN="LEFT"/>test_get_saved_query_favorite_filter()<br ALIGN="LEFT"/>test_get_saved_query_not_allowed()<br ALIGN="LEFT"/>test_get_saved_query_not_found()<br ALIGN="LEFT"/>test_import_saved_queries(mock_add_permissions)<br ALIGN="LEFT"/>test_info_saved_query()<br ALIGN="LEFT"/>test_info_security_saved_query()<br ALIGN="LEFT"/>test_related_saved_query()<br ALIGN="LEFT"/>test_related_saved_query_not_found()<br ALIGN="LEFT"/>test_update_saved_query()<br ALIGN="LEFT"/>test_update_saved_query_not_found()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.charts.schema_tests.TestSchema" [color="black", fontcolor="black", label=<{TestSchema|<br ALIGN="LEFT"/>|test_query_context_limit_and_offset()<br ALIGN="LEFT"/>test_query_context_null_timegrain()<br ALIGN="LEFT"/>test_query_context_series_limit()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.security.api_tests.TestSecurityCsrfApi" [color="black", fontcolor="black", label=<{TestSecurityCsrfApi|resource_name : str<br ALIGN="LEFT"/>|test_get_csrf_token()<br ALIGN="LEFT"/>test_get_csrf_token_gamma()<br ALIGN="LEFT"/>test_get_csrf_unauthorized()<br ALIGN="LEFT"/>test_login()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.security.api_tests.TestSecurityGuestTokenApi" [color="black", fontcolor="black", label=<{TestSecurityGuestTokenApi|dash<br ALIGN="LEFT"/>embedded<br ALIGN="LEFT"/>uri : str<br ALIGN="LEFT"/>|test_post_guest_token_authorized()<br ALIGN="LEFT"/>test_post_guest_token_bad_resources()<br ALIGN="LEFT"/>test_post_guest_token_unauthenticated()<br ALIGN="LEFT"/>test_post_guest_token_unauthorized()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.security.api_tests.TestSecurityGuestTokenApiTokenValidator" [color="black", fontcolor="black", label=<{TestSecurityGuestTokenApiTokenValidator|embedded<br ALIGN="LEFT"/>uri : str<br ALIGN="LEFT"/>|test_guest_token_validator_hook_denied()<br ALIGN="LEFT"/>test_guest_token_validator_hook_denied_allowed()<br ALIGN="LEFT"/>test_guest_validator_hook_not_callable()<br ALIGN="LEFT"/>test_guest_validator_hook_real_world_example_negative()<br ALIGN="LEFT"/>test_guest_validator_hook_real_world_example_positive()<br ALIGN="LEFT"/>test_guest_validator_hook_throws_exception()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.security_tests.TestSecurityManager" [color="black", fontcolor="black", label=<{TestSecurityManager|<br ALIGN="LEFT"/>|test_all_database_access()<br ALIGN="LEFT"/>test_can_access_datasource(mock_raise_for_access)<br ALIGN="LEFT"/>test_can_access_table(mock_raise_for_access)<br ALIGN="LEFT"/>test_get_anonymous_roles()<br ALIGN="LEFT"/>test_get_user_roles()<br ALIGN="LEFT"/>test_raise_for_access_datasource(mock_can_access_schema, mock_can_access, mock_is_owner)<br ALIGN="LEFT"/>test_raise_for_access_query(mock_can_access, mock_is_owner)<br ALIGN="LEFT"/>test_raise_for_access_query_context(mock_can_access_schema, mock_can_access, mock_is_owner)<br ALIGN="LEFT"/>test_raise_for_access_rbac(mock_can_access_schema, mock_can_access, mock_is_owner)<br ALIGN="LEFT"/>test_raise_for_access_sql(mock_can_access, mock_is_owner)<br ALIGN="LEFT"/>test_raise_for_access_sql_fails()<br ALIGN="LEFT"/>test_raise_for_access_table(mock_can_access)<br ALIGN="LEFT"/>test_raise_for_access_viz(mock_can_access_schema, mock_can_access, mock_is_owner)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.security.api_tests.TestSecurityRolesApi" [color="black", fontcolor="black", label=<{TestSecurityRolesApi|uri : str<br ALIGN="LEFT"/>|test_delete_security_roles_gamma()<br ALIGN="LEFT"/>test_get_security_roles_admin()<br ALIGN="LEFT"/>test_get_security_roles_gamma()<br ALIGN="LEFT"/>test_post_security_roles_gamma()<br ALIGN="LEFT"/>test_put_security_roles_gamma()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.sql_lab.commands_tests.TestSqlExecutionResultsCommand" [color="black", fontcolor="black", label=<{TestSqlExecutionResultsCommand|<br ALIGN="LEFT"/>|create_database_and_query()<br ALIGN="LEFT"/>test_run_succeeds(): None<br ALIGN="LEFT"/>test_validation_data_cannot_be_retrieved(): None<br ALIGN="LEFT"/>test_validation_data_not_found(): None<br ALIGN="LEFT"/>test_validation_no_results_backend(): None<br ALIGN="LEFT"/>test_validation_query_not_found(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.sqllab_tests.TestSqlLab" [color="black", fontcolor="black", label=<{TestSqlLab|<br ALIGN="LEFT"/>|run_some_queries()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_alias_duplicate()<br ALIGN="LEFT"/>test_api_database()<br ALIGN="LEFT"/>test_apply_limit_if_exists_when_increased_limit()<br ALIGN="LEFT"/>test_apply_limit_if_exists_when_incremented_limit_is_none()<br ALIGN="LEFT"/>test_execute_sql_statements(mock_execute_sql_statement, mock_get_query, mock_db)<br ALIGN="LEFT"/>test_execute_sql_statements_ctas(mock_execute_sql_statement, mock_get_query, mock_db)<br ALIGN="LEFT"/>test_execute_sql_statements_no_results_backend(mock_execute_sql_statement, mock_get_query)<br ALIGN="LEFT"/>test_explain()<br ALIGN="LEFT"/>test_multi_sql()<br ALIGN="LEFT"/>test_pa_conversion_dict()<br ALIGN="LEFT"/>test_pa_conversion_tuple()<br ALIGN="LEFT"/>test_ps_conversion_no_dict()<br ALIGN="LEFT"/>test_query_admin_can_access_all_queries(): None<br ALIGN="LEFT"/>test_query_api_can_access_all_queries(): None<br ALIGN="LEFT"/>test_query_api_can_access_sql_editor_id_associated_queries(): None<br ALIGN="LEFT"/>test_query_api_filter(): None<br ALIGN="LEFT"/>test_sql_json()<br ALIGN="LEFT"/>test_sql_json_cta_dynamic_db(ctas_method)<br ALIGN="LEFT"/>test_sql_json_dml_disallowed()<br ALIGN="LEFT"/>test_sql_json_has_access()<br ALIGN="LEFT"/>test_sql_json_parameter_authorized()<br ALIGN="LEFT"/>test_sql_json_parameter_error()<br ALIGN="LEFT"/>test_sql_json_parameter_forbidden()<br ALIGN="LEFT"/>test_sql_json_schema_access()<br ALIGN="LEFT"/>test_sql_json_soft_timeout()<br ALIGN="LEFT"/>test_sql_limit()<br ALIGN="LEFT"/>test_sqllab_has_access()<br ALIGN="LEFT"/>test_sqllab_no_access()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.sql_lab.api_tests.TestSqlLabApi" [color="black", fontcolor="black", label=<{TestSqlLabApi|<br ALIGN="LEFT"/>|test_delete_tab_already_removed()<br ALIGN="LEFT"/>test_deleted_tab()<br ALIGN="LEFT"/>test_estimate_required_params()<br ALIGN="LEFT"/>test_estimate_valid_request()<br ALIGN="LEFT"/>test_execute_custom_templated(sql_lab_mock, mock_dt): None<br ALIGN="LEFT"/>test_execute_required_params()<br ALIGN="LEFT"/>test_execute_valid_request(): None<br ALIGN="LEFT"/>test_export_results(get_df_mock: mock.Mock): None<br ALIGN="LEFT"/>test_format_sql_request()<br ALIGN="LEFT"/>test_get_access_denied()<br ALIGN="LEFT"/>test_get_from_bootstrap_data_for_non_persisted_tab_state()<br ALIGN="LEFT"/>test_get_from_bootstrap_data_with_latest_query()<br ALIGN="LEFT"/>test_get_from_empty_bootstrap_data()<br ALIGN="LEFT"/>test_get_results_with_display_limit()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.sql_lab.commands_tests.TestSqlResultExportCommand" [color="black", fontcolor="black", label=<{TestSqlResultExportCommand|<br ALIGN="LEFT"/>|create_database_and_query()<br ALIGN="LEFT"/>test_run_no_results_backend_executed_sql(get_df_mock: Mock): None<br ALIGN="LEFT"/>test_run_no_results_backend_executed_sql_limiting_factor(get_df_mock: Mock): None<br ALIGN="LEFT"/>test_run_no_results_backend_select_sql(get_df_mock: Mock): None<br ALIGN="LEFT"/>test_run_with_results_backend(): None<br ALIGN="LEFT"/>test_validation_invalid_access(): None<br ALIGN="LEFT"/>test_validation_query_not_found(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.model_tests.TestSqlaTableModel" [color="black", fontcolor="black", label=<{TestSqlaTableModel|<br ALIGN="LEFT"/>|query_with_expr_helper(is_timeseries, inner_join)<br ALIGN="LEFT"/>test_data_for_slices_with_adhoc_column()<br ALIGN="LEFT"/>test_data_for_slices_with_no_query_context()<br ALIGN="LEFT"/>test_data_for_slices_with_query_context()<br ALIGN="LEFT"/>test_get_timestamp_expression()<br ALIGN="LEFT"/>test_get_timestamp_expression_epoch()<br ALIGN="LEFT"/>test_query_label_without_group_by()<br ALIGN="LEFT"/>test_query_with_expr_groupby()<br ALIGN="LEFT"/>test_query_with_expr_groupby_timeseries()<br ALIGN="LEFT"/>test_query_with_non_existent_metrics()<br ALIGN="LEFT"/>test_sql_mutator()<br ALIGN="LEFT"/>test_sql_mutator_different_params()<br ALIGN="LEFT"/>test_table_column_database(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.stats_logger_tests.TestStatsdStatsLogger" [color="black", fontcolor="black", label=<{TestStatsdStatsLogger|<br ALIGN="LEFT"/>|test_init_with_params()<br ALIGN="LEFT"/>test_init_with_statsd_client()<br ALIGN="LEFT"/>verify_client_calls(logger, client)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.result_set_tests.TestSupersetResultSet" [color="black", fontcolor="black", label=<{TestSupersetResultSet|<br ALIGN="LEFT"/>|test_data_as_list_of_lists()<br ALIGN="LEFT"/>test_dedup()<br ALIGN="LEFT"/>test_dedup_with_data()<br ALIGN="LEFT"/>test_empty_data()<br ALIGN="LEFT"/>test_empty_datetime()<br ALIGN="LEFT"/>test_get_columns_basic()<br ALIGN="LEFT"/>test_get_columns_type_inference()<br ALIGN="LEFT"/>test_get_columns_with_int()<br ALIGN="LEFT"/>test_int64_with_missing_data()<br ALIGN="LEFT"/>test_is_date()<br ALIGN="LEFT"/>test_nested_list_types()<br ALIGN="LEFT"/>test_nested_types()<br ALIGN="LEFT"/>test_no_type_coercion()<br ALIGN="LEFT"/>test_nullable_bool()<br ALIGN="LEFT"/>test_single_column_multidim_nested_types()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.databases.commands_tests.TestTablesDatabaseCommand" [color="black", fontcolor="black", label=<{TestTablesDatabaseCommand|<br ALIGN="LEFT"/>|test_database_tables_exception(mock_g, mock_can_access_database, mock_find_by_id)<br ALIGN="LEFT"/>test_database_tables_list_tables(mock_g, mock_can_access_database, mock_find_by_id)<br ALIGN="LEFT"/>test_database_tables_list_with_unknown_database(mock_find_by_id)<br ALIGN="LEFT"/>test_database_tables_superset_exception(mock_g, mock_can_access_database, mock_find_by_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.tags.api_tests.TestTagApi" [color="black", fontcolor="black", label=<{TestTagApi|<br ALIGN="LEFT"/>|create_tags()<br ALIGN="LEFT"/>insert_tag(name: str, tag_type: str): Tag<br ALIGN="LEFT"/>insert_tagged_object(tag_id: int, object_id: int, object_type: ObjectType): TaggedObject<br ALIGN="LEFT"/>test_add_tag_not_found()<br ALIGN="LEFT"/>test_add_tag_user_not_found(flask_g)<br ALIGN="LEFT"/>test_add_tagged_objects()<br ALIGN="LEFT"/>test_delete_favorite_tag()<br ALIGN="LEFT"/>test_delete_favorite_tag_not_found()<br ALIGN="LEFT"/>test_delete_favorite_tag_user_not_found(flask_g)<br ALIGN="LEFT"/>test_delete_tagged_objects()<br ALIGN="LEFT"/>test_delete_tags()<br ALIGN="LEFT"/>test_failed_put_tag()<br ALIGN="LEFT"/>test_get_all_objects()<br ALIGN="LEFT"/>test_get_list_tag()<br ALIGN="LEFT"/>test_get_list_tag_filtered()<br ALIGN="LEFT"/>test_get_objects_by_tag()<br ALIGN="LEFT"/>test_get_tag()<br ALIGN="LEFT"/>test_get_tag_not_found()<br ALIGN="LEFT"/>test_post_bulk_tag()<br ALIGN="LEFT"/>test_post_bulk_tag_skipped_tags_perm()<br ALIGN="LEFT"/>test_post_tag()<br ALIGN="LEFT"/>test_post_tag_no_name_400()<br ALIGN="LEFT"/>test_put_tag()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.tagging_tests.TestTagging" [color="black", fontcolor="black", label=<{TestTagging|<br ALIGN="LEFT"/>|clear_tagged_object_table()<br ALIGN="LEFT"/>query_tagged_object_table()<br ALIGN="LEFT"/>test_chart_tagging()<br ALIGN="LEFT"/>test_dashboard_tagging()<br ALIGN="LEFT"/>test_dataset_tagging()<br ALIGN="LEFT"/>test_favorite_tagging()<br ALIGN="LEFT"/>test_saved_query_tagging()<br ALIGN="LEFT"/>test_tagging_system()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.tags.dao_tests.TestTagsDAO" [color="black", fontcolor="black", label=<{TestTagsDAO|<br ALIGN="LEFT"/>|create_tagged_objects()<br ALIGN="LEFT"/>create_tags()<br ALIGN="LEFT"/>insert_tag(name: str, tag_type: str): Tag<br ALIGN="LEFT"/>insert_tagged_object(tag_id: int, object_id: int, object_type: ObjectType): TaggedObject<br ALIGN="LEFT"/>test_create_tagged_objects()<br ALIGN="LEFT"/>test_delete_tagged_object()<br ALIGN="LEFT"/>test_delete_tags()<br ALIGN="LEFT"/>test_find_by_name()<br ALIGN="LEFT"/>test_find_tagged_object()<br ALIGN="LEFT"/>test_get_by_name()<br ALIGN="LEFT"/>test_get_objects_from_tag()<br ALIGN="LEFT"/>test_get_objects_from_tag_with_id()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.databases.commands_tests.TestTestConnectionDatabaseCommand" [color="black", fontcolor="black", label=<{TestTestConnectionDatabaseCommand|<br ALIGN="LEFT"/>|test_connection_db_api_exc(mock_g, mock_event_logger, mock_get_sqla_engine)<br ALIGN="LEFT"/>test_connection_db_exception(mock_g, mock_event_logger, mock_get_sqla_engine)<br ALIGN="LEFT"/>test_connection_do_ping_exception(mock_g, mock_event_logger, mock_get_sqla_engine)<br ALIGN="LEFT"/>test_connection_do_ping_timeout(mock_g, mock_event_logger, mock_func_timeout)<br ALIGN="LEFT"/>test_connection_superset_security_connection(mock_g, mock_event_logger, mock_get_sqla_engine)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.thumbnails_tests.TestThumbnails" [color="black", fontcolor="black", label=<{TestThumbnails|digest_hash : str<br ALIGN="LEFT"/>digest_return_value : str<br ALIGN="LEFT"/>mock_image : bytes<br ALIGN="LEFT"/>|test_chart_thumbnail_disabled()<br ALIGN="LEFT"/>test_dashboard_thumbnail_disabled()<br ALIGN="LEFT"/>test_get_async_chart_notfound()<br ALIGN="LEFT"/>test_get_async_chart_screenshot_as_current_user()<br ALIGN="LEFT"/>test_get_async_chart_screenshot_as_fixed_user()<br ALIGN="LEFT"/>test_get_async_dashboard_not_allowed()<br ALIGN="LEFT"/>test_get_async_dashboard_notfound()<br ALIGN="LEFT"/>test_get_async_dashboard_screenshot_as_current_user()<br ALIGN="LEFT"/>test_get_async_dashboard_screenshot_as_fixed_user()<br ALIGN="LEFT"/>test_get_cached_chart_screenshot()<br ALIGN="LEFT"/>test_get_cached_chart_wrong_digest()<br ALIGN="LEFT"/>test_get_cached_dashboard_screenshot()<br ALIGN="LEFT"/>test_get_cached_dashboard_wrong_digest()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.thumbnails_tests.TestThumbnailsSeleniumLive" [color="black", fontcolor="black", label=<{TestThumbnailsSeleniumLive|<br ALIGN="LEFT"/>|create_app()<br ALIGN="LEFT"/>test_get_async_dashboard_screenshot()<br ALIGN="LEFT"/>url_open_auth(username: str, url: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.viz_tests.TestTimeSeriesTableViz" [color="black", fontcolor="black", label=<{TestTimeSeriesTableViz|<br ALIGN="LEFT"/>|test_get_data_group_by()<br ALIGN="LEFT"/>test_get_data_metrics()<br ALIGN="LEFT"/>test_query_obj_order_by()<br ALIGN="LEFT"/>test_query_obj_throws_metrics_and_groupby(super_query_obj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.viz_tests.TestTimeSeriesViz" [color="black", fontcolor="black", label=<{TestTimeSeriesViz|<br ALIGN="LEFT"/>|test_apply_rolling()<br ALIGN="LEFT"/>test_apply_rolling_without_data()<br ALIGN="LEFT"/>test_process_data_resample()<br ALIGN="LEFT"/>test_timeseries_unicode_data()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.databases.ssh_tunnel.commands.commands_tests.TestUpdateSSHTunnelCommand" [color="black", fontcolor="black", label=<{TestUpdateSSHTunnelCommand|<br ALIGN="LEFT"/>|test_update_ssh_tunnel_not_found(mock_g)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.users.api_tests.TestUserApi" [color="black", fontcolor="black", label=<{TestUserApi|<br ALIGN="LEFT"/>|test_avatar_valid_user_no_avatar()<br ALIGN="LEFT"/>test_avatar_with_invalid_user()<br ALIGN="LEFT"/>test_avatar_with_valid_user(mock)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.utils_tests.TestUtils" [color="black", fontcolor="black", label=<{TestUtils|<br ALIGN="LEFT"/>|test_as_list()<br ALIGN="LEFT"/>test_base_json_conv()<br ALIGN="LEFT"/>test_cast_to_num(): None<br ALIGN="LEFT"/>test_convert_legacy_filters_into_adhoc_filters()<br ALIGN="LEFT"/>test_convert_legacy_filters_into_adhoc_having()<br ALIGN="LEFT"/>test_convert_legacy_filters_into_adhoc_present_and_empty()<br ALIGN="LEFT"/>test_convert_legacy_filters_into_adhoc_present_and_nonempty()<br ALIGN="LEFT"/>test_convert_legacy_filters_into_adhoc_where()<br ALIGN="LEFT"/>test_extract_dataframe_dtypes()<br ALIGN="LEFT"/>test_format_timedelta()<br ALIGN="LEFT"/>test_get_email_address_list()<br ALIGN="LEFT"/>test_get_form_data_corrupted_json(): None<br ALIGN="LEFT"/>test_get_form_data_default(): None<br ALIGN="LEFT"/>test_get_form_data_globals(): None<br ALIGN="LEFT"/>test_get_form_data_request_args(): None<br ALIGN="LEFT"/>test_get_form_data_request_args_and_form(): None<br ALIGN="LEFT"/>test_get_form_data_request_form(): None<br ALIGN="LEFT"/>test_get_form_data_request_form_with_queries(): None<br ALIGN="LEFT"/>test_get_form_data_token()<br ALIGN="LEFT"/>test_get_or_create_db()<br ALIGN="LEFT"/>test_get_or_create_db_existing_invalid_uri()<br ALIGN="LEFT"/>test_get_or_create_db_invalid_uri()<br ALIGN="LEFT"/>test_get_stacktrace()<br ALIGN="LEFT"/>test_json_int_dttm_ser()<br ALIGN="LEFT"/>test_json_iso_dttm_ser()<br ALIGN="LEFT"/>test_log_this(): None<br ALIGN="LEFT"/>test_merge_extra_filters()<br ALIGN="LEFT"/>test_merge_extra_filters_adds_unequal_lists()<br ALIGN="LEFT"/>test_merge_extra_filters_ignores_empty_filters()<br ALIGN="LEFT"/>test_merge_extra_filters_ignores_equal_filters()<br ALIGN="LEFT"/>test_merge_extra_filters_ignores_nones()<br ALIGN="LEFT"/>test_merge_extra_filters_merges_different_val_types()<br ALIGN="LEFT"/>test_merge_extra_filters_when_applied_time_extras_predefined()<br ALIGN="LEFT"/>test_merge_extra_filters_with_extras()<br ALIGN="LEFT"/>test_merge_extra_filters_with_no_extras()<br ALIGN="LEFT"/>test_merge_extra_filters_with_unset_legacy_time_range()<br ALIGN="LEFT"/>test_merge_request_params_when_url_params_predefined()<br ALIGN="LEFT"/>test_merge_request_params_when_url_params_undefined()<br ALIGN="LEFT"/>test_normalize_dttm_col()<br ALIGN="LEFT"/>test_parse_js_uri_path_items_eval_undefined()<br ALIGN="LEFT"/>test_parse_js_uri_path_items_item_optional()<br ALIGN="LEFT"/>test_parse_js_uri_path_items_unquote()<br ALIGN="LEFT"/>test_schema_one_of_case_insensitive()<br ALIGN="LEFT"/>test_schema_validate_json()<br ALIGN="LEFT"/>test_split()<br ALIGN="LEFT"/>test_ssl_certificate_file_creation()<br ALIGN="LEFT"/>test_ssl_certificate_parse()<br ALIGN="LEFT"/>test_validate_json()<br ALIGN="LEFT"/>test_zlib_compression()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.thumbnails_tests.TestWebDriverScreenshotErrorDetector" [color="black", fontcolor="black", label=<{TestWebDriverScreenshotErrorDetector|<br ALIGN="LEFT"/>|test_call_find_unexpected_errors_if_feature_enabled(mock_find_unexpected_errors, mock_firefox, mock_webdriver_wait)<br ALIGN="LEFT"/>test_find_unexpected_errors(mock_webdriver_wait)<br ALIGN="LEFT"/>test_find_unexpected_errors_no_alert()<br ALIGN="LEFT"/>test_not_call_find_unexpected_errors_if_feature_disabled(mock_find_unexpected_errors, mock_firefox, mock_webdriver_wait)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.integration_tests.thumbnails_tests.TestWebDriverSelenium" [color="black", fontcolor="black", label=<{TestWebDriverSelenium|<br ALIGN="LEFT"/>|test_screenshot_selenium_animation_wait(mock_sleep, mock_webdriver, mock_webdriver_wait)<br ALIGN="LEFT"/>test_screenshot_selenium_headstart(mock_sleep, mock_webdriver, mock_webdriver_wait)<br ALIGN="LEFT"/>test_screenshot_selenium_load_wait(mock_webdriver, mock_webdriver_wait)<br ALIGN="LEFT"/>test_screenshot_selenium_locate_wait(mock_webdriver, mock_webdriver_wait)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.tests.unit_tests.db_engine_specs.test_base.test_extra_table_metadata.ThirdPartyDBEngineSpec" [color="black", fontcolor="black", label=<{ThirdPartyDBEngineSpec|<br ALIGN="LEFT"/>|extra_table_metadata(database: Database, table_name: str, schema_name: str \| None): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.chart.exceptions.TimeDeltaAmbiguousError" [color="black", fontcolor="red", label=<{TimeDeltaAmbiguousError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.jinja_context.TimeFilter" [color="black", fontcolor="black", label=<{TimeFilter|from_expr : str \| None<br ALIGN="LEFT"/>time_range : str \| None<br ALIGN="LEFT"/>to_expr : str \| None<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.constants.TimeGrain" [color="black", fontcolor="black", label=<{TimeGrain|DAY : str<br ALIGN="LEFT"/>FIFTEEN_MINUTES : str<br ALIGN="LEFT"/>FIVE_MINUTES : str<br ALIGN="LEFT"/>FIVE_SECONDS : str<br ALIGN="LEFT"/>HALF_HOUR : str<br ALIGN="LEFT"/>HOUR : str<br ALIGN="LEFT"/>MINUTE : str<br ALIGN="LEFT"/>MONTH : str<br ALIGN="LEFT"/>QUARTER : str<br ALIGN="LEFT"/>QUARTER_YEAR : str<br ALIGN="LEFT"/>SECOND : str<br ALIGN="LEFT"/>SIX_HOURS : str<br ALIGN="LEFT"/>TEN_MINUTES : str<br ALIGN="LEFT"/>THIRTY_MINUTES : str<br ALIGN="LEFT"/>THIRTY_SECONDS : str<br ALIGN="LEFT"/>WEEK : str<br ALIGN="LEFT"/>WEEK_ENDING_SATURDAY : str<br ALIGN="LEFT"/>WEEK_ENDING_SUNDAY : str<br ALIGN="LEFT"/>WEEK_STARTING_MONDAY : str<br ALIGN="LEFT"/>WEEK_STARTING_SUNDAY : str<br ALIGN="LEFT"/>YEAR : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.base.TimeGrain" [color="black", fontcolor="black", label=<{TimeGrain|duration : str \| None<br ALIGN="LEFT"/>function : str<br ALIGN="LEFT"/>label : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.chart.exceptions.TimeRangeAmbiguousError" [color="black", fontcolor="red", label=<{TimeRangeAmbiguousError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.chart.exceptions.TimeRangeParseFailError" [color="black", fontcolor="red", label=<{TimeRangeParseFailError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.sql_types.presto_sql_types.TimeStamp" [color="black", fontcolor="black", label=<{TimeStamp|impl : TIMESTAMP<br ALIGN="LEFT"/>|process_bind_param(value: str, dialect: Dialect): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.viz.TimeTableViz" [color="black", fontcolor="black", label=<{TimeTableViz|credits : str<br ALIGN="LEFT"/>is_timeseries : bool<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>query_obj(): QueryObjectDict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.core.TimerTimeout" [color="black", fontcolor="black", label=<{TimerTimeout|error_message : str<br ALIGN="LEFT"/>seconds : int<br ALIGN="LEFT"/>timer : Timer<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.shared.migrate_viz.processors.TimeseriesChart" [color="black", fontcolor="black", label=<{TimeseriesChart|has_x_axis_control : bool<br ALIGN="LEFT"/>remove_keys : set<br ALIGN="LEFT"/>rename_keys : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.base.TimestampExpression" [color="black", fontcolor="black", label=<{TimestampExpression|col : ColumnClause<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.sql_types.presto_sql_types.TinyInteger" [color="black", fontcolor="black", label=<{TinyInteger|python_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tasks.cache.TopNDashboardsStrategy" [color="black", fontcolor="black", label=<{TopNDashboardsStrategy|name : str<br ALIGN="LEFT"/>since<br ALIGN="LEFT"/>top_n : int<br ALIGN="LEFT"/>|get_tasks(): list[CacheWarmupTask]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.extensions.pylint.TransactionChecker" [color="black", fontcolor="black", label=<{TransactionChecker|msgs : dict<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|visit_call(node: nodes.Call): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.trino.TrinoAuthError" [color="black", fontcolor="red", label=<{TrinoAuthError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.trino.TrinoEngineSpec" [color="black", fontcolor="black", label=<{TrinoEngineSpec|allows_alias_to_source_column : bool<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>oauth2_exception<br ALIGN="LEFT"/>oauth2_token_request_type : str<br ALIGN="LEFT"/>supports_oauth2 : bool<br ALIGN="LEFT"/>|cancel_query(cursor: Cursor, query: Query, cancel_query_id: str): bool<br ALIGN="LEFT"/>execute_with_cursor(cursor: Cursor, sql: str, query: Query): None<br ALIGN="LEFT"/>get_allow_cost_estimate(extra: dict[str, Any]): bool<br ALIGN="LEFT"/>get_columns(inspector: Inspector, table: Table, options: dict[str, Any] \| None): list[ResultSetColumnType]<br ALIGN="LEFT"/>get_dbapi_exception_mapping(): dict[type[Exception], type[Exception]]<br ALIGN="LEFT"/>get_extra_params(database: Database): dict[str, Any]<br ALIGN="LEFT"/>get_extra_table_metadata(database: Database, table: Table): dict[str, Any]<br ALIGN="LEFT"/>get_indexes(database: Database, inspector: Inspector, table: Table): list[dict[str, Any]]<br ALIGN="LEFT"/>get_tracking_url(cursor: Cursor): str \| None<br ALIGN="LEFT"/>get_url_for_impersonation(url: URL, impersonate_user: bool, username: str \| None, access_token: str \| None): URL<br ALIGN="LEFT"/>handle_cursor(cursor: Cursor, query: Query): None<br ALIGN="LEFT"/>prepare_cancel_query(query: Query): None<br ALIGN="LEFT"/>update_impersonation_config(database: Database, connect_args: dict[str, Any], uri: str, username: str \| None, access_token: str \| None): None<br ALIGN="LEFT"/>update_params_from_encrypted_extra(database: Database, params: dict[str, Any]): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.jinja_context.TrinoTemplateProcessor" [color="black", fontcolor="black", label=<{TrinoTemplateProcessor|engine : str<br ALIGN="LEFT"/>|process_template(sql: str): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.extensions.UIManifestProcessor" [color="black", fontcolor="black", label=<{UIManifestProcessor|app : Optional[Flask]<br ALIGN="LEFT"/>manifest : dict[str, dict[str, list[str]]]<br ALIGN="LEFT"/>manifest_file : str<br ALIGN="LEFT"/>|get_manifest(): dict[str, Callable[[str], list[str]]]<br ALIGN="LEFT"/>get_manifest_files(bundle: str, asset_type: str): list[str]<br ALIGN="LEFT"/>init_app(app: Flask): None<br ALIGN="LEFT"/>parse_manifest_json(): None<br ALIGN="LEFT"/>register_processor(app: Flask): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.UUIDMixin" [color="black", fontcolor="black", label=<{UUIDMixin|uuid<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.helpers.UUIDMixin" [color="black", fontcolor="black", label=<{UUIDMixin|short_uuid<br ALIGN="LEFT"/>uuid<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.async_events.async_query_manager.UnsupportedCacheBackendError" [color="black", fontcolor="red", label=<{UnsupportedCacheBackendError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.annotation_layer.annotation.update.UpdateAnnotationCommand" [color="black", fontcolor="black", label=<{UpdateAnnotationCommand|<br ALIGN="LEFT"/>|run(): Model<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.annotation_layer.update.UpdateAnnotationLayerCommand" [color="black", fontcolor="black", label=<{UpdateAnnotationLayerCommand|<br ALIGN="LEFT"/>|run(): Model<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.chart.update.UpdateChartCommand" [color="black", fontcolor="black", label=<{UpdateChartCommand|<br ALIGN="LEFT"/>|run(): Model<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.update.UpdateDashboardColorsConfigCommand" [color="black", fontcolor="black", label=<{UpdateDashboardColorsConfigCommand|<br ALIGN="LEFT"/>|run(): Model<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.update.UpdateDashboardCommand" [color="black", fontcolor="black", label=<{UpdateDashboardCommand|<br ALIGN="LEFT"/>|process_tab_diff(): None<br ALIGN="LEFT"/>run(): Model<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.update.UpdateDashboardNativeFiltersCommand" [color="black", fontcolor="black", label=<{UpdateDashboardNativeFiltersCommand|<br ALIGN="LEFT"/>|run(): Model<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.database.update.UpdateDatabaseCommand" [color="black", fontcolor="black", label=<{UpdateDatabaseCommand|<br ALIGN="LEFT"/>|run(): Model<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.dataset.update.UpdateDatasetCommand" [color="black", fontcolor="black", label=<{UpdateDatasetCommand|override_columns : Optional[bool]<br ALIGN="LEFT"/>|run(): Model<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.exceptions.UpdateFailedError" [color="black", fontcolor="red", label=<{UpdateFailedError|message : str<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dashboard.filter_state.update.UpdateFilterStateCommand" [color="black", fontcolor="black", label=<{UpdateFilterStateCommand|<br ALIGN="LEFT"/>|update(cmd_params: CommandParameters): Optional[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.explore.form_data.update.UpdateFormDataCommand" [color="black", fontcolor="black", label=<{UpdateFormDataCommand|<br ALIGN="LEFT"/>|run(): Optional[str]<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.base.UpdateMixin" [color="black", fontcolor="black", label=<{UpdateMixin|<br ALIGN="LEFT"/>|compute_owners(current_owners: Optional[list[User]], new_owners: Optional[list[int]]): list[User]<br ALIGN="LEFT"/>populate_owners(owner_ids: Optional[list[int]]): list[User]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.security.update.UpdateRLSRuleCommand" [color="black", fontcolor="black", label=<{UpdateRLSRuleCommand|<br ALIGN="LEFT"/>|run(): Any<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.report.update.UpdateReportScheduleCommand" [color="black", fontcolor="black", label=<{UpdateReportScheduleCommand|<br ALIGN="LEFT"/>|run(): Model<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.database.ssh_tunnel.update.UpdateSSHTunnelCommand" [color="black", fontcolor="black", label=<{UpdateSSHTunnelCommand|<br ALIGN="LEFT"/>|run(): Optional[Model]<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.tag.update.UpdateTagCommand" [color="black", fontcolor="black", label=<{UpdateTagCommand|<br ALIGN="LEFT"/>|run(): Model<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.temporary_cache.update.UpdateTemporaryCacheCommand" [color="black", fontcolor="black", label=<{UpdateTemporaryCacheCommand|<br ALIGN="LEFT"/>|run(): Optional[str]<br ALIGN="LEFT"/><I>update</I>(cmd_params: CommandParameters): Optional[str]<br ALIGN="LEFT"/><I>validate</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.database.uploaders.base.UploadCommand" [color="black", fontcolor="black", label=<{UploadCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.databases.schemas.UploadFileMetadata" [color="black", fontcolor="black", label=<{UploadFileMetadata|items : List<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.UploadFileMetadataItemSchema" [color="black", fontcolor="black", label=<{UploadFileMetadataItemSchema|column_names : List<br ALIGN="LEFT"/>sheet_name : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2017-02-08_14-16_a99f2f7c195a_rewriting_url_from_shortner_with_new_.Url" [color="black", fontcolor="black", label=<{Url|id<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2016-06-27_08-43_27ae655e4247_make_creator_owners.User" [color="black", fontcolor="black", label=<{User|id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2018-07-26_11-10_c82ee8a39623_add_implicit_tags.User" [color="black", fontcolor="black", label=<{User|id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.models.user_attributes.UserAttribute" [color="black", fontcolor="black", label=<{UserAttribute|avatar_url<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>welcome_dashboard<br ALIGN="LEFT"/>welcome_dashboard_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.tags.filters.UserCreatedTagTypeFilter" [color="black", fontcolor="black", label=<{UserCreatedTagTypeFilter|arg_name : str<br ALIGN="LEFT"/>name : LazyString<br ALIGN="LEFT"/>|apply(query: Query, value: bool): Query<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.daos.user.UserDAO" [color="black", fontcolor="black", label=<{UserDAO|<br ALIGN="LEFT"/>|get_by_id(user_id: int): User<br ALIGN="LEFT"/>set_avatar_url(user: User, url: str): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.views.users.schemas.UserResponseSchema" [color="black", fontcolor="black", label=<{UserResponseSchema|email : String<br ALIGN="LEFT"/>first_name : String<br ALIGN="LEFT"/>id : Integer<br ALIGN="LEFT"/>is_active : Boolean<br ALIGN="LEFT"/>is_anonymous : Boolean<br ALIGN="LEFT"/>last_name : String<br ALIGN="LEFT"/>username : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.users.api.UserRestApi" [color="black", fontcolor="black", label=<{UserRestApi|openapi_spec_component_schemas : tuple<br ALIGN="LEFT"/>openapi_spec_tag : str<br ALIGN="LEFT"/>resource_name : str<br ALIGN="LEFT"/>|avatar(user_id: int): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.dashboards.schemas.UserSchema" [color="black", fontcolor="black", label=<{UserSchema|first_name : String<br ALIGN="LEFT"/>id : Integer<br ALIGN="LEFT"/>last_name : String<br ALIGN="LEFT"/>username : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.security.api.UserSchema" [color="black", fontcolor="black", label=<{UserSchema|first_name : String<br ALIGN="LEFT"/>last_name : String<br ALIGN="LEFT"/>username : String<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.integration_tests.utils.cache_manager_tests.UtilsCacheManagerTests" [color="black", fontcolor="black", label=<{UtilsCacheManagerTests|<br ALIGN="LEFT"/>|test_get_explore_form_data_cache_invalid_key()<br ALIGN="LEFT"/>test_get_same_context_twice()<br ALIGN="LEFT"/>test_get_set_explore_form_data_cache()<br ALIGN="LEFT"/>test_get_set_explore_form_data_cache_no_datasource_type()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.database.validate.ValidateDatabaseParametersCommand" [color="black", fontcolor="black", label=<{ValidateDatabaseParametersCommand|<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.commands.database.validate_sql.ValidateSQLCommand" [color="black", fontcolor="black", label=<{ValidateSQLCommand|<br ALIGN="LEFT"/>|run(): list[dict[str, Any]]<br ALIGN="LEFT"/>validate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.databases.schemas.ValidateSQLRequest" [color="black", fontcolor="black", label=<{ValidateSQLRequest|catalog : String<br ALIGN="LEFT"/>schema : String<br ALIGN="LEFT"/>sql : String<br ALIGN="LEFT"/>template_params : Dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.databases.schemas.ValidateSQLResponse" [color="black", fontcolor="black", label=<{ValidateSQLResponse|end_column : Integer<br ALIGN="LEFT"/>line_number : Integer<br ALIGN="LEFT"/>message : String<br ALIGN="LEFT"/>start_column : Integer<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2020-10-05_18-10_af30ca79208f_collapse_alerting_models_into_a_single_.Validator" [color="black", fontcolor="black", label=<{Validator|alert<br ALIGN="LEFT"/>alert_id<br ALIGN="LEFT"/>config<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>validator_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.reports.schemas.ValidatorConfigJSONSchema" [color="black", fontcolor="black", label=<{ValidatorConfigJSONSchema|op : String<br ALIGN="LEFT"/>threshold : Float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.ValidatorSQL400Error" [color="black", fontcolor="black", label=<{ValidatorSQL400Error|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.ValidatorSQLError" [color="black", fontcolor="black", label=<{ValidatorSQLError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.database.exceptions.ValidatorSQLUnexpectedError" [color="black", fontcolor="black", label=<{ValidatorSQLUnexpectedError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.vertica.VerticaEngineSpec" [color="black", fontcolor="black", label=<{VerticaEngineSpec|engine : str<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.shared.security_converge.ViewMenu" [color="black", fontcolor="black", label=<{ViewMenu|id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2020-09-24_12-04_3fbbc6e8d654_fix_data_access_permissions_for_virtual_.ViewMenu" [color="black", fontcolor="black", label=<{ViewMenu|id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.migrations.versions.2022-05-18_16-07_e786798587de_delete_none_permissions.ViewMenu" [color="black", fontcolor="black", label=<{ViewMenu|id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.cli.viz_migrations.VizType" [color="black", fontcolor="black", label=<{VizType|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.chart.exceptions.WarmUpCacheChartNotFoundError" [color="black", fontcolor="black", label=<{WarmUpCacheChartNotFoundError|message<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.commands.dataset.exceptions.WarmUpCacheTableNotFoundError" [color="black", fontcolor="black", label=<{WarmUpCacheTableNotFoundError|message : LazyString<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.utils.webdriver.WebDriverPlaywright" [color="black", fontcolor="black", label=<{WebDriverPlaywright|<br ALIGN="LEFT"/>|auth(user: User, context: BrowserContext): BrowserContext<br ALIGN="LEFT"/>find_unexpected_errors(page: Page): list[str]<br ALIGN="LEFT"/>get_screenshot(url: str, element_name: str, user: User): bytes \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.webdriver.WebDriverProxy" [color="black", fontcolor="black", label=<{WebDriverProxy|<br ALIGN="LEFT"/>|<I>get_screenshot</I>(url: str, element_name: str, user: User): bytes \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.utils.webdriver.WebDriverSelenium" [color="black", fontcolor="black", label=<{WebDriverSelenium|<br ALIGN="LEFT"/>|auth(user: User): WebDriver<br ALIGN="LEFT"/>create(): WebDriver<br ALIGN="LEFT"/>destroy(driver: WebDriver, tries: int): None<br ALIGN="LEFT"/>find_unexpected_errors(driver: WebDriver): list[str]<br ALIGN="LEFT"/>get_screenshot(url: str, element_name: str, user: User): bytes \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.jinja_context.WhereInMacro" [color="black", fontcolor="black", label=<{WhereInMacro|dialect : Dialect<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.viz.WorldMapViz" [color="black", fontcolor="black", label=<{WorldMapViz|credits : str<br ALIGN="LEFT"/>is_timeseries : bool<br ALIGN="LEFT"/>verbose_name : LazyString<br ALIGN="LEFT"/>viz_type : str<br ALIGN="LEFT"/>|get_data(df: pd.DataFrame): VizData<br ALIGN="LEFT"/>query_obj(): QueryObjectDict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.explore.exceptions.WrongEndpointError" [color="black", fontcolor="black", label=<{WrongEndpointError|redirect : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.views.base.XlsxResponse" [color="black", fontcolor="black", label=<{XlsxResponse|charset : str<br ALIGN="LEFT"/>default_mimetype : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.ydb.YDBEngineSpec" [color="black", fontcolor="black", label=<{YDBEngineSpec|allows_alias_in_orderby : bool<br ALIGN="LEFT"/>default_driver : str<br ALIGN="LEFT"/>disable_ssh_tunneling : bool<br ALIGN="LEFT"/>encrypted_extra_sensitive_fields : set<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>engine_aliases : set<br ALIGN="LEFT"/>engine_name : str<br ALIGN="LEFT"/>sqlalchemy_uri_placeholder : str<br ALIGN="LEFT"/>supports_file_upload : bool<br ALIGN="LEFT"/>|convert_dttm(target_type: str, dttm: datetime, db_extra: dict[str, Any] \| None): str \| None<br ALIGN="LEFT"/>epoch_to_dttm(): str<br ALIGN="LEFT"/>update_params_from_encrypted_extra(database: Database, params: dict[str, Any]): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.trino.TrinoEngineSpec.get_dbapi_exception_mapping._CustomMapping" [color="black", fontcolor="black", label=<{_CustomMapping|<br ALIGN="LEFT"/>|get(item: type[Exception], default: type[Exception] \| None): type[Exception] \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.db_engine_specs.denodo._ErrorPatterns" [color="black", fontcolor="black", label=<{_ErrorPatterns|CONN_FORBIDDEN_DATABASE_REGEX<br ALIGN="LEFT"/>CONN_INVALID_HOSTNAME_REGEX<br ALIGN="LEFT"/>CONN_INVALID_PWD_NEEDED_REGEX<br ALIGN="LEFT"/>CONN_INVALID_USER_PWD_REGEX<br ALIGN="LEFT"/>CONN_PORT_CLOSED_REGEX<br ALIGN="LEFT"/>CONN_UNKNOWN_DATABASE_REGEX<br ALIGN="LEFT"/>QUERY_COLUMN_NOT_EXIST_REGEX<br ALIGN="LEFT"/>QUERY_GROUPBY_CANT_PROJ_REGEX<br ALIGN="LEFT"/>QUERY_GROUPBY_ERROR_REGEX<br ALIGN="LEFT"/>QUERY_SYNTAX_ERROR_REGEX<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"superset.tests.integration_tests.conftest.example_db_provider._example_db_provider" [color="black", fontcolor="black", label=<{_example_db_provider|<br ALIGN="LEFT"/>|remove(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"superset.superset.charts.schemas.ChartDataAggregateOptionsSchema" -> "superset.superset.charts.schemas.ChartDataPostProcessingOperationOptionsSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.charts.schemas.ChartDataBoxplotOptionsSchema" -> "superset.superset.charts.schemas.ChartDataPostProcessingOperationOptionsSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.charts.schemas.ChartDataContributionOptionsSchema" -> "superset.superset.charts.schemas.ChartDataPostProcessingOperationOptionsSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.charts.schemas.ChartDataGeodeticParseOptionsSchema" -> "superset.superset.charts.schemas.ChartDataPostProcessingOperationOptionsSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.charts.schemas.ChartDataGeohashDecodeOptionsSchema" -> "superset.superset.charts.schemas.ChartDataPostProcessingOperationOptionsSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.charts.schemas.ChartDataGeohashEncodeOptionsSchema" -> "superset.superset.charts.schemas.ChartDataPostProcessingOperationOptionsSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.charts.schemas.ChartDataPivotOptionsSchema" -> "superset.superset.charts.schemas.ChartDataPostProcessingOperationOptionsSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.charts.schemas.ChartDataProphetOptionsSchema" -> "superset.superset.charts.schemas.ChartDataPostProcessingOperationOptionsSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.charts.schemas.ChartDataRollingOptionsSchema" -> "superset.superset.charts.schemas.ChartDataPostProcessingOperationOptionsSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.charts.schemas.ChartDataSelectOptionsSchema" -> "superset.superset.charts.schemas.ChartDataPostProcessingOperationOptionsSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.charts.schemas.ChartDataSortOptionsSchema" -> "superset.superset.charts.schemas.ChartDataPostProcessingOperationOptionsSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.chart.exceptions.ChartDeleteFailedReportsExistError" -> "superset.superset.commands.chart.exceptions.ChartDeleteFailedError" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.dashboard.exceptions.DashboardDeleteFailedReportsExistError" -> "superset.superset.commands.dashboard.exceptions.DashboardDeleteFailedError" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.dashboard.update.UpdateDashboardColorsConfigCommand" -> "superset.superset.commands.dashboard.update.UpdateDashboardCommand" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.dashboard.update.UpdateDashboardNativeFiltersCommand" -> "superset.superset.commands.dashboard.update.UpdateDashboardCommand" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.database.exceptions.DatabaseConnectionFailedError" -> "superset.superset.commands.database.exceptions.DatabaseCreateFailedError" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.database.exceptions.DatabaseConnectionFailedError" -> "superset.superset.commands.database.exceptions.DatabaseUpdateFailedError" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.database.exceptions.DatabaseDeleteFailedReportsExistError" -> "superset.superset.commands.database.exceptions.DatabaseDeleteFailedError" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelCreateFailedError" -> "superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelError" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelDatabasePortError" -> "superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelError" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelDeleteFailedError" -> "superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelError" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelInvalidCredentials" -> "superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelError" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelInvalidError" -> "superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelError" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelMissingCredentials" -> "superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelError" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelNotFoundError" -> "superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelError" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelRequiredFieldValidationError" -> "superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelError" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelUpdateFailedError" -> "superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelError" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelingNotEnabledError" -> "superset.superset.commands.database.ssh_tunnel.exceptions.SSHTunnelError" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.exceptions.CommandInvalidError" -> "superset.superset.commands.exceptions.CommandException" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.exceptions.CreateFailedError" -> "superset.superset.commands.exceptions.CommandException" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.exceptions.DeleteFailedError" -> "superset.superset.commands.exceptions.CommandException" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.exceptions.ForbiddenError" -> "superset.superset.commands.exceptions.CommandException" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.exceptions.ImportFailedError" -> "superset.superset.commands.exceptions.CommandException" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.exceptions.ObjectNotFoundError" -> "superset.superset.commands.exceptions.CommandException" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.exceptions.TagForbiddenError" -> "superset.superset.commands.exceptions.ForbiddenError" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.exceptions.UpdateFailedError" -> "superset.superset.commands.exceptions.CommandException" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.report.execute.ReportNotTriggeredErrorState" -> "superset.superset.commands.report.execute.BaseReportState" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.report.execute.ReportSuccessState" -> "superset.superset.commands.report.execute.BaseReportState" [arrowhead="empty", arrowtail="none"];
"superset.superset.commands.report.execute.ReportWorkingState" -> "superset.superset.commands.report.execute.BaseReportState" [arrowhead="empty", arrowtail="none"];
"superset.superset.connectors.sqla.models.AnnotationDatasource" -> "superset.superset.connectors.sqla.models.BaseDatasource" [arrowhead="empty", arrowtail="none"];
"superset.superset.connectors.sqla.models.SqlaTable" -> "superset.superset.connectors.sqla.models.BaseDatasource" [arrowhead="empty", arrowtail="none"];
"superset.superset.daos.exceptions.DatasourceNotFound" -> "superset.superset.daos.exceptions.DAOException" [arrowhead="empty", arrowtail="none"];
"superset.superset.daos.exceptions.DatasourceTypeNotSupportedError" -> "superset.superset.daos.exceptions.DAOException" [arrowhead="empty", arrowtail="none"];
"superset.superset.dashboards.schemas.DashboardColorsConfigUpdateSchema" -> "superset.superset.dashboards.schemas.BaseDashboardSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.dashboards.schemas.DashboardNativeFiltersConfigUpdateSchema" -> "superset.superset.dashboards.schemas.BaseDashboardSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.dashboards.schemas.DashboardPostSchema" -> "superset.superset.dashboards.schemas.BaseDashboardSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.dashboards.schemas.DashboardPutSchema" -> "superset.superset.dashboards.schemas.BaseDashboardSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.databases.schemas.BaseUploadPostSchema" -> "superset.superset.databases.schemas.BaseUploadFilePostSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.databases.schemas.CSVMetadataUploadFilePostSchema" -> "superset.superset.databases.schemas.BaseUploadFilePostSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.databases.schemas.CSVUploadPostSchema" -> "superset.superset.databases.schemas.BaseUploadPostSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.databases.schemas.ColumnarMetadataUploadFilePostSchema" -> "superset.superset.databases.schemas.BaseUploadFilePostSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.databases.schemas.ColumnarUploadPostSchema" -> "superset.superset.databases.schemas.BaseUploadPostSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.databases.schemas.DatabasePostSchema" -> "superset.superset.databases.schemas.DatabaseParametersSchemaMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.databases.schemas.DatabasePutSchema" -> "superset.superset.databases.schemas.DatabaseParametersSchemaMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.databases.schemas.DatabaseTestConnectionSchema" -> "superset.superset.databases.schemas.DatabaseParametersSchemaMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.databases.schemas.ExcelMetadataUploadFilePostSchema" -> "superset.superset.databases.schemas.BaseUploadFilePostSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.databases.schemas.ExcelUploadPostSchema" -> "superset.superset.databases.schemas.BaseUploadPostSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.databases.types.EncryptedDict" -> "superset.superset.databases.types.EncryptedField" [arrowhead="empty", arrowtail="none"];
"superset.superset.databases.types.EncryptedString" -> "superset.superset.databases.types.EncryptedField" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.clickhouse.ClickHouseConnectEngineSpec" -> "superset.superset.db_engine_specs.clickhouse.ClickHouseEngineSpec" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.clickhouse.ClickHouseEngineSpec" -> "superset.superset.db_engine_specs.clickhouse.ClickHouseBaseEngineSpec" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.databend.DatabendConnectEngineSpec" -> "superset.superset.db_engine_specs.databend.DatabendEngineSpec" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.databend.DatabendEngineSpec" -> "superset.superset.db_engine_specs.databend.DatabendBaseEngineSpec" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.databricks.DatabricksDynamicBaseEngineSpec" -> "superset.superset.db_engine_specs.databricks.DatabricksBaseEngineSpec" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.databricks.DatabricksNativeEngineSpec" -> "superset.superset.db_engine_specs.databricks.DatabricksDynamicBaseEngineSpec" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.databricks.DatabricksNativeParametersType" -> "superset.superset.db_engine_specs.databricks.DatabricksBaseParametersType" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.databricks.DatabricksNativePropertiesSchema" -> "superset.superset.db_engine_specs.databricks.DatabricksNativeSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.databricks.DatabricksNativeSchema" -> "superset.superset.db_engine_specs.databricks.DatabricksBaseSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.databricks.DatabricksODBCEngineSpec" -> "superset.superset.db_engine_specs.databricks.DatabricksBaseEngineSpec" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.databricks.DatabricksPythonConnectorEngineSpec" -> "superset.superset.db_engine_specs.databricks.DatabricksDynamicBaseEngineSpec" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.databricks.DatabricksPythonConnectorParametersType" -> "superset.superset.db_engine_specs.databricks.DatabricksBaseParametersType" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.databricks.DatabricksPythonConnectorSchema" -> "superset.superset.db_engine_specs.databricks.DatabricksBaseSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.duckdb.DuckDBEngineSpec" -> "superset.superset.db_engine_specs.duckdb.DuckDBParametersMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.duckdb.MotherDuckEngineSpec" -> "superset.superset.db_engine_specs.duckdb.DuckDBEngineSpec" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.exceptions.SupersetDBAPIConnectionError" -> "superset.superset.db_engine_specs.exceptions.SupersetDBAPIError" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.exceptions.SupersetDBAPIDataError" -> "superset.superset.db_engine_specs.exceptions.SupersetDBAPIError" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.exceptions.SupersetDBAPIDatabaseError" -> "superset.superset.db_engine_specs.exceptions.SupersetDBAPIError" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.exceptions.SupersetDBAPIOperationalError" -> "superset.superset.db_engine_specs.exceptions.SupersetDBAPIError" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.exceptions.SupersetDBAPIProgrammingError" -> "superset.superset.db_engine_specs.exceptions.SupersetDBAPIError" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.ibmi.IBMiEngineSpec" -> "superset.superset.db_engine_specs.db2.Db2EngineSpec" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.mssql.AzureSynapseSpec" -> "superset.superset.db_engine_specs.mssql.MssqlEngineSpec" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.postgres.PostgresEngineSpec" -> "superset.superset.db_engine_specs.postgres.PostgresBaseEngineSpec" [arrowhead="empty", arrowtail="none"];
"superset.superset.db_engine_specs.presto.PrestoEngineSpec" -> "superset.superset.db_engine_specs.presto.PrestoBaseEngineSpec" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.AdvancedDataTypeResponseError" -> "superset.superset.exceptions.SupersetException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.CacheLoadError" -> "superset.superset.exceptions.SupersetException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.CertificateException" -> "superset.superset.exceptions.SupersetException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.ColumnNotFoundException" -> "superset.superset.exceptions.SupersetException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.DashboardImportException" -> "superset.superset.exceptions.SupersetException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.DatabaseNotFound" -> "superset.superset.exceptions.SupersetException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.DatabaseNotFoundException" -> "superset.superset.exceptions.SupersetErrorException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.DatasetInvalidPermissionEvaluationException" -> "superset.superset.exceptions.SupersetException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.DisallowedSQLFunction" -> "superset.superset.exceptions.SupersetErrorException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.InvalidPayloadFormatError" -> "superset.superset.exceptions.SupersetErrorException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.InvalidPayloadSchemaError" -> "superset.superset.exceptions.SupersetErrorException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.InvalidPostProcessingError" -> "superset.superset.exceptions.SupersetException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.MissingUserContextException" -> "superset.superset.exceptions.SupersetException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.NoDataException" -> "superset.superset.exceptions.SupersetException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.NullValueException" -> "superset.superset.exceptions.SupersetException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.OAuth2Error" -> "superset.superset.exceptions.SupersetErrorException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.OAuth2RedirectError" -> "superset.superset.exceptions.SupersetErrorException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.QueryClauseValidationException" -> "superset.superset.exceptions.SupersetException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.QueryNotFoundException" -> "superset.superset.exceptions.SupersetException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.QueryObjectValidationError" -> "superset.superset.exceptions.SupersetException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.SerializationError" -> "superset.superset.exceptions.SupersetException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.SpatialException" -> "superset.superset.exceptions.SupersetException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.SupersetCancelQueryException" -> "superset.superset.exceptions.SupersetException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.SupersetErrorException" -> "superset.superset.exceptions.SupersetException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.SupersetErrorFromParamsException" -> "superset.superset.exceptions.SupersetErrorException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.SupersetErrorsException" -> "superset.superset.exceptions.SupersetException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.SupersetGenericDBErrorException" -> "superset.superset.exceptions.SupersetErrorFromParamsException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.SupersetGenericErrorException" -> "superset.superset.exceptions.SupersetErrorException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.SupersetMarshmallowValidationError" -> "superset.superset.exceptions.SupersetErrorException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.SupersetParseError" -> "superset.superset.exceptions.SupersetErrorException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.SupersetSecurityException" -> "superset.superset.exceptions.SupersetErrorException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.SupersetSyntaxErrorException" -> "superset.superset.exceptions.SupersetErrorsException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.SupersetTemplateException" -> "superset.superset.exceptions.SupersetException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.SupersetTemplateParamsErrorException" -> "superset.superset.exceptions.SupersetErrorFromParamsException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.SupersetTimeoutException" -> "superset.superset.exceptions.SupersetErrorFromParamsException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.SupersetVizException" -> "superset.superset.exceptions.SupersetErrorsException" [arrowhead="empty", arrowtail="none"];
"superset.superset.exceptions.TableNotFoundException" -> "superset.superset.exceptions.SupersetErrorException" [arrowhead="empty", arrowtail="none"];
"superset.superset.jinja_context.HiveTemplateProcessor" -> "superset.superset.jinja_context.PrestoTemplateProcessor" [arrowhead="empty", arrowtail="none"];
"superset.superset.jinja_context.JinjaTemplateProcessor" -> "superset.superset.jinja_context.BaseTemplateProcessor" [arrowhead="empty", arrowtail="none"];
"superset.superset.jinja_context.NoOpTemplateProcessor" -> "superset.superset.jinja_context.BaseTemplateProcessor" [arrowhead="empty", arrowtail="none"];
"superset.superset.jinja_context.PrestoTemplateProcessor" -> "superset.superset.jinja_context.JinjaTemplateProcessor" [arrowhead="empty", arrowtail="none"];
"superset.superset.jinja_context.SparkTemplateProcessor" -> "superset.superset.jinja_context.HiveTemplateProcessor" [arrowhead="empty", arrowtail="none"];
"superset.superset.jinja_context.TrinoTemplateProcessor" -> "superset.superset.jinja_context.PrestoTemplateProcessor" [arrowhead="empty", arrowtail="none"];
"superset.superset.key_value.exceptions.KeyValueCodecDecodeException" -> "superset.superset.key_value.exceptions.KeyValueCodecException" [arrowhead="empty", arrowtail="none"];
"superset.superset.key_value.exceptions.KeyValueCodecEncodeException" -> "superset.superset.key_value.exceptions.KeyValueCodecException" [arrowhead="empty", arrowtail="none"];
"superset.superset.key_value.types.JsonKeyValueCodec" -> "superset.superset.key_value.types.KeyValueCodec" [arrowhead="empty", arrowtail="none"];
"superset.superset.key_value.types.MarshmallowKeyValueCodec" -> "superset.superset.key_value.types.JsonKeyValueCodec" [arrowhead="empty", arrowtail="none"];
"superset.superset.key_value.types.PickleKeyValueCodec" -> "superset.superset.key_value.types.KeyValueCodec" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.shared.migrate_viz.processors.MigrateAreaChart" -> "superset.superset.migrations.shared.migrate_viz.processors.TimeseriesChart" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.shared.migrate_viz.processors.MigrateBarChart" -> "superset.superset.migrations.shared.migrate_viz.processors.TimeseriesChart" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.shared.migrate_viz.processors.MigrateBubbleChart" -> "superset.superset.migrations.shared.migrate_viz.base.MigrateViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.shared.migrate_viz.processors.MigrateDistBarChart" -> "superset.superset.migrations.shared.migrate_viz.processors.TimeseriesChart" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.shared.migrate_viz.processors.MigrateDualLine" -> "superset.superset.migrations.shared.migrate_viz.base.MigrateViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.shared.migrate_viz.processors.MigrateHeatmapChart" -> "superset.superset.migrations.shared.migrate_viz.base.MigrateViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.shared.migrate_viz.processors.MigrateHistogramChart" -> "superset.superset.migrations.shared.migrate_viz.base.MigrateViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.shared.migrate_viz.processors.MigrateLineChart" -> "superset.superset.migrations.shared.migrate_viz.processors.TimeseriesChart" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.shared.migrate_viz.processors.MigratePivotTable" -> "superset.superset.migrations.shared.migrate_viz.base.MigrateViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.shared.migrate_viz.processors.MigrateSankey" -> "superset.superset.migrations.shared.migrate_viz.base.MigrateViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.shared.migrate_viz.processors.MigrateSunburst" -> "superset.superset.migrations.shared.migrate_viz.base.MigrateViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.shared.migrate_viz.processors.MigrateTreeMap" -> "superset.superset.migrations.shared.migrate_viz.base.MigrateViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.shared.migrate_viz.processors.TimeseriesChart" -> "superset.superset.migrations.shared.migrate_viz.base.MigrateViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2016-06-27_08-43_27ae655e4247_make_creator_owners.Dashboard" -> "superset.superset.migrations.versions.2016-06-27_08-43_27ae655e4247_make_creator_owners.AuditMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2016-06-27_08-43_27ae655e4247_make_creator_owners.Slice" -> "superset.superset.migrations.versions.2016-06-27_08-43_27ae655e4247_make_creator_owners.AuditMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.DruidColumn" -> "superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.BaseColumnMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.DruidDatasource" -> "superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.BaseDatasourceMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.DruidMetric" -> "superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.BaseMetricMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.SqlMetric" -> "superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.BaseMetricMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.SqlaTable" -> "superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.BaseDatasourceMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.TableColumn" -> "superset.superset.migrations.versions.2018-07-19_23-41_c617da68de7d_form_nullable.BaseColumnMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2018-07-20_15-31_7f2635b51f5d_update_base_columns.DruidColumn" -> "superset.superset.migrations.versions.2018-07-20_15-31_7f2635b51f5d_update_base_columns.BaseColumnMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2018-07-20_15-31_7f2635b51f5d_update_base_columns.TableColumn" -> "superset.superset.migrations.versions.2018-07-20_15-31_7f2635b51f5d_update_base_columns.BaseColumnMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2018-07-20_15-57_e9df189e5c7e_update_base_metrics.DruidMetric" -> "superset.superset.migrations.versions.2018-07-20_15-57_e9df189e5c7e_update_base_metrics.BaseMetricMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2018-07-20_15-57_e9df189e5c7e_update_base_metrics.SqlMetric" -> "superset.superset.migrations.versions.2018-07-20_15-57_e9df189e5c7e_update_base_metrics.BaseMetricMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2018-07-26_11-10_c82ee8a39623_add_implicit_tags.Tag" -> "superset.superset.migrations.versions.2018-07-26_11-10_c82ee8a39623_add_implicit_tags.AuditMixinNullable" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2018-07-26_11-10_c82ee8a39623_add_implicit_tags.TaggedObject" -> "superset.superset.migrations.versions.2018-07-26_11-10_c82ee8a39623_add_implicit_tags.AuditMixinNullable" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.DruidColumn" -> "superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.BaseColumnMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.DruidDatasource" -> "superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.BaseDatasourceMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.DruidMetric" -> "superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.BaseMetricMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.SqlMetric" -> "superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.BaseMetricMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.SqlaTable" -> "superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.BaseDatasourceMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.TableColumn" -> "superset.superset.migrations.versions.2019-03-21_10-22_d94d33dbe938_form_strip.BaseColumnMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.DruidColumn" -> "superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.BaseColumnMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.DruidDatasource" -> "superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.BaseDatasourceMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.DruidMetric" -> "superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.BaseMetricMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.SqlMetric" -> "superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.BaseMetricMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.SqlaTable" -> "superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.BaseDatasourceMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.TableColumn" -> "superset.superset.migrations.versions.2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.BaseColumnMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2020-10-21_21-09_96e99fb176a0_add_import_mixing_to_saved_query.SavedQuery" -> "superset.superset.migrations.versions.2020-10-21_21-09_96e99fb176a0_add_import_mixing_to_saved_query.ImportMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.AuxiliaryColumnsMixin" -> "superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.UUIDMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.NewColumn" -> "superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.AuxiliaryColumnsMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.NewDataset" -> "superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.AuxiliaryColumnsMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.NewTable" -> "superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.AuxiliaryColumnsMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.SqlMetric" -> "superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.AuxiliaryColumnsMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.SqlaTable" -> "superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.AuxiliaryColumnsMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.TableColumn" -> "superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.AuxiliaryColumnsMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.models.helpers.ImportExportMixin" -> "superset.superset.models.helpers.UUIDMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.models.sql_lab.Query" -> "superset.superset.models.sql_lab.SqlTablesMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.models.sql_lab.SavedQuery" -> "superset.superset.models.sql_lab.SqlTablesMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.security.api.GuestTokenCreateSchema" -> "superset.superset.security.api.PermissiveSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.security.api.ResourceSchema" -> "superset.superset.security.api.PermissiveSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.security.api.RlsRuleSchema" -> "superset.superset.security.api.PermissiveSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.security.api.UserSchema" -> "superset.superset.security.api.PermissiveSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.sql.dialects.firebolt.FireboltOld" -> "superset.superset.sql.dialects.firebolt.Firebolt" [arrowhead="empty", arrowtail="none"];
"superset.superset.sql.dialects.firebolt.FireboltOld.Generator" -> "superset.superset.sql.dialects.firebolt.Firebolt.Generator" [arrowhead="empty", arrowtail="none"];
"superset.superset.sql.dialects.firebolt.FireboltOld.Parser" -> "superset.superset.sql.dialects.firebolt.Firebolt.Parser" [arrowhead="empty", arrowtail="none"];
"superset.superset.sql.parse.KustoKQLStatement" -> "superset.superset.sql.parse.BaseSQLStatement" [arrowhead="empty", arrowtail="none"];
"superset.superset.sql.parse.SQLStatement" -> "superset.superset.sql.parse.BaseSQLStatement" [arrowhead="empty", arrowtail="none"];
"superset.superset.sql_lab.SqlLabQueryStoppedException" -> "superset.superset.sql_lab.SqlLabException" [arrowhead="empty", arrowtail="none"];
"superset.superset.sql_lab.SqlLabSecurityException" -> "superset.superset.sql_lab.SqlLabException" [arrowhead="empty", arrowtail="none"];
"superset.superset.sqllab.exceptions.QueryIsForbiddenToAccessException" -> "superset.superset.sqllab.exceptions.SqlLabException" [arrowhead="empty", arrowtail="none"];
"superset.superset.sqllab.sql_json_executer.ASynchronousSqlJsonExecutor" -> "superset.superset.sqllab.sql_json_executer.SqlJsonExecutorBase" [arrowhead="empty", arrowtail="none"];
"superset.superset.sqllab.sql_json_executer.SqlJsonExecutorBase" -> "superset.superset.sqllab.sql_json_executer.SqlJsonExecutor" [arrowhead="empty", arrowtail="none"];
"superset.superset.sqllab.sql_json_executer.SynchronousSqlJsonExecutor" -> "superset.superset.sqllab.sql_json_executer.SqlJsonExecutorBase" [arrowhead="empty", arrowtail="none"];
"superset.superset.stats_logger.DummyStatsLogger" -> "superset.superset.stats_logger.BaseStatsLogger" [arrowhead="empty", arrowtail="none"];
"superset.superset.stats_logger.StatsdStatsLogger" -> "superset.superset.stats_logger.BaseStatsLogger" [arrowhead="empty", arrowtail="none"];
"superset.superset.tags.models.ChartUpdater" -> "superset.superset.tags.models.ObjectUpdater" [arrowhead="empty", arrowtail="none"];
"superset.superset.tags.models.DashboardUpdater" -> "superset.superset.tags.models.ObjectUpdater" [arrowhead="empty", arrowtail="none"];
"superset.superset.tags.models.DatasetUpdater" -> "superset.superset.tags.models.ObjectUpdater" [arrowhead="empty", arrowtail="none"];
"superset.superset.tags.models.QueryUpdater" -> "superset.superset.tags.models.ObjectUpdater" [arrowhead="empty", arrowtail="none"];
"superset.superset.tags.schemas.TagPostSchema" -> "superset.superset.tags.schemas.TagObjectSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.tags.schemas.TagPutSchema" -> "superset.superset.tags.schemas.TagObjectSchema" [arrowhead="empty", arrowtail="none"];
"superset.superset.tasks.cache.DashboardTagsStrategy" -> "superset.superset.tasks.cache.Strategy" [arrowhead="empty", arrowtail="none"];
"superset.superset.tasks.cache.DummyStrategy" -> "superset.superset.tasks.cache.Strategy" [arrowhead="empty", arrowtail="none"];
"superset.superset.tasks.cache.TopNDashboardsStrategy" -> "superset.superset.tasks.cache.Strategy" [arrowhead="empty", arrowtail="none"];
"superset.superset.utils.encrypt.SQLAlchemyUtilsAdapter" -> "superset.superset.utils.encrypt.AbstractEncryptedFieldAdapter" [arrowhead="empty", arrowtail="none"];
"superset.superset.utils.log.DBEventLogger" -> "superset.superset.utils.log.AbstractEventLogger" [arrowhead="empty", arrowtail="none"];
"superset.superset.utils.log.StdOutEventLogger" -> "superset.superset.utils.log.AbstractEventLogger" [arrowhead="empty", arrowtail="none"];
"superset.superset.utils.logging_configurator.DefaultLoggingConfigurator" -> "superset.superset.utils.logging_configurator.LoggingConfigurator" [arrowhead="empty", arrowtail="none"];
"superset.superset.utils.screenshots.ChartScreenshot" -> "superset.superset.utils.screenshots.BaseScreenshot" [arrowhead="empty", arrowtail="none"];
"superset.superset.utils.screenshots.DashboardScreenshot" -> "superset.superset.utils.screenshots.BaseScreenshot" [arrowhead="empty", arrowtail="none"];
"superset.superset.utils.webdriver.WebDriverPlaywright" -> "superset.superset.utils.webdriver.WebDriverProxy" [arrowhead="empty", arrowtail="none"];
"superset.superset.utils.webdriver.WebDriverSelenium" -> "superset.superset.utils.webdriver.WebDriverProxy" [arrowhead="empty", arrowtail="none"];
"superset.superset.views.alerts.AlertView" -> "superset.superset.views.alerts.BaseAlertReportView" [arrowhead="empty", arrowtail="none"];
"superset.superset.views.alerts.BaseAlertReportView" -> "superset.superset.views.base.BaseSupersetView" [arrowhead="empty", arrowtail="none"];
"superset.superset.views.alerts.ReportView" -> "superset.superset.views.alerts.BaseAlertReportView" [arrowhead="empty", arrowtail="none"];
"superset.superset.views.annotations.AnnotationLayerView" -> "superset.superset.views.base.BaseSupersetView" [arrowhead="empty", arrowtail="none"];
"superset.superset.views.base_api.BaseSupersetApi" -> "superset.superset.views.base_api.BaseSupersetApiMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.views.base_api.BaseSupersetModelRestApi" -> "superset.superset.views.base_api.BaseSupersetApiMixin" [arrowhead="empty", arrowtail="none"];
"superset.superset.views.explore.ExplorePermalinkView" -> "superset.superset.views.base.BaseSupersetView" [arrowhead="empty", arrowtail="none"];
"superset.superset.views.explore.ExploreView" -> "superset.superset.views.base.BaseSupersetView" [arrowhead="empty", arrowtail="none"];
"superset.superset.views.sqllab.SqllabView" -> "superset.superset.views.base.BaseSupersetView" [arrowhead="empty", arrowtail="none"];
"superset.superset.views.tags.TagView" -> "superset.superset.views.base.BaseSupersetView" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.BaseDeckGLViz" -> "superset.superset.viz.BaseViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.BubbleViz" -> "superset.superset.viz.NVD3Viz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.BulletViz" -> "superset.superset.viz.NVD3Viz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.CalHeatmapViz" -> "superset.superset.viz.BaseViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.ChordViz" -> "superset.superset.viz.BaseViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.CountryMapViz" -> "superset.superset.viz.BaseViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.DeckArc" -> "superset.superset.viz.BaseDeckGLViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.DeckContour" -> "superset.superset.viz.BaseDeckGLViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.DeckGLMultiLayer" -> "superset.superset.viz.BaseViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.DeckGeoJson" -> "superset.superset.viz.BaseDeckGLViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.DeckGrid" -> "superset.superset.viz.BaseDeckGLViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.DeckHeatmap" -> "superset.superset.viz.BaseDeckGLViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.DeckHex" -> "superset.superset.viz.BaseDeckGLViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.DeckPathViz" -> "superset.superset.viz.BaseDeckGLViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.DeckPolygon" -> "superset.superset.viz.DeckPathViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.DeckScatterViz" -> "superset.superset.viz.BaseDeckGLViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.DeckScreengrid" -> "superset.superset.viz.BaseDeckGLViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.EventFlowViz" -> "superset.superset.viz.BaseViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.HorizonViz" -> "superset.superset.viz.NVD3TimeSeriesViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.MapboxViz" -> "superset.superset.viz.BaseViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.NVD3CompareTimeSeriesViz" -> "superset.superset.viz.NVD3TimeSeriesViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.NVD3TimePivotViz" -> "superset.superset.viz.NVD3TimeSeriesViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.NVD3TimeSeriesViz" -> "superset.superset.viz.NVD3Viz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.NVD3Viz" -> "superset.superset.viz.BaseViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.PairedTTestViz" -> "superset.superset.viz.BaseViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.ParallelCoordinatesViz" -> "superset.superset.viz.BaseViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.PartitionViz" -> "superset.superset.viz.NVD3TimeSeriesViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.RoseViz" -> "superset.superset.viz.NVD3TimeSeriesViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.TimeTableViz" -> "superset.superset.viz.BaseViz" [arrowhead="empty", arrowtail="none"];
"superset.superset.viz.WorldMapViz" -> "superset.superset.viz.BaseViz" [arrowhead="empty", arrowtail="none"];
"superset.tests.example_data.data_generator.birth_names.birth_names_generator_factory.BirthNamesGeneratorFactoryImpl" -> "superset.tests.example_data.data_generator.birth_names.birth_names_generator_factory.BirthNamesGeneratorFactory" [arrowhead="empty", arrowtail="none"];
"superset.tests.integration_tests.charts.data.api_tests.TestGetChartDataApi" -> "superset.tests.integration_tests.charts.data.api_tests.BaseTestChartDataApi" [arrowhead="empty", arrowtail="none"];
"superset.tests.integration_tests.charts.data.api_tests.TestPostChartDataApi" -> "superset.tests.integration_tests.charts.data.api_tests.BaseTestChartDataApi" [arrowhead="empty", arrowtail="none"];
"superset.tests.integration_tests.core_tests.TestCore" -> "superset.tests.integration_tests.base_tests.SupersetTestCase" [arrowhead="empty", arrowtail="none"];
"superset.tests.integration_tests.dashboard_tests.TestDashboard" -> "superset.tests.integration_tests.base_tests.SupersetTestCase" [arrowhead="empty", arrowtail="none"];
"superset.tests.integration_tests.dict_import_export_tests.TestDictImportExport" -> "superset.tests.integration_tests.base_tests.SupersetTestCase" [arrowhead="empty", arrowtail="none"];
"superset.tests.integration_tests.model_tests.TestDatabaseModel" -> "superset.tests.integration_tests.base_tests.SupersetTestCase" [arrowhead="empty", arrowtail="none"];
"superset.tests.integration_tests.model_tests.TestSqlaTableModel" -> "superset.tests.integration_tests.base_tests.SupersetTestCase" [arrowhead="empty", arrowtail="none"];
"superset.tests.integration_tests.result_set_tests.TestSupersetResultSet" -> "superset.tests.integration_tests.base_tests.SupersetTestCase" [arrowhead="empty", arrowtail="none"];
"superset.tests.integration_tests.sql_validator_tests.TestPostgreSQLValidator" -> "superset.tests.integration_tests.base_tests.SupersetTestCase" [arrowhead="empty", arrowtail="none"];
"superset.tests.integration_tests.sql_validator_tests.TestPrestoValidator" -> "superset.tests.integration_tests.base_tests.SupersetTestCase" [arrowhead="empty", arrowtail="none"];
"superset.tests.integration_tests.sqla_models_tests.TestDatabaseModel" -> "superset.tests.integration_tests.base_tests.SupersetTestCase" [arrowhead="empty", arrowtail="none"];
"superset.tests.integration_tests.viz_tests.TestBaseDeckGLViz" -> "superset.tests.integration_tests.base_tests.SupersetTestCase" [arrowhead="empty", arrowtail="none"];
"superset.tests.integration_tests.viz_tests.TestBaseViz" -> "superset.tests.integration_tests.base_tests.SupersetTestCase" [arrowhead="empty", arrowtail="none"];
"superset.tests.integration_tests.viz_tests.TestPairedTTest" -> "superset.tests.integration_tests.base_tests.SupersetTestCase" [arrowhead="empty", arrowtail="none"];
"superset.tests.integration_tests.viz_tests.TestPartitionViz" -> "superset.tests.integration_tests.base_tests.SupersetTestCase" [arrowhead="empty", arrowtail="none"];
"superset.tests.integration_tests.viz_tests.TestRoseVis" -> "superset.tests.integration_tests.base_tests.SupersetTestCase" [arrowhead="empty", arrowtail="none"];
"superset.tests.integration_tests.viz_tests.TestTimeSeriesTableViz" -> "superset.tests.integration_tests.base_tests.SupersetTestCase" [arrowhead="empty", arrowtail="none"];
"superset.tests.integration_tests.viz_tests.TestTimeSeriesViz" -> "superset.tests.integration_tests.base_tests.SupersetTestCase" [arrowhead="empty", arrowtail="none"];
"superset.superset.charts.schemas.ChartDataAggregateConfigField" -> "superset.superset.charts.schemas.ChartDataAggregateOptionsSchema" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aggregates", style="solid"];
"superset.superset.charts.schemas.ChartDataAggregateConfigField" -> "superset.superset.charts.schemas.ChartDataPivotOptionsSchema" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aggregates", style="solid"];
"superset.superset.charts.schemas.ChartDataAggregateConfigField" -> "superset.superset.charts.schemas.ChartDataSortOptionsSchema" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aggregates", style="solid"];
"superset.superset.commands.sql_lab.execute.CanAccessQueryValidator" -> "superset.superset.commands.sql_lab.execute.ExecuteSqlCommand" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_access_validator", style="solid"];
"superset.superset.commands.sql_lab.execute.SqlQueryRender" -> "superset.superset.commands.sql_lab.execute.ExecuteSqlCommand" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_sql_query_render", style="solid"];
"superset.superset.connectors.sqla.models.SqlMetric" -> "superset.superset.connectors.sqla.models.SqlaTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="metric_class", style="solid"];
"superset.superset.connectors.sqla.models.TableColumn" -> "superset.superset.connectors.sqla.models.SqlaTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="column_class", style="solid"];
"superset.superset.dashboards.permalink.types.DashboardPermalinkState" -> "superset.superset.dashboards.permalink.types.DashboardPermalinkValue" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="state", style="solid"];
"superset.superset.dashboards.schemas.SharedLabelsColorsField" -> "superset.superset.dashboards.schemas.DashboardColorsConfigUpdateSchema" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shared_label_colors", style="solid"];
"superset.superset.dashboards.schemas.SharedLabelsColorsField" -> "superset.superset.dashboards.schemas.DashboardJSONMetadataSchema" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shared_label_colors", style="solid"];
"superset.superset.databases.schemas.DelimitedListField" -> "superset.superset.databases.schemas.BaseUploadPostSchema" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="columns_read", style="solid"];
"superset.superset.databases.schemas.DelimitedListField" -> "superset.superset.databases.schemas.CSVUploadPostSchema" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="column_dates", style="solid"];
"superset.superset.databases.schemas.DelimitedListField" -> "superset.superset.databases.schemas.CSVUploadPostSchema" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="null_values", style="solid"];
"superset.superset.databases.schemas.DelimitedListField" -> "superset.superset.databases.schemas.ExcelUploadPostSchema" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="column_dates", style="solid"];
"superset.superset.databases.schemas.DelimitedListField" -> "superset.superset.databases.schemas.ExcelUploadPostSchema" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="null_values", style="solid"];
"superset.superset.databases.schemas.TableMetadataOptionsResponse" -> "superset.superset.databases.schemas.TableMetadataForeignKeysIndexesResponse" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="options", style="solid"];
"superset.superset.databases.schemas.TableMetadataPrimaryKeyResponse" -> "superset.superset.databases.schemas.TableMetadataResponse" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="primaryKey", style="solid"];
"superset.superset.db_engine_specs.base.BasicParametersSchema" -> "superset.superset.db_engine_specs.base.BasicParametersMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters_schema", style="solid"];
"superset.superset.db_engine_specs.base.BasicParametersType" -> "superset.superset.db_engine_specs.base.BasicPropertiesType" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters", style="solid"];
"superset.superset.db_engine_specs.bigquery.BigQueryParametersSchema" -> "superset.superset.db_engine_specs.bigquery.BigQueryEngineSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters_schema", style="solid"];
"superset.superset.db_engine_specs.clickhouse.ClickHouseParametersSchema" -> "superset.superset.db_engine_specs.clickhouse.ClickHouseConnectEngineSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters_schema", style="solid"];
"superset.superset.db_engine_specs.couchbase.BasicParametersType" -> "superset.superset.db_engine_specs.couchbase.BasicPropertiesType" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters", style="solid"];
"superset.superset.db_engine_specs.couchbase.CouchbaseParametersSchema" -> "superset.superset.db_engine_specs.couchbase.CouchbaseEngineSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters_schema", style="solid"];
"superset.superset.db_engine_specs.databend.DatabendParametersSchema" -> "superset.superset.db_engine_specs.databend.DatabendConnectEngineSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters_schema", style="solid"];
"superset.superset.db_engine_specs.databricks.DatabricksNativeParametersType" -> "superset.superset.db_engine_specs.databricks.DatabricksNativePropertiesType" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters", style="solid"];
"superset.superset.db_engine_specs.databricks.DatabricksNativePropertiesSchema" -> "superset.superset.db_engine_specs.databricks.DatabricksNativeEngineSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="properties_schema", style="solid"];
"superset.superset.db_engine_specs.databricks.DatabricksNativeSchema" -> "superset.superset.db_engine_specs.databricks.DatabricksNativeEngineSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters_schema", style="solid"];
"superset.superset.db_engine_specs.databricks.DatabricksPythonConnectorParametersType" -> "superset.superset.db_engine_specs.databricks.DatabricksPythonConnectorPropertiesType" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters", style="solid"];
"superset.superset.db_engine_specs.databricks.DatabricksPythonConnectorSchema" -> "superset.superset.db_engine_specs.databricks.DatabricksPythonConnectorEngineSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters_schema", style="solid"];
"superset.superset.db_engine_specs.duckdb.DuckDBParametersSchema" -> "superset.superset.db_engine_specs.duckdb.DuckDBParametersMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters_schema", style="solid"];
"superset.superset.db_engine_specs.duckdb.DuckDBParametersType" -> "superset.superset.db_engine_specs.duckdb.DuckDBPropertiesType" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters", style="solid"];
"superset.superset.db_engine_specs.gsheets.GSheetsParametersSchema" -> "superset.superset.db_engine_specs.gsheets.GSheetsEngineSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters_schema", style="solid"];
"superset.superset.db_engine_specs.gsheets.GSheetsParametersType" -> "superset.superset.db_engine_specs.gsheets.GSheetsPropertiesType" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters", style="solid"];
"superset.superset.db_engine_specs.snowflake.SnowflakeParametersSchema" -> "superset.superset.db_engine_specs.snowflake.SnowflakeEngineSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters_schema", style="solid"];
"superset.superset.db_engine_specs.trino.TrinoAuthError" -> "superset.superset.db_engine_specs.trino.TrinoEngineSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="oauth2_exception", style="solid"];
"superset.superset.errors.ErrorLevel" -> "superset.superset.errors.SupersetError" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="level", style="solid"];
"superset.superset.errors.SupersetErrorType" -> "superset.superset.errors.SupersetError" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="error_type", style="solid"];
"superset.superset.explore.permalink.types.ExplorePermalinkState" -> "superset.superset.explore.permalink.types.ExplorePermalinkValue" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="state", style="solid"];
"superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.Database" -> "superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.NewTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="database", style="solid"];
"superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.Database" -> "superset.superset.migrations.versions.2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.SqlaTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="database", style="solid"];
"superset.superset.security.guest_token.GuestTokenResourceType" -> "superset.superset.security.guest_token.GuestTokenResource" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="type", style="solid"];
"superset.superset.security.guest_token.GuestTokenUser" -> "superset.superset.security.guest_token.GuestToken" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user", style="solid"];
"superset.superset.tasks.cache.CacheWarmupPayload" -> "superset.superset.tasks.cache.CacheWarmupTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="payload", style="solid"];
"superset.superset.utils.cache_manager.ExploreFormDataCache" -> "superset.superset.utils.cache_manager.CacheManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_explore_form_data_cache", style="solid"];
"superset.superset.utils.core.GenericDataType" -> "superset.superset.utils.core.ColumnSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="generic_type", style="solid"];
"superset.superset.views.base.SupersetListWidget" -> "superset.superset.views.base.SupersetModelView" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="list_widget", style="solid"];
"superset.tests.example_data.data_generator.birth_names.birth_names_generator_factory.BirthNamesGeneratorFactory" -> "superset.tests.example_data.data_generator.birth_names.birth_names_generator_factory.BirthNamesGeneratorFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__factory", style="solid"];
"superset.tests.example_data.data_loading.data_definitions.types.TableMetaData" -> "superset.tests.example_data.data_loading.data_definitions.types.Table" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="table_metadata", style="solid"];
"superset.tests.example_data.data_loading.pandas.pandas_data_loader.TableToDfConvertor" -> "superset.tests.example_data.data_loading.pandas.pandas_data_loader.PandasDataLoader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_table_to_df_convertor", style="solid"];
"superset.superset.commands.database.uploaders.base.BaseDataReader" -> "superset.superset.commands.database.uploaders.base.UploadCommand" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_reader", style="solid"];
"superset.superset.reports.notifications.base.NotificationContent" -> "superset.superset.reports.notifications.base.BaseNotification" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_content", style="solid"];
"superset.superset.security.guest_token.GuestToken" -> "superset.superset.security.guest_token.GuestUser" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="guest_token", style="solid"];
}
